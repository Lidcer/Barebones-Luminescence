(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x2) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x2, {
    get: (a2, b2) => (typeof require !== "undefined" ? require : a2)[b2]
  }) : x2)(function(x2) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x2 + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i2 = 0; i2 < 10; i2++) {
            test2["_" + String.fromCharCode(i2)] = i2;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
            return test2[n2];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from = Object(arguments[s2]);
          for (var key in from) {
            if (hasOwnProperty2.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i2 = 0; i2 < symbols.length; i2++) {
              if (propIsEnumerable.call(from, symbols[i2])) {
                to[symbols[i2]] = from[symbols[i2]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.1";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            // Used by renderers to avoid bundling object-assign twice in UMD bundles:
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config2, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index2) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape("" + element.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback2 = false;
            if (children === null) {
              invokeCallback2 = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback2 = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback2 = true;
                  }
              }
            }
            if (invokeCallback2) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                child = children[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n2 = 0;
            mapChildren(children, function() {
              n2++;
            });
            return n2;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample2) {
              if (sample2 && control && typeof sample2.stack === "string") {
                var sampleLines = sample2.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i2 = 0; i2 < node.length; i2++) {
                var child = node[i2];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              /* @__PURE__ */ new Map([[frozenObject, null]]);
              /* @__PURE__ */ new Set([frozenObject]);
            } catch (e2) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useEffect = useEffect;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = true;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (
            // If Scheduler runs in a non-DOM environment, it falls back to a naive
            // implementation using setTimeout.
            typeof window === "undefined" || // Check if MessageChannel is supported, too.
            typeof MessageChannel !== "function"
          ) {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e2) {
                  setTimeout(_flushCallback, 0);
                  throw e2;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame2 = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index2 = heap.length;
            heap.push(node);
            siftUp(heap, node, index2);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i2) {
            var index2 = i2;
            while (true) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i2) {
            var index2 = i2;
            var length = heap.length;
            while (index2 < length) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node;
                  index2 = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b2) {
            var diff = a2.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a2.id - b2.id;
          }
          var NoPriority = 0;
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          var runIdCounter = 0;
          var mainThreadIdCounter = 0;
          var profilingStateSize = 4;
          var sharedProfilingBuffer = (
            // $FlowFixMe Flow doesn't know about SharedArrayBuffer
            typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : (
              // $FlowFixMe Flow doesn't know about ArrayBuffer
              typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null
            )
          );
          var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
          var PRIORITY = 0;
          var CURRENT_TASK_ID = 1;
          var CURRENT_RUN_ID = 2;
          var QUEUE_SIZE = 3;
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[QUEUE_SIZE] = 0;
            profilingState[CURRENT_TASK_ID] = 0;
          }
          var INITIAL_EVENT_LOG_SIZE = 131072;
          var MAX_EVENT_LOG_SIZE = 524288;
          var eventLogSize = 0;
          var eventLogBuffer = null;
          var eventLog = null;
          var eventLogIndex = 0;
          var TaskStartEvent = 1;
          var TaskCompleteEvent = 2;
          var TaskErrorEvent = 3;
          var TaskCancelEvent = 4;
          var TaskRunEvent = 5;
          var TaskYieldEvent = 6;
          var SchedulerSuspendEvent = 7;
          var SchedulerResumeEvent = 8;
          function logEvent(entries) {
            if (eventLog !== null) {
              var offset = eventLogIndex;
              eventLogIndex += entries.length;
              if (eventLogIndex + 1 > eventLogSize) {
                eventLogSize *= 2;
                if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                  console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                  stopLoggingProfilingEvents();
                  return;
                }
                var newEventLog = new Int32Array(eventLogSize * 4);
                newEventLog.set(eventLog);
                eventLogBuffer = newEventLog.buffer;
                eventLog = newEventLog;
              }
              eventLog.set(entries, offset);
            }
          }
          function startLoggingProfilingEvents() {
            eventLogSize = INITIAL_EVENT_LOG_SIZE;
            eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
            eventLog = new Int32Array(eventLogBuffer);
            eventLogIndex = 0;
          }
          function stopLoggingProfilingEvents() {
            var buffer = eventLogBuffer;
            eventLogSize = 0;
            eventLogBuffer = null;
            eventLog = null;
            eventLogIndex = 0;
            return buffer;
          }
          function markTaskStart(task, ms) {
            {
              profilingState[QUEUE_SIZE]++;
              if (eventLog !== null) {
                logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
              }
            }
          }
          function markTaskCompleted(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskCanceled(task, ms) {
            {
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCancelEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskErrored(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskErrorEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskRun(task, ms) {
            {
              runIdCounter++;
              profilingState[PRIORITY] = task.priorityLevel;
              profilingState[CURRENT_TASK_ID] = task.id;
              profilingState[CURRENT_RUN_ID] = runIdCounter;
              if (eventLog !== null) {
                logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markTaskYield(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[CURRENT_RUN_ID] = 0;
              if (eventLog !== null) {
                logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markSchedulerSuspended(ms) {
            {
              mainThreadIdCounter++;
              if (eventLog !== null) {
                logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          function markSchedulerUnsuspended(ms) {
            {
              if (eventLog !== null) {
                logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
                {
                  markTaskStart(timer, currentTime);
                  timer.isQueued = true;
                }
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            {
              markSchedulerUnsuspended(initialTime2);
            }
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
              {
                var _currentTime = exports.unstable_now();
                markSchedulerSuspended(_currentTime);
              }
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                markTaskRun(currentTask, currentTime);
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                  markTaskYield(currentTask, currentTime);
                } else {
                  {
                    markTaskCompleted(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            {
              newTask.isQueued = false;
            }
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              {
                markTaskStart(newTask, currentTime);
                newTask.isQueued = true;
              }
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            {
              if (task.isQueued) {
                var currentTime = exports.unstable_now();
                markTaskCanceled(task, currentTime);
                task.isQueued = false;
              }
            }
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = {
            startLoggingProfilingEvents,
            stopLoggingProfilingEvents,
            sharedProfilingBuffer
          };
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React27 = require_react();
          var _assign = require_object_assign();
          var Scheduler2 = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React27.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React27) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref2) {
            var name = _ref2[0], attributeName = _ref2[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize2 = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample2) {
              if (sample2 && control && typeof sample2.stack === "string") {
                var sampleLines = sample2.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get3 = descriptor.get, set3 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get3.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set3.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e2) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i2 = 0; i2 < group.length; i2++) {
                var otherNode = group[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React27.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React27.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize2 = function(string) {
              return string.replace(hyphenPattern, function(_2, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize2(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles2) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles2) {
                if (!styles2.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles2[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles2) {
            var style2 = node.style;
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles2[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles2) {
            var expanded = {};
            for (var key in styles2) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a2, b2, c2, d2) {
            return fn(a2, b2, c2, d2);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a2, b2) {
            if (isBatchingEventUpdates) {
              return fn(a2, b2);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a2, b2);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a2, b2, c2, d2) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a2, b2, c2, d2);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener3 = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener3 || typeof listener3 === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener3 + "` type.");
              }
            }
            return listener3;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e2) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a2, b2, c2, d2, e2, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b2, c2, d2, e2, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a2, b2, c2, d2, e2, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b2, c2, d2, e2, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get2(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set2(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var PlacementAndUpdate = (
            /*           */
            6
          );
          var Deletion = (
            /*                     */
            8
          );
          var ContentReset = (
            /*                 */
            16
          );
          var Callback = (
            /*                     */
            32
          );
          var DidCapture = (
            /*                   */
            64
          );
          var Ref = (
            /*                          */
            128
          );
          var Snapshot = (
            /*                     */
            256
          );
          var Passive = (
            /*                      */
            512
          );
          var PassiveUnmountPendingDev = (
            /*     */
            8192
          );
          var Hydrating = (
            /*                    */
            1024
          );
          var HydratingAndUpdate = (
            /*           */
            1028
          );
          var LifecycleEffectMask = (
            /*          */
            932
          );
          var HostEffectMask = (
            /*               */
            2047
          );
          var Incomplete = (
            /*                   */
            2048
          );
          var ShouldCapture = (
            /*                */
            4096
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            16384
          );
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get2(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a2.alternate === b2)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a2.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler2.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler2.unstable_scheduleCallback(Scheduler2.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var eventPriorities = /* @__PURE__ */ new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            // Careful!
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            // Careful!
            "focusout",
            "blur",
            // Careful!
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i2 = 0; i2 < eventTypes.length; i2 += 2) {
              var topEvent = eventTypes[i2];
              var event = eventTypes[i2 + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i2 = 0; i2 < eventTypes.length; i2++) {
              eventPriorities.set(eventTypes[i2], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler2.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var SyncBatchedLane = (
            /*                 */
            2
          );
          var InputDiscreteHydrationLane = (
            /*      */
            4
          );
          var InputDiscreteLanes = (
            /*                    */
            24
          );
          var InputContinuousHydrationLane = (
            /*           */
            32
          );
          var InputContinuousLanes = (
            /*                  */
            192
          );
          var DefaultHydrationLane = (
            /*            */
            256
          );
          var DefaultLanes = (
            /*                   */
            3584
          );
          var TransitionHydrationLane = (
            /*                */
            4096
          );
          var TransitionLanes = (
            /*                       */
            4186112
          );
          var RetryLanes = (
            /*                            */
            62914560
          );
          var SomeRetryLane = (
            /*                  */
            33554432
          );
          var SelectiveHydrationLane = (
            /*          */
            67108864
          );
          var NonIdleLanes = (
            /*                                 */
            134217727
          );
          var IdleHydrationLane = (
            /*               */
            134217728
          );
          var IdleLanes = (
            /*                             */
            805306368
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index3 = 31 - clz32(lanes);
            return index3 < 0 ? NoLanes : 1 << index3;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set3, subset) {
            return (set3 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set3, subset) {
            return set3 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial2) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial2);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log2 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log2(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler2.unstable_UserBlockingPriority, runWithPriority = Scheduler2.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(
                null,
                // Flags that we're not actually blocked on anything as far as we know.
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              );
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener3) {
            target.addEventListener(eventType, listener3, false);
            return listener3;
          }
          function addEventCaptureListener(target, eventType, listener3) {
            target.addEventListener(eventType, listener3, true);
            return listener3;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener3, passive) {
            target.addEventListener(eventType, listener3, {
              capture: true,
              passive
            });
            return listener3;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener3, passive) {
            target.addEventListener(eventType, listener3, {
              passive
            });
            return listener3;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              if (!hasOwnProperty$2.call(objB, keysA[i2]) || !objectIs(objA[keysA[i2]], objB[keysA[i2]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e2) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener3, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener3, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener3 = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener3, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener3 = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener3, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener3);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener3, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener3);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener3, currentTarget) {
            return {
              instance,
              listener: listener3,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener3 = getListener(instance, reactEventName);
                  if (listener3 != null) {
                    listeners.push(createDispatchListener(instance, listener3, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent3(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent3(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent3(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent3(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent3(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent3(nodeA);
              nodeB = getParent3(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener3) {
              if (listener3 === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener3);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop5() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop5;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (
                // Convince Flow we've calculated it (it's DEV-only in this method.)
                typeof isCustomComponentTag === "boolean"
              ) {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace2;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace2 = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace2 = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace: namespace2,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace2 = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace: namespace2,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler2.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler2.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler2.unstable_cancelCallback, Scheduler_shouldYield = Scheduler2.unstable_shouldYield, Scheduler_requestPaint = Scheduler2.unstable_requestPaint, Scheduler_now$1 = Scheduler2.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler2.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler2.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler2.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler2.unstable_NormalPriority, Scheduler_LowPriority = Scheduler2.unstable_LowPriority, Scheduler_IdlePriority = Scheduler2.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = (
            // Fall back gracefully if we're running an older version of Scheduler.
            Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
            }
          );
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i2 < _queue.length; i2++) {
                      var callback = _queue[i2];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i2 + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.1";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set3) {
              var array = [];
              set3.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect = effects[i2];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React27.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set2(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || // Keep this check inline so it only runs on the false path:
                      isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (!(c2 !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*  */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Layout = (
            /*    */
            2
          );
          var Passive$1 = (
            /*   */
            4
          );
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if ("undefined" !== typeof jest) {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if ("undefined" !== typeof jest) {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if ("undefined" !== typeof jest) {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler2.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentName(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentName(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentName(_type)
                );
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentName(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentName(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentName(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i2 = 0; i2 < mutableSourceEagerHydrationData.length; i2 += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i2];
                    var version = mutableSourceEagerHydrationData[i2 + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentName(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  updateLanes,
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    if (!validateSuspenseListNestedChild(children[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode,
                    workInProgress2.lastEffect
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode,
                    workInProgress2.lastEffect
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0,
                    workInProgress2.lastEffect
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentName(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e2) {
              setTimeout(function() {
                throw e2;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = /* @__PURE__ */ new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
              // If we don't use mutation we drill down into portals here instead.
              node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var EventContext = (
            /*                 */
            2
          );
          var DiscreteEventContext = (
            /*         */
            4
          );
          var LegacyUnbatchedContext = (
            /*       */
            8
          );
          var RenderContext = (
            /*                */
            16
          );
          var CommitContext = (
            /*                */
            32
          );
          var RetryAfterError = (
            /*       */
            64
          );
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if (
              // TODO: Temporary. We're removing the concept of discrete updates.
              (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2
            ) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if (
                // Check if we're inside unbatchedUpdates
                (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
                (executionContext & (RenderContext | CommitContext)) === NoContext
              ) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && // Only updates at user-blocking priority or greater are considered
              // discrete, even inside a discrete event.
              (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a2, b2, c2, d2) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a2, b2, c2, d2));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a2) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a2);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a2));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
                (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if (
              // TODO: Move this check out of the hot path by moving `resetChildLanes`
              // to switch statement in `completeWork`.
              (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes
            ) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i2 = 0; i2 < expirationTimes.length; i2++) {
                    scheduleInteractions(root2, expirationTimes[i2], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create = effect.create;
            effect.destroy = create();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i2 = 0; i2 < unmountEffects.length; i2 += 2) {
              var _effect = unmountEffects[i2];
              var fiber = unmountEffects[i2 + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler2.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = /* @__PURE__ */ new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e2) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = /* @__PURE__ */ new Set();
              this.pendingInteractionMap = /* @__PURE__ */ new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get2(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get2(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if ("undefined" !== typeof jest) {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index3) {
              var key = path[index3];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index3 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index3, value) {
              if (index3 >= path.length) {
                return value;
              }
              var key = path[index3];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
            // This is an array for better minification.
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              // TODO: This is related to `act`, not events. Move to separate key?
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "node_modules/lodash/lodash.js"(exports, module) {
      (function() {
        var undefined2;
        var VERSION = "4.17.20";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrim = /^\s+|\s+$/g, reTrimStart = /^\s+/, reTrimEnd = /\s+$/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          // Latin-1 Supplement block.
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          // Latin Extended-A block.
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e2) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            var value = array[index2];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        function arrayEach(array, iteratee) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (iteratee(array[index2], index2, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEvery(array, predicate) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (!predicate(array[index2], index2, array)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array, predicate) {
          var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index2 < length) {
            var value = array[index2];
            if (predicate(value, index2, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        function arrayIncludesWith(array, value, comparator) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (comparator(value, array[index2])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array, iteratee) {
          var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index2 < length) {
            result[index2] = iteratee(array[index2], index2, array);
          }
          return result;
        }
        function arrayPush(array, values) {
          var index2 = -1, length = values.length, offset = array.length;
          while (++index2 < length) {
            array[offset + index2] = values[index2];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index2 = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index2];
          }
          while (++index2 < length) {
            accumulator = iteratee(accumulator, array[index2], index2, array);
          }
          return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        function arraySome(array, predicate) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (predicate(array[index2], index2, array)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index2-- : ++index2 < length) {
            if (predicate(array[index2], index2, array)) {
              return index2;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index2 = fromIndex - 1, length = array.length;
          while (++index2 < length) {
            if (comparator(array[index2], value)) {
              return index2;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index2, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index2, collection2);
          });
          return accumulator;
        }
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        function baseSum(array, iteratee) {
          var result, index2 = -1, length = array.length;
          while (++index2 < length) {
            var current = iteratee(array[index2]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        function baseTimes(n2, iteratee) {
          var index2 = -1, result = Array(n2);
          while (++index2 < n2) {
            result[index2] = iteratee(index2);
          }
          return result;
        }
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index2 = -1, length = strSymbols.length;
          while (++index2 < length && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
          }
          return index2;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index2 = strSymbols.length;
          while (index2-- && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
          }
          return index2;
        }
        function countHolders(array, placeholder) {
          var length = array.length, result = 0;
          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        function getValue(object, key) {
          return object == null ? undefined2 : object[key];
        }
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        function iteratorToArray(iterator) {
          var data, result = [];
          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        function mapToArray(map) {
          var index2 = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index2] = [key, value];
          });
          return result;
        }
        function overArg(func, transform2) {
          return function(arg) {
            return func(transform2(arg));
          };
        }
        function replaceHolders(array, placeholder) {
          var index2 = -1, length = array.length, resIndex = 0, result = [];
          while (++index2 < length) {
            var value = array[index2];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index2] = PLACEHOLDER;
              result[resIndex++] = index2;
            }
          }
          return result;
        }
        function setToArray(set2) {
          var index2 = -1, result = Array(set2.size);
          set2.forEach(function(value) {
            result[++index2] = value;
          });
          return result;
        }
        function setToPairs(set2) {
          var index2 = -1, result = Array(set2.size);
          set2.forEach(function(value) {
            result[++index2] = [value, value];
          });
          return result;
        }
        function strictIndexOf(array, value, fromIndex) {
          var index2 = fromIndex - 1, length = array.length;
          while (++index2 < length) {
            if (array[index2] === value) {
              return index2;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array, value, fromIndex) {
          var index2 = fromIndex + 1;
          while (index2--) {
            if (array[index2] === value) {
              return index2;
            }
          }
          return index2;
        }
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context) {
          context = context == null ? root : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty2 = objectProto.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root._;
          var reIsNative = RegExp2(
            "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
          );
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e2) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap2 && new WeakMap2();
          var realNames = {};
          var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty2.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          var baseCreate = /* @__PURE__ */ function() {
            function object() {
            }
            return function(proto) {
              if (!isObject(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result2 = new object();
              object.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            /**
             * Used to detect `data` property values to be HTML-escaped.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "escape": reEscape,
            /**
             * Used to detect code to be evaluated.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "evaluate": reEvaluate,
            /**
             * Used to detect `data` property values to inject.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "interpolate": reInterpolate,
            /**
             * Used to reference the data object in the template text.
             *
             * @memberOf _.templateSettings
             * @type {string}
             */
            "variable": "",
            /**
             * Used to import variables into the compiled template.
             *
             * @memberOf _.templateSettings
             * @type {Object}
             */
            "imports": {
              /**
               * A reference to the `lodash` function.
               *
               * @memberOf _.templateSettings.imports
               * @type {Function}
               */
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index2 = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index2 += dir;
                var iterIndex = -1, value = array[index2];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index2 = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index2 < length) {
              var entry = entries[index2];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty2.call(data, key) ? data[key] : undefined2;
          }
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty2.call(data, key);
          }
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index2 = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index2 < length) {
              var entry = entries[index2];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data = this.__data__, index2 = assocIndexOf(data, key);
            if (index2 < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index2 == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index2, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data = this.__data__, index2 = assocIndexOf(data, key);
            return index2 < 0 ? undefined2 : data[index2][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value) {
            var data = this.__data__, index2 = assocIndexOf(data, key);
            if (index2 < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index2][1] = value;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index2 = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index2 < length) {
              var entry = entries[index2];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values2) {
            var index2 = -1, length = values2 == null ? 0 : values2.length;
            this.__data__ = new MapCache();
            while (++index2 < length) {
              this.add(values2[index2]);
            }
          }
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
              (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
              isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
              isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
              isIndex(key, length)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          function arraySampleSize(array, n2) {
            return shuffleSelf(copyArray(array), baseClamp(n2, 0, array.length));
          }
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          function assignMergeValue(object, key, value) {
            if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          function baseAt(object, paths) {
            var index2 = -1, length = paths.length, result2 = Array2(length), skip = object == null;
            while (++index2 < length) {
              result2[index2] = skip ? undefined2 : get2(object, paths[index2]);
            }
            return result2;
          }
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          function baseConforms(source) {
            var props = keys(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (length--) {
              var key = props[length], predicate = source[key], value = object[key];
              if (value === undefined2 && !(key in object) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function baseDifference(array, values2, iteratee2, comparator) {
            var index2 = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
            if (!length) {
              return result2;
            }
            if (iteratee2) {
              values2 = arrayMap(values2, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values2.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values2 = new SetCache(values2);
            }
            outer:
              while (++index2 < length) {
                var value = array[index2], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values2[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values2, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value, index2, collection2) {
              result2 = !!predicate(value, index2, collection2);
              return result2;
            });
            return result2;
          }
          function baseExtremum(array, iteratee2, comparator) {
            var index2 = -1, length = array.length;
            while (++index2 < length) {
              var value = array[index2], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value;
              }
            }
            return result2;
          }
          function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end === undefined2 || end > length ? length : toInteger(end);
            if (end < 0) {
              end += length;
            }
            end = start > end ? 0 : toLength(end);
            while (start < end) {
              array[start++] = value;
            }
            return array;
          }
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value, index2, collection2) {
              if (predicate(value, index2, collection2)) {
                result2.push(value);
              }
            });
            return result2;
          }
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index2 = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index2 < length) {
              var value = array[index2];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys);
          }
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys);
          }
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction(object[key]);
            });
          }
          function baseGet(object, path) {
            path = castPath(path, object);
            var index2 = 0, length = path.length;
            while (object != null && index2 < length) {
              object = object[toKey(path[index2++])];
            }
            return index2 && index2 == length ? object : undefined2;
          }
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object);
            return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
          }
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
          }
          function baseGt(value, other) {
            return value > other;
          }
          function baseHas(object, key) {
            return object != null && hasOwnProperty2.call(object, key);
          }
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index2 = -1, seen = caches[0];
            outer:
              while (++index2 < length && result2.length < maxLength) {
                var value = array[index2], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value, key, object2) {
              setter(accumulator, iteratee2(value), key, object2);
            });
            return accumulator;
          }
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined2 : apply(func, object, args);
          }
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          function baseIsMatch(object, source, matchData, customizer) {
            var index2 = matchData.length, length = index2, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (index2--) {
              var data = matchData[index2];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index2 < length) {
              data = matchData[index2];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result2 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty2.call(object, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result2 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseLt(value, other) {
            return value < other;
          }
          function baseMap(collection, iteratee2) {
            var index2 = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result2[++index2] = iteratee2(value, key, collection2);
            });
            return result2;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get2(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          function baseNth(array, n2) {
            var length = array.length;
            if (!length) {
              return;
            }
            n2 += n2 < 0 ? length : 0;
            return isIndex(n2, length) ? array[n2] : undefined2;
          }
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index2 = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index2, "value": value };
            });
            return baseSortBy(result2, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
              return hasIn(object, path);
            });
          }
          function basePickBy(object, paths, predicate) {
            var index2 = -1, length = paths.length, result2 = {};
            while (++index2 < length) {
              var path = paths[index2], value = baseGet(object, path);
              if (predicate(value, path)) {
                baseSet(result2, castPath(path, object), value);
              }
            }
            return result2;
          }
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          function basePullAll(array, values2, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index2 = -1, length = values2.length, seen = array;
            if (array === values2) {
              values2 = copyArray(values2);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index2 < length) {
              var fromIndex = 0, value = values2[index2], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
              var index2 = indexes[length];
              if (length == lastIndex || index2 !== previous) {
                var previous = index2;
                if (isIndex(index2)) {
                  splice.call(array, index2, 1);
                } else {
                  baseUnset(array, index2);
                }
              }
            }
            return array;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start, end, step, fromRight) {
            var index2 = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
            while (length--) {
              result2[fromRight ? length : ++index2] = start;
              start += step;
            }
            return result2;
          }
          function baseRepeat(string, n2) {
            var result2 = "";
            if (!string || n2 < 1 || n2 > MAX_SAFE_INTEGER) {
              return result2;
            }
            do {
              if (n2 % 2) {
                result2 += string;
              }
              n2 = nativeFloor(n2 / 2);
              if (n2) {
                string += string;
              }
            } while (n2);
            return result2;
          }
          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
          }
          function baseSample(collection) {
            return arraySample(values(collection));
          }
          function baseSampleSize(collection, n2) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n2, 0, array.length));
          }
          function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
              return object;
            }
            path = castPath(path, object);
            var index2 = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index2 < length) {
              var key = toKey(path[index2]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index2 != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index2 + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object;
          }
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          function baseSlice(array, start, end) {
            var index2 = -1, length = array.length;
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end > length ? length : end;
            if (end < 0) {
              end += length;
            }
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result2 = Array2(length);
            while (++index2 < length) {
              result2[index2] = array[index2 + start];
            }
            return result2;
          }
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value, index2, collection2) {
              result2 = predicate(value, index2, collection2);
              return !result2;
            });
            return !!result2;
          }
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array, iteratee2) {
            var index2 = -1, length = array.length, resIndex = 0, result2 = [];
            while (++index2 < length) {
              var value = array[index2], computed = iteratee2 ? iteratee2(value) : value;
              if (!index2 || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function baseUniq(array, iteratee2, comparator) {
            var index2 = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set3 = iteratee2 ? null : createSet(array);
              if (set3) {
                return setToArray(set3);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index2 < length) {
                var value = array[index2], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index2 = fromRight ? length : -1;
            while ((fromRight ? index2-- : ++index2 < length) && predicate(array[index2], index2, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index2, fromRight ? index2 + 1 : length) : baseSlice(array, fromRight ? index2 + 1 : 0, fromRight ? length : index2);
          }
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index2 = -1, result2 = Array2(length);
            while (++index2 < length) {
              var array = arrays[index2], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index2) {
                  result2[index2] = baseDifference(result2[index2] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values2, assignFunc) {
            var index2 = -1, length = props.length, valsLength = values2.length, result2 = {};
            while (++index2 < length) {
              var value = index2 < valsLength ? values2[index2] : undefined2;
              assignFunc(result2, props[index2], value);
            }
            return result2;
          }
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
          }
          var castRest = baseRest;
          function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined2 ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
          }
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result2);
            return result2;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object, other, orders) {
            var index2 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index2 < length) {
              var result2 = compareAscending(objCriteria[index2], othCriteria[index2]);
              if (result2) {
                if (index2 >= ordersLength) {
                  return result2;
                }
                var order = orders[index2];
                return result2 * (order == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          function copyArray(source, array) {
            var index2 = -1, length = source.length;
            array || (array = Array2(length));
            while (++index2 < length) {
              array[index2] = source[index2];
            }
            return array;
          }
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index2 = -1, length = props.length;
            while (++index2 < length) {
              var key = props[index2];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object = Object2(object);
              while (++index2 < length) {
                var source = sources[index2];
                if (source) {
                  assigner(object, source, index2, customizer);
                }
              }
              return object;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index2 = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index2-- : ++index2 < length) {
                if (iteratee2(iterable[index2], index2, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index2 = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index2];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject(result2) ? result2 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index2 = length, placeholder = getHolder(wrapper);
              while (index2--) {
                args[index2] = arguments[index2];
              }
              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined2,
                  args,
                  holders,
                  undefined2,
                  undefined2,
                  arity - length
                );
              }
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply(fn, this, args);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys(collection);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index2 = findIndexFunc(collection, predicate, fromIndex);
              return index2 > -1 ? iterable[iteratee2 ? collection[index2] : index2] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index2 = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index2--) {
                var func = funcs[index2];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index2 = wrapper ? index2 : length;
              while (++index2 < length) {
                func = funcs[index2];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value();
                }
                var index3 = 0, result2 = length ? funcs[index3].apply(this, args) : value;
                while (++index3 < length) {
                  result2 = funcs[index3].call(this, result2);
                }
                return result2;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index2 = length;
              while (index2--) {
                args[index2] = arguments[index2];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary2,
                  arity - length
                );
              }
              var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root && this instanceof wrapper) {
                fn = Ctor || createCtor(fn);
              }
              return fn.apply(thisBinding, args);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args);
                });
              });
            });
          }
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start, end, step) {
              if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                end = step = undefined2;
              }
              start = toFinite(start);
              if (end === undefined2) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
              return baseRange(start, end, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop5 : function(values2) {
            return new Set2(values2);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value) {
            return isPlainObject(value) ? undefined2 : value;
          }
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index2 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index2 < arrLength) {
              var arrValue = array[index2], othValue = other[index2];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert2 = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert2 || (convert2 = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result2 = equalArrays(convert2(object), convert2(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index2 = objLength;
            while (index2--) {
              var key = objProps[index2];
              if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result2 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index2 < objLength) {
              key = objProps[index2];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result2;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop5 : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          function getHolder(func) {
            var object = hasOwnProperty2.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          function getMatchData(object) {
            var result2 = keys(object), length = result2.length;
            while (length--) {
              var key = result2[length], value = object[key];
              result2[length] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined2;
          }
          function getRawTag(value) {
            var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e2) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result2 = [];
            while (object) {
              arrayPush(result2, getSymbols(object));
              object = getPrototype(object);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
            getTag = function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            };
          }
          function getView(start, end, transforms) {
            var index2 = -1, length = transforms.length;
            while (++index2 < length) {
              var data = transforms[index2], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start += size2;
                  break;
                case "dropRight":
                  end -= size2;
                  break;
                case "take":
                  end = nativeMin(end, start + size2);
                  break;
                case "takeRight":
                  start = nativeMax(start, end - size2);
                  break;
              }
            }
            return { "start": start, "end": end };
          }
          function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
          }
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index2 = -1, length = path.length, result2 = false;
            while (++index2 < length) {
              var key = toKey(path[index2]);
              if (!(result2 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result2 || ++index2 != length) {
              return result2;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
          }
          function initCloneArray(array) {
            var length = array.length, result2 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          function isIterateeCall(value, index2, object) {
            if (!isObject(object)) {
              return false;
            }
            var type = typeof index2;
            if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
              return eq(object[index2], value);
            }
            return false;
          }
          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
          }
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          function memoizeCapped(func) {
            var result2 = memoize2(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });
            var cache = result2.cache;
            return result2;
          }
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          function nativeKeysIn(object) {
            var result2 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result2.push(key);
              }
            }
            return result2;
          }
          function objectToString(value) {
            return nativeObjectToString.call(value);
          }
          function overRest(func, start, transform3) {
            start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
            return function() {
              var args = arguments, index2 = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
              while (++index2 < length) {
                array[index2] = args[start + index2];
              }
              index2 = -1;
              var otherArgs = Array2(start + 1);
              while (++index2 < start) {
                otherArgs[index2] = args[index2];
              }
              otherArgs[start] = transform3(array);
              return apply(func, this, otherArgs);
            };
          }
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index2 = indexes[length];
              array[length] = isIndex(index2, arrLength) ? oldArray[index2] : undefined2;
            }
            return array;
          }
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array, size2) {
            var index2 = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index2 < size2) {
              var rand = baseRandom(index2, lastIndex), value = array[rand];
              array[rand] = array[index2];
              array[index2] = value;
            }
            array.length = size2;
            return array;
          }
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match, number, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e2) {
              }
              try {
                return func + "";
              } catch (e2) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index2 = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
            while (index2 < length) {
              result2[resIndex++] = baseSlice(array, index2, index2 += size2);
            }
            return result2;
          }
          function compact(array) {
            var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index2 < length) {
              var value = array[index2];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          function concat() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index2 = length;
            while (index2--) {
              args[index2 - 1] = arguments[index2];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          var difference = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values2) {
            var iteratee2 = last(values2);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values2) {
            var comparator = last(values2);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n2, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
            return baseSlice(array, n2 < 0 ? 0 : n2, length);
          }
          function dropRight(array, n2, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
            n2 = length - n2;
            return baseSlice(array, 0, n2 < 0 ? 0 : n2);
          }
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
              start = 0;
              end = length;
            }
            return baseFill(array, value, start, end);
          }
          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index2 < 0) {
              index2 = nativeMax(length + index2, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index2);
          }
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index2 = length - 1;
            if (fromIndex !== undefined2) {
              index2 = toInteger(fromIndex);
              index2 = fromIndex < 0 ? nativeMax(length + index2, 0) : nativeMin(index2, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index2, true);
          }
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          function fromPairs(pairs) {
            var index2 = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index2 < length) {
              var pair = pairs[index2];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index2 < 0) {
              index2 = nativeMax(length + index2, 0);
            }
            return baseIndexOf(array, value, index2);
          }
          function initial2(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index2 = length;
            if (fromIndex !== undefined2) {
              index2 = toInteger(fromIndex);
              index2 = index2 < 0 ? nativeMax(length + index2, 0) : nativeMin(index2, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index2) : baseFindIndex(array, baseIsNaN, index2, true);
          }
          function nth(array, n2) {
            return array && array.length ? baseNth(array, toInteger(n2)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array, values2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
          }
          function pullAllBy(array, values2, iteratee2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
          }
          function pullAllWith(array, values2, comparator) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
          }
          var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index2) {
              return isIndex(index2, length) ? +index2 : index2;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index2 = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index2 < length) {
              var value = array[index2];
              if (predicate(value, index2, array)) {
                result2.push(value);
                indexes.push(index2);
              }
            }
            basePullAt(array, indexes);
            return result2;
          }
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
              start = 0;
              end = length;
            } else {
              start = start == null ? 0 : toInteger(start);
              end = end === undefined2 ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
          }
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index2 = baseSortedIndex(array, value);
              if (index2 < length && eq(array[index2], value)) {
                return index2;
              }
            }
            return -1;
          }
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index2 = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index2], value)) {
                return index2;
              }
            }
            return -1;
          }
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          function take(array, n2, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
            return baseSlice(array, 0, n2 < 0 ? 0 : n2);
          }
          function takeRight(array, n2, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
            n2 = length - n2;
            return baseSlice(array, n2 < 0 ? 0 : n2, length);
          }
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index2) {
              return arrayMap(array, baseProperty(index2));
            });
          }
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values2) {
            return baseZipObject(props || [], values2 || [], assignValue);
          }
          function zipObjectDeep(props, values2) {
            return baseZipObject(props || [], values2 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          function thru(value, interceptor) {
            return interceptor(value);
          }
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
              return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
              return this.thru(interceptor);
            }
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone2 = wrapperClone(parent2);
              clone2.__index__ = 0;
              clone2.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone2;
              } else {
                result2 = clone2;
              }
              var previous = clone2;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty2.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          var find = createFind(findIndex);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          function forEach(collection, iteratee2) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection, iteratee2) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          var groupBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty2.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection, path, args) {
            var index2 = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result2[++index2] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map(collection, iteratee2) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          var partition = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce2(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject2(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          function sample2(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          function sampleSize(collection, n2, guard) {
            if (guard ? isIterateeCall(collection, n2, guard) : n2 === undefined2) {
              n2 = 1;
            } else {
              n2 = toInteger(n2);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n2);
          }
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now = ctxNow || function() {
            return root.Date.now();
          };
          function after(n2, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n2 = toInteger(n2);
            return function() {
              if (--n2 < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n2, guard) {
            n2 = guard ? undefined2 : n2;
            n2 = func && n2 == null ? func.length : n2;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n2);
          }
          function before(n2, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n2 = toInteger(n2);
            return function() {
              if (--n2 > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n2 <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          function debounce2(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time = now();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush() {
              return timerId === undefined2 ? result2 : trailingEdge(now());
            }
            function debounced() {
              var time = now(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize2(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache.set(key, result2) || cache;
              return result2;
            };
            memoized.cache = new (memoize2.Cache || MapCache)();
            return memoized;
          }
          memoize2.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index2 = -1, length = nativeMin(args.length, funcsLength);
              while (++index2 < length) {
                args[index2] = transforms[index2].call(this, args[index2]);
              }
              return apply(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start === undefined2 ? start : toInteger(start);
            return baseRest(func, start);
          }
          function spread(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
              var array = args[start], otherArgs = castSlice(args, 0, start);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce2(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
          }
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep2(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          var gt = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(/* @__PURE__ */ function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
          }
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
          }
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty2.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual(value, other) {
            return baseIsEqual(value, other);
          }
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          function isError(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
          }
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          function isFunction(value) {
            if (!isObject(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
          }
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          function isNaN2(value) {
            return isNumber(value) && value != +value;
          }
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          function isNull(value) {
            return value === null;
          }
          function isNil(value) {
            return value == null;
          }
          function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined(value) {
            return value === undefined2;
          }
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          var lt = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
          }
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          function toInteger(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = value.replace(reTrim, "");
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          function toString(value) {
            return value == null ? "" : baseToString(value);
          }
          var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty2.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          var at = flatRest(baseAt);
          function create(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          var defaults = baseRest(function(object, sources) {
            object = Object2(object);
            var index2 = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index2 < length) {
              var source = sources[index2];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args);
          });
          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          function functions2(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          function get2(object, path, defaultValue) {
            var result2 = object == null ? undefined2 : baseGet(object, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          var invert = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty2.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          function mapKeys(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, iteratee2(value, key, object2), value);
            });
            return result2;
          }
          function mapValues(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, key, iteratee2(value, key, object2));
            });
            return result2;
          }
          var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result2 = {};
            if (object == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result2, paths[length]);
            }
            return result2;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index2 = -1, length = path.length;
            if (!length) {
              length = 1;
              object = undefined2;
            }
            while (++index2 < length) {
              var value = object == null ? undefined2 : object[toKey(path[index2])];
              if (value === undefined2) {
                index2 = length;
                value = defaultValue;
              }
              object = isFunction(value) ? value.call(object) : value;
            }
            return object;
          }
          function set2(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          var toPairs = createToPairs(keys);
          var toPairsIn = createToPairs(keysIn);
          function transform2(object, iteratee2, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject(object)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index2, object2) {
              return iteratee2(accumulator, value, index2, object2);
            });
            return accumulator;
          }
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          function clamp4(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            number = toNumber(number);
            return baseInRange(number, start, end);
          }
          function random3(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase = createCompounder(function(result2, word, index2) {
            word = word.toLowerCase();
            return result2 + (index2 ? capitalize2(word) : word);
          });
          function capitalize2(string) {
            return upperFirst(toString(string).toLowerCase());
          }
          function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
          }
          function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          var kebabCase = createCompounder(function(result2, word, index2) {
            return result2 + (index2 ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index2) {
            return result2 + (index2 ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
              return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          function parseInt2(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
          }
          function repeat(string, n2, guard) {
            if (guard ? isIterateeCall(string, n2, guard) : n2 === undefined2) {
              n2 = 1;
            } else {
              n2 = toInteger(n2);
            }
            return baseRepeat(toString(string), n2);
          }
          function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          var snakeCase = createCompounder(function(result2, word, index2) {
            return result2 + (index2 ? "_" : "") + word.toLowerCase();
          });
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          var startCase = createCompounder(function(result2, word, index2) {
            return result2 + (index2 ? " " : "") + upperFirst(word);
          });
          function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
          }
          function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined2;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2(
              (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
              "g"
            );
            var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index2, offset).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index2 = offset + match.length;
              return match;
            });
            source += "';\n";
            var variable = hasOwnProperty2.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError(result2)) {
              throw result2;
            }
            return result2;
          }
          function toLower(value) {
            return toString(value).toLowerCase();
          }
          function toUpper(value) {
            return toString(value).toUpperCase();
          }
          function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrim, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join("");
          }
          function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimEnd, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join("");
          }
          function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join("");
          }
          function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length = "length" in options ? toInteger(options.length) : length;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string;
            }
            var end = length - stringSize(omission);
            if (end < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end += result2.length - end;
            }
            if (isRegExp(separator)) {
              if (string.slice(end).search(separator)) {
                var match, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match = separator.exec(substring)) {
                  var newEnd = match.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end) != end) {
              var index2 = result2.lastIndexOf(separator);
              if (index2 > -1) {
                result2 = result2.slice(0, index2);
              }
            }
            return result2 + omission;
          }
          function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          var upperCase = createCompounder(function(result2, word, index2) {
            return result2 + (index2 ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args) {
            try {
              return apply(func, undefined2, args);
            } catch (e2) {
              return isError(e2) ? e2 : new Error2(e2);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index2 = -1;
              while (++index2 < length) {
                var pair = pairs[index2];
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method2 = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }
            var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }
            return this;
          }
          function noop5() {
          }
          function nthArg(n2) {
            n2 = toInteger(n2);
            return baseRest(function(args) {
              return baseNth(args, n2);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n2, iteratee2) {
            n2 = toInteger(n2);
            if (n2 < 1 || n2 > MAX_SAFE_INTEGER) {
              return [];
            }
            var index2 = MAX_ARRAY_LENGTH, length = nativeMin(n2, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n2 -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length, iteratee2);
            while (++index2 < n2) {
              iteratee2(index2);
            }
            return result2;
          }
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
          }
          function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
          }
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array) {
            return baseMean(array, identity);
          }
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce2;
          lodash.defaults = defaults;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions2;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial2;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize2;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method2;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject2;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set2;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform2;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize2;
          lodash.ceil = ceil;
          lodash.clamp = clamp4;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep2;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get2;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate;
          lodash.isElement = isElement;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction;
          lodash.isInteger = isInteger;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop5;
          lodash.now = now;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt2;
          lodash.random = random3;
          lodash.reduce = reduce2;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round;
          lodash.runInContext = runInContext2;
          lodash.sample = sample2;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty2.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index2) {
            LazyWrapper.prototype[methodName] = function(n2) {
              n2 = n2 === undefined2 ? 1 : nativeMax(toInteger(n2), 0);
              var result2 = this.__filtered__ && !index2 ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n2, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n2, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n2) {
              return this.reverse()[methodName](n2).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index2) {
            var type = index2 + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index2) {
            var takeName = "take" + (index2 ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index2) {
            var dropName = "drop" + (index2 ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result2 = this;
            if (result2.__filtered__ && (start > 0 || end < 0)) {
              return new LazyWrapper(result2);
            }
            if (start < 0) {
              result2 = result2.takeRight(-start);
            } else if (start) {
              result2 = result2.drop(start);
            }
            if (end !== undefined2) {
              end = toInteger(end);
              result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
              var interceptor = function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result3[0] : result3;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty2.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _2 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _2;
          define(function() {
            return _2;
          });
        } else if (freeModule) {
          (freeModule.exports = _2)._ = _2;
          freeExports._ = _2;
        } else {
          root._ = _2;
        }
      }).call(exports);
    }
  });

  // node_modules/moment/moment.js
  var require_moment = __commonJS({
    "node_modules/moment/moment.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.moment = factory();
      })(exports, function() {
        "use strict";
        var hookCallback;
        function hooks() {
          return hookCallback.apply(null, arguments);
        }
        function setHookCallback(callback) {
          hookCallback = callback;
        }
        function isArray(input) {
          return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
        }
        function isObject(input) {
          return input != null && Object.prototype.toString.call(input) === "[object Object]";
        }
        function hasOwnProp(a2, b2) {
          return Object.prototype.hasOwnProperty.call(a2, b2);
        }
        function isObjectEmpty(obj) {
          if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
          } else {
            var k2;
            for (k2 in obj) {
              if (hasOwnProp(obj, k2)) {
                return false;
              }
            }
            return true;
          }
        }
        function isUndefined(input) {
          return input === void 0;
        }
        function isNumber(input) {
          return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
        }
        function isDate(input) {
          return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
        }
        function map(arr, fn) {
          var res = [], i2;
          for (i2 = 0; i2 < arr.length; ++i2) {
            res.push(fn(arr[i2], i2));
          }
          return res;
        }
        function extend(a2, b2) {
          for (var i2 in b2) {
            if (hasOwnProp(b2, i2)) {
              a2[i2] = b2[i2];
            }
          }
          if (hasOwnProp(b2, "toString")) {
            a2.toString = b2.toString;
          }
          if (hasOwnProp(b2, "valueOf")) {
            a2.valueOf = b2.valueOf;
          }
          return a2;
        }
        function createUTC(input, format2, locale2, strict) {
          return createLocalOrUTC(input, format2, locale2, strict, true).utc();
        }
        function defaultParsingFlags() {
          return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
          };
        }
        function getParsingFlags(m) {
          if (m._pf == null) {
            m._pf = defaultParsingFlags();
          }
          return m._pf;
        }
        var some;
        if (Array.prototype.some) {
          some = Array.prototype.some;
        } else {
          some = function(fun) {
            var t2 = Object(this), len = t2.length >>> 0, i2;
            for (i2 = 0; i2 < len; i2++) {
              if (i2 in t2 && fun.call(this, t2[i2], i2, t2)) {
                return true;
              }
            }
            return false;
          };
        }
        function isValid(m) {
          if (m._isValid == null) {
            var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i2) {
              return i2 != null;
            }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m._strict) {
              isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
            }
            if (Object.isFrozen == null || !Object.isFrozen(m)) {
              m._isValid = isNowValid;
            } else {
              return isNowValid;
            }
          }
          return m._isValid;
        }
        function createInvalid(flags) {
          var m = createUTC(NaN);
          if (flags != null) {
            extend(getParsingFlags(m), flags);
          } else {
            getParsingFlags(m).userInvalidated = true;
          }
          return m;
        }
        var momentProperties = hooks.momentProperties = [], updateInProgress = false;
        function copyConfig(to2, from2) {
          var i2, prop, val;
          if (!isUndefined(from2._isAMomentObject)) {
            to2._isAMomentObject = from2._isAMomentObject;
          }
          if (!isUndefined(from2._i)) {
            to2._i = from2._i;
          }
          if (!isUndefined(from2._f)) {
            to2._f = from2._f;
          }
          if (!isUndefined(from2._l)) {
            to2._l = from2._l;
          }
          if (!isUndefined(from2._strict)) {
            to2._strict = from2._strict;
          }
          if (!isUndefined(from2._tzm)) {
            to2._tzm = from2._tzm;
          }
          if (!isUndefined(from2._isUTC)) {
            to2._isUTC = from2._isUTC;
          }
          if (!isUndefined(from2._offset)) {
            to2._offset = from2._offset;
          }
          if (!isUndefined(from2._pf)) {
            to2._pf = getParsingFlags(from2);
          }
          if (!isUndefined(from2._locale)) {
            to2._locale = from2._locale;
          }
          if (momentProperties.length > 0) {
            for (i2 = 0; i2 < momentProperties.length; i2++) {
              prop = momentProperties[i2];
              val = from2[prop];
              if (!isUndefined(val)) {
                to2[prop] = val;
              }
            }
          }
          return to2;
        }
        function Moment(config2) {
          copyConfig(this, config2);
          this._d = new Date(config2._d != null ? config2._d.getTime() : NaN);
          if (!this.isValid()) {
            this._d = /* @__PURE__ */ new Date(NaN);
          }
          if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
          }
        }
        function isMoment(obj) {
          return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
        }
        function warn(msg) {
          if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
            console.warn("Deprecation warning: " + msg);
          }
        }
        function deprecate(msg, fn) {
          var firstTime = true;
          return extend(function() {
            if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
              var args = [], arg, i2, key;
              for (i2 = 0; i2 < arguments.length; i2++) {
                arg = "";
                if (typeof arguments[i2] === "object") {
                  arg += "\n[" + i2 + "] ";
                  for (key in arguments[0]) {
                    if (hasOwnProp(arguments[0], key)) {
                      arg += key + ": " + arguments[0][key] + ", ";
                    }
                  }
                  arg = arg.slice(0, -2);
                } else {
                  arg = arguments[i2];
                }
                args.push(arg);
              }
              warn(
                msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
              );
              firstTime = false;
            }
            return fn.apply(this, arguments);
          }, fn);
        }
        var deprecations = {};
        function deprecateSimple(name, msg) {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
          }
          if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
          }
        }
        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;
        function isFunction(input) {
          return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
        }
        function set2(config2) {
          var prop, i2;
          for (i2 in config2) {
            if (hasOwnProp(config2, i2)) {
              prop = config2[i2];
              if (isFunction(prop)) {
                this[i2] = prop;
              } else {
                this["_" + i2] = prop;
              }
            }
          }
          this._config = config2;
          this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
          );
        }
        function mergeConfigs(parentConfig, childConfig) {
          var res = extend({}, parentConfig), prop;
          for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
              if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
              } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
              } else {
                delete res[prop];
              }
            }
          }
          for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
              res[prop] = extend({}, res[prop]);
            }
          }
          return res;
        }
        function Locale(config2) {
          if (config2 != null) {
            this.set(config2);
          }
        }
        var keys;
        if (Object.keys) {
          keys = Object.keys;
        } else {
          keys = function(obj) {
            var i2, res = [];
            for (i2 in obj) {
              if (hasOwnProp(obj, i2)) {
                res.push(i2);
              }
            }
            return res;
          };
        }
        var defaultCalendar = {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        };
        function calendar(key, mom, now2) {
          var output = this._calendar[key] || this._calendar["sameElse"];
          return isFunction(output) ? output.call(mom, now2) : output;
        }
        function zeroFill(number, targetLength, forceSign) {
          var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
          return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
        }
        var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
        function addFormatToken(token2, padded, ordinal2, callback) {
          var func = callback;
          if (typeof callback === "string") {
            func = function() {
              return this[callback]();
            };
          }
          if (token2) {
            formatTokenFunctions[token2] = func;
          }
          if (padded) {
            formatTokenFunctions[padded[0]] = function() {
              return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
          }
          if (ordinal2) {
            formatTokenFunctions[ordinal2] = function() {
              return this.localeData().ordinal(
                func.apply(this, arguments),
                token2
              );
            };
          }
        }
        function removeFormattingTokens(input) {
          if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, "");
          }
          return input.replace(/\\/g, "");
        }
        function makeFormatFunction(format2) {
          var array = format2.match(formattingTokens), i2, length;
          for (i2 = 0, length = array.length; i2 < length; i2++) {
            if (formatTokenFunctions[array[i2]]) {
              array[i2] = formatTokenFunctions[array[i2]];
            } else {
              array[i2] = removeFormattingTokens(array[i2]);
            }
          }
          return function(mom) {
            var output = "", i3;
            for (i3 = 0; i3 < length; i3++) {
              output += isFunction(array[i3]) ? array[i3].call(mom, format2) : array[i3];
            }
            return output;
          };
        }
        function formatMoment(m, format2) {
          if (!m.isValid()) {
            return m.localeData().invalidDate();
          }
          format2 = expandFormat(format2, m.localeData());
          formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
          return formatFunctions[format2](m);
        }
        function expandFormat(format2, locale2) {
          var i2 = 5;
          function replaceLongDateFormatTokens(input) {
            return locale2.longDateFormat(input) || input;
          }
          localFormattingTokens.lastIndex = 0;
          while (i2 >= 0 && localFormattingTokens.test(format2)) {
            format2 = format2.replace(
              localFormattingTokens,
              replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i2 -= 1;
          }
          return format2;
        }
        var defaultLongDateFormat = {
          LTS: "h:mm:ss A",
          LT: "h:mm A",
          L: "MM/DD/YYYY",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY h:mm A",
          LLLL: "dddd, MMMM D, YYYY h:mm A"
        };
        function longDateFormat(key) {
          var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
          if (format2 || !formatUpper) {
            return format2;
          }
          this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
            if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
              return tok.slice(1);
            }
            return tok;
          }).join("");
          return this._longDateFormat[key];
        }
        var defaultInvalidDate = "Invalid date";
        function invalidDate() {
          return this._invalidDate;
        }
        var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
        function ordinal(number) {
          return this._ordinal.replace("%d", number);
        }
        var defaultRelativeTime = {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          ss: "%d seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          w: "a week",
          ww: "%d weeks",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        };
        function relativeTime(number, withoutSuffix, string, isFuture) {
          var output = this._relativeTime[string];
          return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
        }
        function pastFuture(diff2, output) {
          var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
          return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
        }
        var aliases = {};
        function addUnitAlias(unit, shorthand) {
          var lowerCase = unit.toLowerCase();
          aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
        }
        function normalizeUnits(units) {
          return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
        }
        function normalizeObjectUnits(inputObject) {
          var normalizedInput = {}, normalizedProp, prop;
          for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
              normalizedProp = normalizeUnits(prop);
              if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
              }
            }
          }
          return normalizedInput;
        }
        var priorities = {};
        function addUnitPriority(unit, priority) {
          priorities[unit] = priority;
        }
        function getPrioritizedUnits(unitsObj) {
          var units = [], u2;
          for (u2 in unitsObj) {
            if (hasOwnProp(unitsObj, u2)) {
              units.push({ unit: u2, priority: priorities[u2] });
            }
          }
          units.sort(function(a2, b2) {
            return a2.priority - b2.priority;
          });
          return units;
        }
        function isLeapYear(year) {
          return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }
        function absFloor(number) {
          if (number < 0) {
            return Math.ceil(number) || 0;
          } else {
            return Math.floor(number);
          }
        }
        function toInt2(argumentForCoercion) {
          var coercedNumber = +argumentForCoercion, value = 0;
          if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
          }
          return value;
        }
        function makeGetSet(unit, keepTime) {
          return function(value) {
            if (value != null) {
              set$1(this, unit, value);
              hooks.updateOffset(this, keepTime);
              return this;
            } else {
              return get2(this, unit);
            }
          };
        }
        function get2(mom, unit) {
          return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
        }
        function set$1(mom, unit, value) {
          if (mom.isValid() && !isNaN(value)) {
            if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
              value = toInt2(value);
              mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
                value,
                mom.month(),
                daysInMonth(value, mom.month())
              );
            } else {
              mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
            }
          }
        }
        function stringGet(units) {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units]();
          }
          return this;
        }
        function stringSet(units, value) {
          if (typeof units === "object") {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units), i2;
            for (i2 = 0; i2 < prioritized.length; i2++) {
              this[prioritized[i2].unit](units[prioritized[i2].unit]);
            }
          } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
              return this[units](value);
            }
          }
          return this;
        }
        var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
        regexes = {};
        function addRegexToken(token2, regex, strictRegex) {
          regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
            return isStrict && strictRegex ? strictRegex : regex;
          };
        }
        function getParseRegexForToken(token2, config2) {
          if (!hasOwnProp(regexes, token2)) {
            return new RegExp(unescapeFormat(token2));
          }
          return regexes[token2](config2._strict, config2._locale);
        }
        function unescapeFormat(s2) {
          return regexEscape(
            s2.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
            })
          );
        }
        function regexEscape(s2) {
          return s2.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
        }
        var tokens = {};
        function addParseToken(token2, callback) {
          var i2, func = callback;
          if (typeof token2 === "string") {
            token2 = [token2];
          }
          if (isNumber(callback)) {
            func = function(input, array) {
              array[callback] = toInt2(input);
            };
          }
          for (i2 = 0; i2 < token2.length; i2++) {
            tokens[token2[i2]] = func;
          }
        }
        function addWeekParseToken(token2, callback) {
          addParseToken(token2, function(input, array, config2, token3) {
            config2._w = config2._w || {};
            callback(input, config2._w, config2, token3);
          });
        }
        function addTimeToArrayFromToken(token2, input, config2) {
          if (input != null && hasOwnProp(tokens, token2)) {
            tokens[token2](input, config2._a, config2, token2);
          }
        }
        var YEAR2 = 0, MONTH2 = 1, DATE = 2, HOUR2 = 3, MINUTE2 = 4, SECOND2 = 5, MILLISECOND = 6, WEEK2 = 7, WEEKDAY = 8;
        function mod(n2, x2) {
          return (n2 % x2 + x2) % x2;
        }
        var indexOf;
        if (Array.prototype.indexOf) {
          indexOf = Array.prototype.indexOf;
        } else {
          indexOf = function(o2) {
            var i2;
            for (i2 = 0; i2 < this.length; ++i2) {
              if (this[i2] === o2) {
                return i2;
              }
            }
            return -1;
          };
        }
        function daysInMonth(year, month) {
          if (isNaN(year) || isNaN(month)) {
            return NaN;
          }
          var modMonth = mod(month, 12);
          year += (month - modMonth) / 12;
          return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
        }
        addFormatToken("M", ["MM", 2], "Mo", function() {
          return this.month() + 1;
        });
        addFormatToken("MMM", 0, 0, function(format2) {
          return this.localeData().monthsShort(this, format2);
        });
        addFormatToken("MMMM", 0, 0, function(format2) {
          return this.localeData().months(this, format2);
        });
        addUnitAlias("month", "M");
        addUnitPriority("month", 8);
        addRegexToken("M", match1to2);
        addRegexToken("MM", match1to2, match2);
        addRegexToken("MMM", function(isStrict, locale2) {
          return locale2.monthsShortRegex(isStrict);
        });
        addRegexToken("MMMM", function(isStrict, locale2) {
          return locale2.monthsRegex(isStrict);
        });
        addParseToken(["M", "MM"], function(input, array) {
          array[MONTH2] = toInt2(input) - 1;
        });
        addParseToken(["MMM", "MMMM"], function(input, array, config2, token2) {
          var month = config2._locale.monthsParse(input, token2, config2._strict);
          if (month != null) {
            array[MONTH2] = month;
          } else {
            getParsingFlags(config2).invalidMonth = input;
          }
        });
        var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
          "_"
        ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
          "_"
        ), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
        function localeMonths(m, format2) {
          if (!m) {
            return isArray(this._months) ? this._months : this._months["standalone"];
          }
          return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
        }
        function localeMonthsShort(m, format2) {
          if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
          }
          return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
        }
        function handleStrictParse(monthName, format2, strict) {
          var i2, ii, mom, llc = monthName.toLocaleLowerCase();
          if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i2 = 0; i2 < 12; ++i2) {
              mom = createUTC([2e3, i2]);
              this._shortMonthsParse[i2] = this.monthsShort(
                mom,
                ""
              ).toLocaleLowerCase();
              this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
            }
          }
          if (strict) {
            if (format2 === "MMM") {
              ii = indexOf.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
            }
          } else {
            if (format2 === "MMM") {
              ii = indexOf.call(this._shortMonthsParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf.call(this._longMonthsParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
            }
          }
        }
        function localeMonthsParse(monthName, format2, strict) {
          var i2, mom, regex;
          if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format2, strict);
          }
          if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
          }
          for (i2 = 0; i2 < 12; i2++) {
            mom = createUTC([2e3, i2]);
            if (strict && !this._longMonthsParse[i2]) {
              this._longMonthsParse[i2] = new RegExp(
                "^" + this.months(mom, "").replace(".", "") + "$",
                "i"
              );
              this._shortMonthsParse[i2] = new RegExp(
                "^" + this.monthsShort(mom, "").replace(".", "") + "$",
                "i"
              );
            }
            if (!strict && !this._monthsParse[i2]) {
              regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
              this._monthsParse[i2] = new RegExp(regex.replace(".", ""), "i");
            }
            if (strict && format2 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
              return i2;
            } else if (strict && format2 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
              return i2;
            } else if (!strict && this._monthsParse[i2].test(monthName)) {
              return i2;
            }
          }
        }
        function setMonth(mom, value) {
          var dayOfMonth;
          if (!mom.isValid()) {
            return mom;
          }
          if (typeof value === "string") {
            if (/^\d+$/.test(value)) {
              value = toInt2(value);
            } else {
              value = mom.localeData().monthsParse(value);
              if (!isNumber(value)) {
                return mom;
              }
            }
          }
          dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
          mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
          return mom;
        }
        function getSetMonth(value) {
          if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
          } else {
            return get2(this, "Month");
          }
        }
        function getDaysInMonth() {
          return daysInMonth(this.year(), this.month());
        }
        function monthsShortRegex(isStrict) {
          if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) {
              computeMonthsParse.call(this);
            }
            if (isStrict) {
              return this._monthsShortStrictRegex;
            } else {
              return this._monthsShortRegex;
            }
          } else {
            if (!hasOwnProp(this, "_monthsShortRegex")) {
              this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
          }
        }
        function monthsRegex(isStrict) {
          if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) {
              computeMonthsParse.call(this);
            }
            if (isStrict) {
              return this._monthsStrictRegex;
            } else {
              return this._monthsRegex;
            }
          } else {
            if (!hasOwnProp(this, "_monthsRegex")) {
              this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
          }
        }
        function computeMonthsParse() {
          function cmpLenRev(a2, b2) {
            return b2.length - a2.length;
          }
          var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom;
          for (i2 = 0; i2 < 12; i2++) {
            mom = createUTC([2e3, i2]);
            shortPieces.push(this.monthsShort(mom, ""));
            longPieces.push(this.months(mom, ""));
            mixedPieces.push(this.months(mom, ""));
            mixedPieces.push(this.monthsShort(mom, ""));
          }
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          for (i2 = 0; i2 < 12; i2++) {
            shortPieces[i2] = regexEscape(shortPieces[i2]);
            longPieces[i2] = regexEscape(longPieces[i2]);
          }
          for (i2 = 0; i2 < 24; i2++) {
            mixedPieces[i2] = regexEscape(mixedPieces[i2]);
          }
          this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
          this._monthsShortRegex = this._monthsRegex;
          this._monthsStrictRegex = new RegExp(
            "^(" + longPieces.join("|") + ")",
            "i"
          );
          this._monthsShortStrictRegex = new RegExp(
            "^(" + shortPieces.join("|") + ")",
            "i"
          );
        }
        addFormatToken("Y", 0, 0, function() {
          var y2 = this.year();
          return y2 <= 9999 ? zeroFill(y2, 4) : "+" + y2;
        });
        addFormatToken(0, ["YY", 2], 0, function() {
          return this.year() % 100;
        });
        addFormatToken(0, ["YYYY", 4], 0, "year");
        addFormatToken(0, ["YYYYY", 5], 0, "year");
        addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
        addUnitAlias("year", "y");
        addUnitPriority("year", 1);
        addRegexToken("Y", matchSigned);
        addRegexToken("YY", match1to2, match2);
        addRegexToken("YYYY", match1to4, match4);
        addRegexToken("YYYYY", match1to6, match6);
        addRegexToken("YYYYYY", match1to6, match6);
        addParseToken(["YYYYY", "YYYYYY"], YEAR2);
        addParseToken("YYYY", function(input, array) {
          array[YEAR2] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt2(input);
        });
        addParseToken("YY", function(input, array) {
          array[YEAR2] = hooks.parseTwoDigitYear(input);
        });
        addParseToken("Y", function(input, array) {
          array[YEAR2] = parseInt(input, 10);
        });
        function daysInYear(year) {
          return isLeapYear(year) ? 366 : 365;
        }
        hooks.parseTwoDigitYear = function(input) {
          return toInt2(input) + (toInt2(input) > 68 ? 1900 : 2e3);
        };
        var getSetYear = makeGetSet("FullYear", true);
        function getIsLeapYear() {
          return isLeapYear(this.year());
        }
        function createDate(y2, m, d2, h2, M2, s2, ms) {
          var date;
          if (y2 < 100 && y2 >= 0) {
            date = new Date(y2 + 400, m, d2, h2, M2, s2, ms);
            if (isFinite(date.getFullYear())) {
              date.setFullYear(y2);
            }
          } else {
            date = new Date(y2, m, d2, h2, M2, s2, ms);
          }
          return date;
        }
        function createUTCDate(y2) {
          var date, args;
          if (y2 < 100 && y2 >= 0) {
            args = Array.prototype.slice.call(arguments);
            args[0] = y2 + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
              date.setUTCFullYear(y2);
            }
          } else {
            date = new Date(Date.UTC.apply(null, arguments));
          }
          return date;
        }
        function firstWeekOffset(year, dow, doy) {
          var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
          return -fwdlw + fwd - 1;
        }
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
          var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
          if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
          } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
          } else {
            resYear = year;
            resDayOfYear = dayOfYear;
          }
          return {
            year: resYear,
            dayOfYear: resDayOfYear
          };
        }
        function weekOfYear(mom, dow, doy) {
          var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
          if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
          } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
          } else {
            resYear = mom.year();
            resWeek = week;
          }
          return {
            week: resWeek,
            year: resYear
          };
        }
        function weeksInYear(year, dow, doy) {
          var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
          return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }
        addFormatToken("w", ["ww", 2], "wo", "week");
        addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
        addUnitAlias("week", "w");
        addUnitAlias("isoWeek", "W");
        addUnitPriority("week", 5);
        addUnitPriority("isoWeek", 5);
        addRegexToken("w", match1to2);
        addRegexToken("ww", match1to2, match2);
        addRegexToken("W", match1to2);
        addRegexToken("WW", match1to2, match2);
        addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config2, token2) {
          week[token2.substr(0, 1)] = toInt2(input);
        });
        function localeWeek(mom) {
          return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }
        var defaultLocaleWeek = {
          dow: 0,
          // Sunday is the first day of the week.
          doy: 6
          // The week that contains Jan 6th is the first week of the year.
        };
        function localeFirstDayOfWeek() {
          return this._week.dow;
        }
        function localeFirstDayOfYear() {
          return this._week.doy;
        }
        function getSetWeek(input) {
          var week = this.localeData().week(this);
          return input == null ? week : this.add((input - week) * 7, "d");
        }
        function getSetISOWeek(input) {
          var week = weekOfYear(this, 1, 4).week;
          return input == null ? week : this.add((input - week) * 7, "d");
        }
        addFormatToken("d", 0, "do", "day");
        addFormatToken("dd", 0, 0, function(format2) {
          return this.localeData().weekdaysMin(this, format2);
        });
        addFormatToken("ddd", 0, 0, function(format2) {
          return this.localeData().weekdaysShort(this, format2);
        });
        addFormatToken("dddd", 0, 0, function(format2) {
          return this.localeData().weekdays(this, format2);
        });
        addFormatToken("e", 0, 0, "weekday");
        addFormatToken("E", 0, 0, "isoWeekday");
        addUnitAlias("day", "d");
        addUnitAlias("weekday", "e");
        addUnitAlias("isoWeekday", "E");
        addUnitPriority("day", 11);
        addUnitPriority("weekday", 11);
        addUnitPriority("isoWeekday", 11);
        addRegexToken("d", match1to2);
        addRegexToken("e", match1to2);
        addRegexToken("E", match1to2);
        addRegexToken("dd", function(isStrict, locale2) {
          return locale2.weekdaysMinRegex(isStrict);
        });
        addRegexToken("ddd", function(isStrict, locale2) {
          return locale2.weekdaysShortRegex(isStrict);
        });
        addRegexToken("dddd", function(isStrict, locale2) {
          return locale2.weekdaysRegex(isStrict);
        });
        addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config2, token2) {
          var weekday = config2._locale.weekdaysParse(input, token2, config2._strict);
          if (weekday != null) {
            week.d = weekday;
          } else {
            getParsingFlags(config2).invalidWeekday = input;
          }
        });
        addWeekParseToken(["d", "e", "E"], function(input, week, config2, token2) {
          week[token2] = toInt2(input);
        });
        function parseWeekday(input, locale2) {
          if (typeof input !== "string") {
            return input;
          }
          if (!isNaN(input)) {
            return parseInt(input, 10);
          }
          input = locale2.weekdaysParse(input);
          if (typeof input === "number") {
            return input;
          }
          return null;
        }
        function parseIsoWeekday(input, locale2) {
          if (typeof input === "string") {
            return locale2.weekdaysParse(input) % 7 || 7;
          }
          return isNaN(input) ? null : input;
        }
        function shiftWeekdays(ws, n2) {
          return ws.slice(n2, 7).concat(ws.slice(0, n2));
        }
        var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
          "_"
        ), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
        function localeWeekdays(m, format2) {
          var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
          return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
        }
        function localeWeekdaysShort(m) {
          return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
        }
        function localeWeekdaysMin(m) {
          return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
        }
        function handleStrictParse$1(weekdayName, format2, strict) {
          var i2, ii, mom, llc = weekdayName.toLocaleLowerCase();
          if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for (i2 = 0; i2 < 7; ++i2) {
              mom = createUTC([2e3, 1]).day(i2);
              this._minWeekdaysParse[i2] = this.weekdaysMin(
                mom,
                ""
              ).toLocaleLowerCase();
              this._shortWeekdaysParse[i2] = this.weekdaysShort(
                mom,
                ""
              ).toLocaleLowerCase();
              this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
            }
          }
          if (strict) {
            if (format2 === "dddd") {
              ii = indexOf.call(this._weekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else if (format2 === "ddd") {
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            }
          } else {
            if (format2 === "dddd") {
              ii = indexOf.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else if (format2 === "ddd") {
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf.call(this._minWeekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            }
          }
        }
        function localeWeekdaysParse(weekdayName, format2, strict) {
          var i2, mom, regex;
          if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format2, strict);
          }
          if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
          }
          for (i2 = 0; i2 < 7; i2++) {
            mom = createUTC([2e3, 1]).day(i2);
            if (strict && !this._fullWeekdaysParse[i2]) {
              this._fullWeekdaysParse[i2] = new RegExp(
                "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
                "i"
              );
              this._shortWeekdaysParse[i2] = new RegExp(
                "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
                "i"
              );
              this._minWeekdaysParse[i2] = new RegExp(
                "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
                "i"
              );
            }
            if (!this._weekdaysParse[i2]) {
              regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
              this._weekdaysParse[i2] = new RegExp(regex.replace(".", ""), "i");
            }
            if (strict && format2 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
              return i2;
            } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
              return i2;
            } else if (strict && format2 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
              return i2;
            } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
              return i2;
            }
          }
        }
        function getSetDayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
          if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, "d");
          } else {
            return day;
          }
        }
        function getSetLocaleDayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
          return input == null ? weekday : this.add(input - weekday, "d");
        }
        function getSetISODayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
          } else {
            return this.day() || 7;
          }
        }
        function weekdaysRegex(isStrict) {
          if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              computeWeekdaysParse.call(this);
            }
            if (isStrict) {
              return this._weekdaysStrictRegex;
            } else {
              return this._weekdaysRegex;
            }
          } else {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
          }
        }
        function weekdaysShortRegex(isStrict) {
          if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              computeWeekdaysParse.call(this);
            }
            if (isStrict) {
              return this._weekdaysShortStrictRegex;
            } else {
              return this._weekdaysShortRegex;
            }
          } else {
            if (!hasOwnProp(this, "_weekdaysShortRegex")) {
              this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
          }
        }
        function weekdaysMinRegex(isStrict) {
          if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              computeWeekdaysParse.call(this);
            }
            if (isStrict) {
              return this._weekdaysMinStrictRegex;
            } else {
              return this._weekdaysMinRegex;
            }
          } else {
            if (!hasOwnProp(this, "_weekdaysMinRegex")) {
              this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
          }
        }
        function computeWeekdaysParse() {
          function cmpLenRev(a2, b2) {
            return b2.length - a2.length;
          }
          var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
          for (i2 = 0; i2 < 7; i2++) {
            mom = createUTC([2e3, 1]).day(i2);
            minp = regexEscape(this.weekdaysMin(mom, ""));
            shortp = regexEscape(this.weekdaysShort(mom, ""));
            longp = regexEscape(this.weekdays(mom, ""));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
          }
          minPieces.sort(cmpLenRev);
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
          this._weekdaysShortRegex = this._weekdaysRegex;
          this._weekdaysMinRegex = this._weekdaysRegex;
          this._weekdaysStrictRegex = new RegExp(
            "^(" + longPieces.join("|") + ")",
            "i"
          );
          this._weekdaysShortStrictRegex = new RegExp(
            "^(" + shortPieces.join("|") + ")",
            "i"
          );
          this._weekdaysMinStrictRegex = new RegExp(
            "^(" + minPieces.join("|") + ")",
            "i"
          );
        }
        function hFormat() {
          return this.hours() % 12 || 12;
        }
        function kFormat() {
          return this.hours() || 24;
        }
        addFormatToken("H", ["HH", 2], 0, "hour");
        addFormatToken("h", ["hh", 2], 0, hFormat);
        addFormatToken("k", ["kk", 2], 0, kFormat);
        addFormatToken("hmm", 0, 0, function() {
          return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });
        addFormatToken("hmmss", 0, 0, function() {
          return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });
        addFormatToken("Hmm", 0, 0, function() {
          return "" + this.hours() + zeroFill(this.minutes(), 2);
        });
        addFormatToken("Hmmss", 0, 0, function() {
          return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });
        function meridiem(token2, lowercase) {
          addFormatToken(token2, 0, 0, function() {
            return this.localeData().meridiem(
              this.hours(),
              this.minutes(),
              lowercase
            );
          });
        }
        meridiem("a", true);
        meridiem("A", false);
        addUnitAlias("hour", "h");
        addUnitPriority("hour", 13);
        function matchMeridiem(isStrict, locale2) {
          return locale2._meridiemParse;
        }
        addRegexToken("a", matchMeridiem);
        addRegexToken("A", matchMeridiem);
        addRegexToken("H", match1to2);
        addRegexToken("h", match1to2);
        addRegexToken("k", match1to2);
        addRegexToken("HH", match1to2, match2);
        addRegexToken("hh", match1to2, match2);
        addRegexToken("kk", match1to2, match2);
        addRegexToken("hmm", match3to4);
        addRegexToken("hmmss", match5to6);
        addRegexToken("Hmm", match3to4);
        addRegexToken("Hmmss", match5to6);
        addParseToken(["H", "HH"], HOUR2);
        addParseToken(["k", "kk"], function(input, array, config2) {
          var kInput = toInt2(input);
          array[HOUR2] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(["a", "A"], function(input, array, config2) {
          config2._isPm = config2._locale.isPM(input);
          config2._meridiem = input;
        });
        addParseToken(["h", "hh"], function(input, array, config2) {
          array[HOUR2] = toInt2(input);
          getParsingFlags(config2).bigHour = true;
        });
        addParseToken("hmm", function(input, array, config2) {
          var pos = input.length - 2;
          array[HOUR2] = toInt2(input.substr(0, pos));
          array[MINUTE2] = toInt2(input.substr(pos));
          getParsingFlags(config2).bigHour = true;
        });
        addParseToken("hmmss", function(input, array, config2) {
          var pos1 = input.length - 4, pos2 = input.length - 2;
          array[HOUR2] = toInt2(input.substr(0, pos1));
          array[MINUTE2] = toInt2(input.substr(pos1, 2));
          array[SECOND2] = toInt2(input.substr(pos2));
          getParsingFlags(config2).bigHour = true;
        });
        addParseToken("Hmm", function(input, array, config2) {
          var pos = input.length - 2;
          array[HOUR2] = toInt2(input.substr(0, pos));
          array[MINUTE2] = toInt2(input.substr(pos));
        });
        addParseToken("Hmmss", function(input, array, config2) {
          var pos1 = input.length - 4, pos2 = input.length - 2;
          array[HOUR2] = toInt2(input.substr(0, pos1));
          array[MINUTE2] = toInt2(input.substr(pos1, 2));
          array[SECOND2] = toInt2(input.substr(pos2));
        });
        function localeIsPM(input) {
          return (input + "").toLowerCase().charAt(0) === "p";
        }
        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
        function localeMeridiem(hours2, minutes2, isLower) {
          if (hours2 > 11) {
            return isLower ? "pm" : "PM";
          } else {
            return isLower ? "am" : "AM";
          }
        }
        var baseConfig = {
          calendar: defaultCalendar,
          longDateFormat: defaultLongDateFormat,
          invalidDate: defaultInvalidDate,
          ordinal: defaultOrdinal,
          dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
          relativeTime: defaultRelativeTime,
          months: defaultLocaleMonths,
          monthsShort: defaultLocaleMonthsShort,
          week: defaultLocaleWeek,
          weekdays: defaultLocaleWeekdays,
          weekdaysMin: defaultLocaleWeekdaysMin,
          weekdaysShort: defaultLocaleWeekdaysShort,
          meridiemParse: defaultLocaleMeridiemParse
        };
        var locales = {}, localeFamilies = {}, globalLocale;
        function commonPrefix(arr1, arr2) {
          var i2, minl = Math.min(arr1.length, arr2.length);
          for (i2 = 0; i2 < minl; i2 += 1) {
            if (arr1[i2] !== arr2[i2]) {
              return i2;
            }
          }
          return minl;
        }
        function normalizeLocale(key) {
          return key ? key.toLowerCase().replace("_", "-") : key;
        }
        function chooseLocale(names) {
          var i2 = 0, j2, next, locale2, split;
          while (i2 < names.length) {
            split = normalizeLocale(names[i2]).split("-");
            j2 = split.length;
            next = normalizeLocale(names[i2 + 1]);
            next = next ? next.split("-") : null;
            while (j2 > 0) {
              locale2 = loadLocale(split.slice(0, j2).join("-"));
              if (locale2) {
                return locale2;
              }
              if (next && next.length >= j2 && commonPrefix(split, next) >= j2 - 1) {
                break;
              }
              j2--;
            }
            i2++;
          }
          return globalLocale;
        }
        function loadLocale(name) {
          var oldLocale = null, aliasedRequire;
          if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports) {
            try {
              oldLocale = globalLocale._abbr;
              aliasedRequire = __require;
              aliasedRequire("./locale/" + name);
              getSetGlobalLocale(oldLocale);
            } catch (e2) {
              locales[name] = null;
            }
          }
          return locales[name];
        }
        function getSetGlobalLocale(key, values) {
          var data;
          if (key) {
            if (isUndefined(values)) {
              data = getLocale(key);
            } else {
              data = defineLocale(key, values);
            }
            if (data) {
              globalLocale = data;
            } else {
              if (typeof console !== "undefined" && console.warn) {
                console.warn(
                  "Locale " + key + " not found. Did you forget to load it?"
                );
              }
            }
          }
          return globalLocale._abbr;
        }
        function defineLocale(name, config2) {
          if (config2 !== null) {
            var locale2, parentConfig = baseConfig;
            config2.abbr = name;
            if (locales[name] != null) {
              deprecateSimple(
                "defineLocaleOverride",
                "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
              );
              parentConfig = locales[name]._config;
            } else if (config2.parentLocale != null) {
              if (locales[config2.parentLocale] != null) {
                parentConfig = locales[config2.parentLocale]._config;
              } else {
                locale2 = loadLocale(config2.parentLocale);
                if (locale2 != null) {
                  parentConfig = locale2._config;
                } else {
                  if (!localeFamilies[config2.parentLocale]) {
                    localeFamilies[config2.parentLocale] = [];
                  }
                  localeFamilies[config2.parentLocale].push({
                    name,
                    config: config2
                  });
                  return null;
                }
              }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config2));
            if (localeFamilies[name]) {
              localeFamilies[name].forEach(function(x2) {
                defineLocale(x2.name, x2.config);
              });
            }
            getSetGlobalLocale(name);
            return locales[name];
          } else {
            delete locales[name];
            return null;
          }
        }
        function updateLocale(name, config2) {
          if (config2 != null) {
            var locale2, tmpLocale, parentConfig = baseConfig;
            if (locales[name] != null && locales[name].parentLocale != null) {
              locales[name].set(mergeConfigs(locales[name]._config, config2));
            } else {
              tmpLocale = loadLocale(name);
              if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
              }
              config2 = mergeConfigs(parentConfig, config2);
              if (tmpLocale == null) {
                config2.abbr = name;
              }
              locale2 = new Locale(config2);
              locale2.parentLocale = locales[name];
              locales[name] = locale2;
            }
            getSetGlobalLocale(name);
          } else {
            if (locales[name] != null) {
              if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
                if (name === getSetGlobalLocale()) {
                  getSetGlobalLocale(name);
                }
              } else if (locales[name] != null) {
                delete locales[name];
              }
            }
          }
          return locales[name];
        }
        function getLocale(key) {
          var locale2;
          if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
          }
          if (!key) {
            return globalLocale;
          }
          if (!isArray(key)) {
            locale2 = loadLocale(key);
            if (locale2) {
              return locale2;
            }
            key = [key];
          }
          return chooseLocale(key);
        }
        function listLocales() {
          return keys(locales);
        }
        function checkOverflow(m) {
          var overflow, a2 = m._a;
          if (a2 && getParsingFlags(m).overflow === -2) {
            overflow = a2[MONTH2] < 0 || a2[MONTH2] > 11 ? MONTH2 : a2[DATE] < 1 || a2[DATE] > daysInMonth(a2[YEAR2], a2[MONTH2]) ? DATE : a2[HOUR2] < 0 || a2[HOUR2] > 24 || a2[HOUR2] === 24 && (a2[MINUTE2] !== 0 || a2[SECOND2] !== 0 || a2[MILLISECOND] !== 0) ? HOUR2 : a2[MINUTE2] < 0 || a2[MINUTE2] > 59 ? MINUTE2 : a2[SECOND2] < 0 || a2[SECOND2] > 59 ? SECOND2 : a2[MILLISECOND] < 0 || a2[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR2 || overflow > DATE)) {
              overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
              overflow = WEEK2;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
              overflow = WEEKDAY;
            }
            getParsingFlags(m).overflow = overflow;
          }
          return m;
        }
        var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
          ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
          ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
          ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
          ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
          ["YYYY-DDD", /\d{4}-\d{3}/],
          ["YYYY-MM", /\d{4}-\d\d/, false],
          ["YYYYYYMMDD", /[+-]\d{10}/],
          ["YYYYMMDD", /\d{8}/],
          ["GGGG[W]WWE", /\d{4}W\d{3}/],
          ["GGGG[W]WW", /\d{4}W\d{2}/, false],
          ["YYYYDDD", /\d{7}/],
          ["YYYYMM", /\d{6}/, false],
          ["YYYY", /\d{4}/, false]
        ], isoTimes = [
          ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
          ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
          ["HH:mm:ss", /\d\d:\d\d:\d\d/],
          ["HH:mm", /\d\d:\d\d/],
          ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
          ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
          ["HHmmss", /\d\d\d\d\d\d/],
          ["HHmm", /\d\d\d\d/],
          ["HH", /\d\d/]
        ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
          UT: 0,
          GMT: 0,
          EDT: -4 * 60,
          EST: -5 * 60,
          CDT: -5 * 60,
          CST: -6 * 60,
          MDT: -6 * 60,
          MST: -7 * 60,
          PDT: -7 * 60,
          PST: -8 * 60
        };
        function configFromISO(config2) {
          var i2, l2, string = config2._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
          if (match) {
            getParsingFlags(config2).iso = true;
            for (i2 = 0, l2 = isoDates.length; i2 < l2; i2++) {
              if (isoDates[i2][1].exec(match[1])) {
                dateFormat = isoDates[i2][0];
                allowTime = isoDates[i2][2] !== false;
                break;
              }
            }
            if (dateFormat == null) {
              config2._isValid = false;
              return;
            }
            if (match[3]) {
              for (i2 = 0, l2 = isoTimes.length; i2 < l2; i2++) {
                if (isoTimes[i2][1].exec(match[3])) {
                  timeFormat = (match[2] || " ") + isoTimes[i2][0];
                  break;
                }
              }
              if (timeFormat == null) {
                config2._isValid = false;
                return;
              }
            }
            if (!allowTime && timeFormat != null) {
              config2._isValid = false;
              return;
            }
            if (match[4]) {
              if (tzRegex.exec(match[4])) {
                tzFormat = "Z";
              } else {
                config2._isValid = false;
                return;
              }
            }
            config2._f = dateFormat + (timeFormat || "") + (tzFormat || "");
            configFromStringAndFormat(config2);
          } else {
            config2._isValid = false;
          }
        }
        function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
          var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
          ];
          if (secondStr) {
            result.push(parseInt(secondStr, 10));
          }
          return result;
        }
        function untruncateYear(yearStr) {
          var year = parseInt(yearStr, 10);
          if (year <= 49) {
            return 2e3 + year;
          } else if (year <= 999) {
            return 1900 + year;
          }
          return year;
        }
        function preprocessRFC2822(s2) {
          return s2.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
        }
        function checkWeekday(weekdayStr, parsedInput, config2) {
          if (weekdayStr) {
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
              parsedInput[0],
              parsedInput[1],
              parsedInput[2]
            ).getDay();
            if (weekdayProvided !== weekdayActual) {
              getParsingFlags(config2).weekdayMismatch = true;
              config2._isValid = false;
              return false;
            }
          }
          return true;
        }
        function calculateOffset3(obsOffset, militaryOffset, numOffset) {
          if (obsOffset) {
            return obsOffsets[obsOffset];
          } else if (militaryOffset) {
            return 0;
          } else {
            var hm = parseInt(numOffset, 10), m = hm % 100, h2 = (hm - m) / 100;
            return h2 * 60 + m;
          }
        }
        function configFromRFC2822(config2) {
          var match = rfc2822.exec(preprocessRFC2822(config2._i)), parsedArray;
          if (match) {
            parsedArray = extractFromRFC2822Strings(
              match[4],
              match[3],
              match[2],
              match[5],
              match[6],
              match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config2)) {
              return;
            }
            config2._a = parsedArray;
            config2._tzm = calculateOffset3(match[8], match[9], match[10]);
            config2._d = createUTCDate.apply(null, config2._a);
            config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
            getParsingFlags(config2).rfc2822 = true;
          } else {
            config2._isValid = false;
          }
        }
        function configFromString(config2) {
          var matched = aspNetJsonRegex.exec(config2._i);
          if (matched !== null) {
            config2._d = /* @__PURE__ */ new Date(+matched[1]);
            return;
          }
          configFromISO(config2);
          if (config2._isValid === false) {
            delete config2._isValid;
          } else {
            return;
          }
          configFromRFC2822(config2);
          if (config2._isValid === false) {
            delete config2._isValid;
          } else {
            return;
          }
          if (config2._strict) {
            config2._isValid = false;
          } else {
            hooks.createFromInputFallback(config2);
          }
        }
        hooks.createFromInputFallback = deprecate(
          "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
          function(config2) {
            config2._d = /* @__PURE__ */ new Date(config2._i + (config2._useUTC ? " UTC" : ""));
          }
        );
        function defaults(a2, b2, c2) {
          if (a2 != null) {
            return a2;
          }
          if (b2 != null) {
            return b2;
          }
          return c2;
        }
        function currentDateArray(config2) {
          var nowValue = new Date(hooks.now());
          if (config2._useUTC) {
            return [
              nowValue.getUTCFullYear(),
              nowValue.getUTCMonth(),
              nowValue.getUTCDate()
            ];
          }
          return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }
        function configFromArray(config2) {
          var i2, date, input = [], currentDate, expectedWeekday, yearToUse;
          if (config2._d) {
            return;
          }
          currentDate = currentDateArray(config2);
          if (config2._w && config2._a[DATE] == null && config2._a[MONTH2] == null) {
            dayOfYearFromWeekInfo(config2);
          }
          if (config2._dayOfYear != null) {
            yearToUse = defaults(config2._a[YEAR2], currentDate[YEAR2]);
            if (config2._dayOfYear > daysInYear(yearToUse) || config2._dayOfYear === 0) {
              getParsingFlags(config2)._overflowDayOfYear = true;
            }
            date = createUTCDate(yearToUse, 0, config2._dayOfYear);
            config2._a[MONTH2] = date.getUTCMonth();
            config2._a[DATE] = date.getUTCDate();
          }
          for (i2 = 0; i2 < 3 && config2._a[i2] == null; ++i2) {
            config2._a[i2] = input[i2] = currentDate[i2];
          }
          for (; i2 < 7; i2++) {
            config2._a[i2] = input[i2] = config2._a[i2] == null ? i2 === 2 ? 1 : 0 : config2._a[i2];
          }
          if (config2._a[HOUR2] === 24 && config2._a[MINUTE2] === 0 && config2._a[SECOND2] === 0 && config2._a[MILLISECOND] === 0) {
            config2._nextDay = true;
            config2._a[HOUR2] = 0;
          }
          config2._d = (config2._useUTC ? createUTCDate : createDate).apply(
            null,
            input
          );
          expectedWeekday = config2._useUTC ? config2._d.getUTCDay() : config2._d.getDay();
          if (config2._tzm != null) {
            config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
          }
          if (config2._nextDay) {
            config2._a[HOUR2] = 24;
          }
          if (config2._w && typeof config2._w.d !== "undefined" && config2._w.d !== expectedWeekday) {
            getParsingFlags(config2).weekdayMismatch = true;
          }
        }
        function dayOfYearFromWeekInfo(config2) {
          var w3, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
          w3 = config2._w;
          if (w3.GG != null || w3.W != null || w3.E != null) {
            dow = 1;
            doy = 4;
            weekYear = defaults(
              w3.GG,
              config2._a[YEAR2],
              weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w3.W, 1);
            weekday = defaults(w3.E, 1);
            if (weekday < 1 || weekday > 7) {
              weekdayOverflow = true;
            }
          } else {
            dow = config2._locale._week.dow;
            doy = config2._locale._week.doy;
            curWeek = weekOfYear(createLocal(), dow, doy);
            weekYear = defaults(w3.gg, config2._a[YEAR2], curWeek.year);
            week = defaults(w3.w, curWeek.week);
            if (w3.d != null) {
              weekday = w3.d;
              if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
              }
            } else if (w3.e != null) {
              weekday = w3.e + dow;
              if (w3.e < 0 || w3.e > 6) {
                weekdayOverflow = true;
              }
            } else {
              weekday = dow;
            }
          }
          if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config2)._overflowWeeks = true;
          } else if (weekdayOverflow != null) {
            getParsingFlags(config2)._overflowWeekday = true;
          } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config2._a[YEAR2] = temp.year;
            config2._dayOfYear = temp.dayOfYear;
          }
        }
        hooks.ISO_8601 = function() {
        };
        hooks.RFC_2822 = function() {
        };
        function configFromStringAndFormat(config2) {
          if (config2._f === hooks.ISO_8601) {
            configFromISO(config2);
            return;
          }
          if (config2._f === hooks.RFC_2822) {
            configFromRFC2822(config2);
            return;
          }
          config2._a = [];
          getParsingFlags(config2).empty = true;
          var string = "" + config2._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era;
          tokens2 = expandFormat(config2._f, config2._locale).match(formattingTokens) || [];
          for (i2 = 0; i2 < tokens2.length; i2++) {
            token2 = tokens2[i2];
            parsedInput = (string.match(getParseRegexForToken(token2, config2)) || [])[0];
            if (parsedInput) {
              skipped = string.substr(0, string.indexOf(parsedInput));
              if (skipped.length > 0) {
                getParsingFlags(config2).unusedInput.push(skipped);
              }
              string = string.slice(
                string.indexOf(parsedInput) + parsedInput.length
              );
              totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token2]) {
              if (parsedInput) {
                getParsingFlags(config2).empty = false;
              } else {
                getParsingFlags(config2).unusedTokens.push(token2);
              }
              addTimeToArrayFromToken(token2, parsedInput, config2);
            } else if (config2._strict && !parsedInput) {
              getParsingFlags(config2).unusedTokens.push(token2);
            }
          }
          getParsingFlags(config2).charsLeftOver = stringLength - totalParsedInputLength;
          if (string.length > 0) {
            getParsingFlags(config2).unusedInput.push(string);
          }
          if (config2._a[HOUR2] <= 12 && getParsingFlags(config2).bigHour === true && config2._a[HOUR2] > 0) {
            getParsingFlags(config2).bigHour = void 0;
          }
          getParsingFlags(config2).parsedDateParts = config2._a.slice(0);
          getParsingFlags(config2).meridiem = config2._meridiem;
          config2._a[HOUR2] = meridiemFixWrap(
            config2._locale,
            config2._a[HOUR2],
            config2._meridiem
          );
          era = getParsingFlags(config2).era;
          if (era !== null) {
            config2._a[YEAR2] = config2._locale.erasConvertYear(era, config2._a[YEAR2]);
          }
          configFromArray(config2);
          checkOverflow(config2);
        }
        function meridiemFixWrap(locale2, hour, meridiem2) {
          var isPm;
          if (meridiem2 == null) {
            return hour;
          }
          if (locale2.meridiemHour != null) {
            return locale2.meridiemHour(hour, meridiem2);
          } else if (locale2.isPM != null) {
            isPm = locale2.isPM(meridiem2);
            if (isPm && hour < 12) {
              hour += 12;
            }
            if (!isPm && hour === 12) {
              hour = 0;
            }
            return hour;
          } else {
            return hour;
          }
        }
        function configFromStringAndArray(config2) {
          var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false;
          if (config2._f.length === 0) {
            getParsingFlags(config2).invalidFormat = true;
            config2._d = /* @__PURE__ */ new Date(NaN);
            return;
          }
          for (i2 = 0; i2 < config2._f.length; i2++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config2);
            if (config2._useUTC != null) {
              tempConfig._useUTC = config2._useUTC;
            }
            tempConfig._f = config2._f[i2];
            configFromStringAndFormat(tempConfig);
            if (isValid(tempConfig)) {
              validFormatFound = true;
            }
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (!bestFormatIsValid) {
              if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
                if (validFormatFound) {
                  bestFormatIsValid = true;
                }
              }
            } else {
              if (currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
              }
            }
          }
          extend(config2, bestMoment || tempConfig);
        }
        function configFromObject(config2) {
          if (config2._d) {
            return;
          }
          var i2 = normalizeObjectUnits(config2._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
          config2._a = map(
            [i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond],
            function(obj) {
              return obj && parseInt(obj, 10);
            }
          );
          configFromArray(config2);
        }
        function createFromConfig(config2) {
          var res = new Moment(checkOverflow(prepareConfig(config2)));
          if (res._nextDay) {
            res.add(1, "d");
            res._nextDay = void 0;
          }
          return res;
        }
        function prepareConfig(config2) {
          var input = config2._i, format2 = config2._f;
          config2._locale = config2._locale || getLocale(config2._l);
          if (input === null || format2 === void 0 && input === "") {
            return createInvalid({ nullInput: true });
          }
          if (typeof input === "string") {
            config2._i = input = config2._locale.preparse(input);
          }
          if (isMoment(input)) {
            return new Moment(checkOverflow(input));
          } else if (isDate(input)) {
            config2._d = input;
          } else if (isArray(format2)) {
            configFromStringAndArray(config2);
          } else if (format2) {
            configFromStringAndFormat(config2);
          } else {
            configFromInput(config2);
          }
          if (!isValid(config2)) {
            config2._d = null;
          }
          return config2;
        }
        function configFromInput(config2) {
          var input = config2._i;
          if (isUndefined(input)) {
            config2._d = new Date(hooks.now());
          } else if (isDate(input)) {
            config2._d = new Date(input.valueOf());
          } else if (typeof input === "string") {
            configFromString(config2);
          } else if (isArray(input)) {
            config2._a = map(input.slice(0), function(obj) {
              return parseInt(obj, 10);
            });
            configFromArray(config2);
          } else if (isObject(input)) {
            configFromObject(config2);
          } else if (isNumber(input)) {
            config2._d = new Date(input);
          } else {
            hooks.createFromInputFallback(config2);
          }
        }
        function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
          var c2 = {};
          if (format2 === true || format2 === false) {
            strict = format2;
            format2 = void 0;
          }
          if (locale2 === true || locale2 === false) {
            strict = locale2;
            locale2 = void 0;
          }
          if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
            input = void 0;
          }
          c2._isAMomentObject = true;
          c2._useUTC = c2._isUTC = isUTC;
          c2._l = locale2;
          c2._i = input;
          c2._f = format2;
          c2._strict = strict;
          return createFromConfig(c2);
        }
        function createLocal(input, format2, locale2, strict) {
          return createLocalOrUTC(input, format2, locale2, strict, false);
        }
        var prototypeMin = deprecate(
          "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
          function() {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
            } else {
              return createInvalid();
            }
          }
        ), prototypeMax = deprecate(
          "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
          function() {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
            } else {
              return createInvalid();
            }
          }
        );
        function pickBy(fn, moments) {
          var res, i2;
          if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
          }
          if (!moments.length) {
            return createLocal();
          }
          res = moments[0];
          for (i2 = 1; i2 < moments.length; ++i2) {
            if (!moments[i2].isValid() || moments[i2][fn](res)) {
              res = moments[i2];
            }
          }
          return res;
        }
        function min() {
          var args = [].slice.call(arguments, 0);
          return pickBy("isBefore", args);
        }
        function max() {
          var args = [].slice.call(arguments, 0);
          return pickBy("isAfter", args);
        }
        var now = function() {
          return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
        };
        var ordering = [
          "year",
          "quarter",
          "month",
          "week",
          "day",
          "hour",
          "minute",
          "second",
          "millisecond"
        ];
        function isDurationValid(m) {
          var key, unitHasDecimal = false, i2;
          for (key in m) {
            if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
              return false;
            }
          }
          for (i2 = 0; i2 < ordering.length; ++i2) {
            if (m[ordering[i2]]) {
              if (unitHasDecimal) {
                return false;
              }
              if (parseFloat(m[ordering[i2]]) !== toInt2(m[ordering[i2]])) {
                unitHasDecimal = true;
              }
            }
          }
          return true;
        }
        function isValid$1() {
          return this._isValid;
        }
        function createInvalid$1() {
          return createDuration(NaN);
        }
        function Duration(duration) {
          var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
          this._isValid = isDurationValid(normalizedInput);
          this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
          minutes2 * 6e4 + // 1000 * 60
          hours2 * 1e3 * 60 * 60;
          this._days = +days2 + weeks2 * 7;
          this._months = +months2 + quarters * 3 + years2 * 12;
          this._data = {};
          this._locale = getLocale();
          this._bubble();
        }
        function isDuration(obj) {
          return obj instanceof Duration;
        }
        function absRound(number) {
          if (number < 0) {
            return Math.round(-1 * number) * -1;
          } else {
            return Math.round(number);
          }
        }
        function compareArrays(array1, array2, dontConvert) {
          var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i2;
          for (i2 = 0; i2 < len; i2++) {
            if (dontConvert && array1[i2] !== array2[i2] || !dontConvert && toInt2(array1[i2]) !== toInt2(array2[i2])) {
              diffs++;
            }
          }
          return diffs + lengthDiff;
        }
        function offset(token2, separator) {
          addFormatToken(token2, 0, 0, function() {
            var offset2 = this.utcOffset(), sign2 = "+";
            if (offset2 < 0) {
              offset2 = -offset2;
              sign2 = "-";
            }
            return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
          });
        }
        offset("Z", ":");
        offset("ZZ", "");
        addRegexToken("Z", matchShortOffset);
        addRegexToken("ZZ", matchShortOffset);
        addParseToken(["Z", "ZZ"], function(input, array, config2) {
          config2._useUTC = true;
          config2._tzm = offsetFromString(matchShortOffset, input);
        });
        var chunkOffset = /([\+\-]|\d\d)/gi;
        function offsetFromString(matcher, string) {
          var matches = (string || "").match(matcher), chunk, parts, minutes2;
          if (matches === null) {
            return null;
          }
          chunk = matches[matches.length - 1] || [];
          parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
          minutes2 = +(parts[1] * 60) + toInt2(parts[2]);
          return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
        }
        function cloneWithOffset(input, model) {
          var res, diff2;
          if (model._isUTC) {
            res = model.clone();
            diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            res._d.setTime(res._d.valueOf() + diff2);
            hooks.updateOffset(res, false);
            return res;
          } else {
            return createLocal(input).local();
          }
        }
        function getDateOffset(m) {
          return -Math.round(m._d.getTimezoneOffset());
        }
        hooks.updateOffset = function() {
        };
        function getSetOffset(input, keepLocalTime, keepMinutes) {
          var offset2 = this._offset || 0, localAdjust;
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          if (input != null) {
            if (typeof input === "string") {
              input = offsetFromString(matchShortOffset, input);
              if (input === null) {
                return this;
              }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
              input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
              localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
              this.add(localAdjust, "m");
            }
            if (offset2 !== input) {
              if (!keepLocalTime || this._changeInProgress) {
                addSubtract(
                  this,
                  createDuration(input - offset2, "m"),
                  1,
                  false
                );
              } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
              }
            }
            return this;
          } else {
            return this._isUTC ? offset2 : getDateOffset(this);
          }
        }
        function getSetZone(input, keepLocalTime) {
          if (input != null) {
            if (typeof input !== "string") {
              input = -input;
            }
            this.utcOffset(input, keepLocalTime);
            return this;
          } else {
            return -this.utcOffset();
          }
        }
        function setOffsetToUTC(keepLocalTime) {
          return this.utcOffset(0, keepLocalTime);
        }
        function setOffsetToLocal(keepLocalTime) {
          if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
              this.subtract(getDateOffset(this), "m");
            }
          }
          return this;
        }
        function setOffsetToParsedOffset() {
          if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
          } else if (typeof this._i === "string") {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
              this.utcOffset(tZone);
            } else {
              this.utcOffset(0, true);
            }
          }
          return this;
        }
        function hasAlignedHourOffset(input) {
          if (!this.isValid()) {
            return false;
          }
          input = input ? createLocal(input).utcOffset() : 0;
          return (this.utcOffset() - input) % 60 === 0;
        }
        function isDaylightSavingTime() {
          return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
        }
        function isDaylightSavingTimeShifted() {
          if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
          }
          var c2 = {}, other;
          copyConfig(c2, this);
          c2 = prepareConfig(c2);
          if (c2._a) {
            other = c2._isUTC ? createUTC(c2._a) : createLocal(c2._a);
            this._isDSTShifted = this.isValid() && compareArrays(c2._a, other.toArray()) > 0;
          } else {
            this._isDSTShifted = false;
          }
          return this._isDSTShifted;
        }
        function isLocal() {
          return this.isValid() ? !this._isUTC : false;
        }
        function isUtcOffset() {
          return this.isValid() ? this._isUTC : false;
        }
        function isUtc() {
          return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }
        var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
        function createDuration(input, key) {
          var duration = input, match = null, sign2, ret2, diffRes;
          if (isDuration(input)) {
            duration = {
              ms: input._milliseconds,
              d: input._days,
              M: input._months
            };
          } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
              duration[key] = +input;
            } else {
              duration.milliseconds = +input;
            }
          } else if (match = aspNetRegex.exec(input)) {
            sign2 = match[1] === "-" ? -1 : 1;
            duration = {
              y: 0,
              d: toInt2(match[DATE]) * sign2,
              h: toInt2(match[HOUR2]) * sign2,
              m: toInt2(match[MINUTE2]) * sign2,
              s: toInt2(match[SECOND2]) * sign2,
              ms: toInt2(absRound(match[MILLISECOND] * 1e3)) * sign2
              // the millisecond decimal point is included in the match
            };
          } else if (match = isoRegex.exec(input)) {
            sign2 = match[1] === "-" ? -1 : 1;
            duration = {
              y: parseIso(match[2], sign2),
              M: parseIso(match[3], sign2),
              w: parseIso(match[4], sign2),
              d: parseIso(match[5], sign2),
              h: parseIso(match[6], sign2),
              m: parseIso(match[7], sign2),
              s: parseIso(match[8], sign2)
            };
          } else if (duration == null) {
            duration = {};
          } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
            diffRes = momentsDifference(
              createLocal(duration.from),
              createLocal(duration.to)
            );
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
          }
          ret2 = new Duration(duration);
          if (isDuration(input) && hasOwnProp(input, "_locale")) {
            ret2._locale = input._locale;
          }
          if (isDuration(input) && hasOwnProp(input, "_isValid")) {
            ret2._isValid = input._isValid;
          }
          return ret2;
        }
        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;
        function parseIso(inp, sign2) {
          var res = inp && parseFloat(inp.replace(",", "."));
          return (isNaN(res) ? 0 : res) * sign2;
        }
        function positiveMomentsDifference(base, other) {
          var res = {};
          res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
          if (base.clone().add(res.months, "M").isAfter(other)) {
            --res.months;
          }
          res.milliseconds = +other - +base.clone().add(res.months, "M");
          return res;
        }
        function momentsDifference(base, other) {
          var res;
          if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
          }
          other = cloneWithOffset(other, base);
          if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
          } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
          }
          return res;
        }
        function createAdder(direction, name) {
          return function(val, period) {
            var dur, tmp;
            if (period !== null && !isNaN(+period)) {
              deprecateSimple(
                name,
                "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
              );
              tmp = val;
              val = period;
              period = tmp;
            }
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
          };
        }
        function addSubtract(mom, duration, isAdding, updateOffset) {
          var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
          if (!mom.isValid()) {
            return;
          }
          updateOffset = updateOffset == null ? true : updateOffset;
          if (months2) {
            setMonth(mom, get2(mom, "Month") + months2 * isAdding);
          }
          if (days2) {
            set$1(mom, "Date", get2(mom, "Date") + days2 * isAdding);
          }
          if (milliseconds2) {
            mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
          }
          if (updateOffset) {
            hooks.updateOffset(mom, days2 || months2);
          }
        }
        var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
        function isString(input) {
          return typeof input === "string" || input instanceof String;
        }
        function isMomentInput(input) {
          return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
        }
        function isMomentInputObject(input) {
          var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            "years",
            "year",
            "y",
            "months",
            "month",
            "M",
            "days",
            "day",
            "d",
            "dates",
            "date",
            "D",
            "hours",
            "hour",
            "h",
            "minutes",
            "minute",
            "m",
            "seconds",
            "second",
            "s",
            "milliseconds",
            "millisecond",
            "ms"
          ], i2, property;
          for (i2 = 0; i2 < properties.length; i2 += 1) {
            property = properties[i2];
            propertyTest = propertyTest || hasOwnProp(input, property);
          }
          return objectTest && propertyTest;
        }
        function isNumberOrStringArray(input) {
          var arrayTest = isArray(input), dataTypeTest = false;
          if (arrayTest) {
            dataTypeTest = input.filter(function(item) {
              return !isNumber(item) && isString(input);
            }).length === 0;
          }
          return arrayTest && dataTypeTest;
        }
        function isCalendarSpec(input) {
          var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            "sameDay",
            "nextDay",
            "lastDay",
            "nextWeek",
            "lastWeek",
            "sameElse"
          ], i2, property;
          for (i2 = 0; i2 < properties.length; i2 += 1) {
            property = properties[i2];
            propertyTest = propertyTest || hasOwnProp(input, property);
          }
          return objectTest && propertyTest;
        }
        function getCalendarFormat(myMoment, now2) {
          var diff2 = myMoment.diff(now2, "days", true);
          return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
        }
        function calendar$1(time, formats) {
          if (arguments.length === 1) {
            if (!arguments[0]) {
              time = void 0;
              formats = void 0;
            } else if (isMomentInput(arguments[0])) {
              time = arguments[0];
              formats = void 0;
            } else if (isCalendarSpec(arguments[0])) {
              formats = arguments[0];
              time = void 0;
            }
          }
          var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
          return this.format(
            output || this.localeData().calendar(format2, this, createLocal(now2))
          );
        }
        function clone() {
          return new Moment(this);
        }
        function isAfter(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(units) || "millisecond";
          if (units === "millisecond") {
            return this.valueOf() > localInput.valueOf();
          } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
          }
        }
        function isBefore(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(units) || "millisecond";
          if (units === "millisecond") {
            return this.valueOf() < localInput.valueOf();
          } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
          }
        }
        function isBetween(from2, to2, units, inclusivity) {
          var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
          if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
          }
          inclusivity = inclusivity || "()";
          return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
        }
        function isSame(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input), inputMs;
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(units) || "millisecond";
          if (units === "millisecond") {
            return this.valueOf() === localInput.valueOf();
          } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
          }
        }
        function isSameOrAfter(input, units) {
          return this.isSame(input, units) || this.isAfter(input, units);
        }
        function isSameOrBefore(input, units) {
          return this.isSame(input, units) || this.isBefore(input, units);
        }
        function diff(input, units, asFloat) {
          var that, zoneDelta, output;
          if (!this.isValid()) {
            return NaN;
          }
          that = cloneWithOffset(input, this);
          if (!that.isValid()) {
            return NaN;
          }
          zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
          units = normalizeUnits(units);
          switch (units) {
            case "year":
              output = monthDiff(this, that) / 12;
              break;
            case "month":
              output = monthDiff(this, that);
              break;
            case "quarter":
              output = monthDiff(this, that) / 3;
              break;
            case "second":
              output = (this - that) / 1e3;
              break;
            case "minute":
              output = (this - that) / 6e4;
              break;
            case "hour":
              output = (this - that) / 36e5;
              break;
            case "day":
              output = (this - that - zoneDelta) / 864e5;
              break;
            case "week":
              output = (this - that - zoneDelta) / 6048e5;
              break;
            default:
              output = this - that;
          }
          return asFloat ? output : absFloor(output);
        }
        function monthDiff(a2, b2) {
          if (a2.date() < b2.date()) {
            return -monthDiff(b2, a2);
          }
          var wholeMonthDiff = (b2.year() - a2.year()) * 12 + (b2.month() - a2.month()), anchor = a2.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
          if (b2 - anchor < 0) {
            anchor2 = a2.clone().add(wholeMonthDiff - 1, "months");
            adjust = (b2 - anchor) / (anchor - anchor2);
          } else {
            anchor2 = a2.clone().add(wholeMonthDiff + 1, "months");
            adjust = (b2 - anchor) / (anchor2 - anchor);
          }
          return -(wholeMonthDiff + adjust) || 0;
        }
        hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
        hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
        function toString() {
          return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        }
        function toISOString(keepOffset) {
          if (!this.isValid()) {
            return null;
          }
          var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
          if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
              m,
              utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
            );
          }
          if (isFunction(Date.prototype.toISOString)) {
            if (utc) {
              return this.toDate().toISOString();
            } else {
              return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
            }
          }
          return formatMoment(
            m,
            utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
          );
        }
        function inspect() {
          if (!this.isValid()) {
            return "moment.invalid(/* " + this._i + " */)";
          }
          var func = "moment", zone = "", prefix, year, datetime, suffix;
          if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
            zone = "Z";
          }
          prefix = "[" + func + '("]';
          year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
          datetime = "-MM-DD[T]HH:mm:ss.SSS";
          suffix = zone + '[")]';
          return this.format(prefix + year + datetime + suffix);
        }
        function format(inputString) {
          if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
          }
          var output = formatMoment(this, inputString);
          return this.localeData().postformat(output);
        }
        function from(time, withoutSuffix) {
          if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
          } else {
            return this.localeData().invalidDate();
          }
        }
        function fromNow(withoutSuffix) {
          return this.from(createLocal(), withoutSuffix);
        }
        function to(time, withoutSuffix) {
          if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
          } else {
            return this.localeData().invalidDate();
          }
        }
        function toNow(withoutSuffix) {
          return this.to(createLocal(), withoutSuffix);
        }
        function locale(key) {
          var newLocaleData;
          if (key === void 0) {
            return this._locale._abbr;
          } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
              this._locale = newLocaleData;
            }
            return this;
          }
        }
        var lang = deprecate(
          "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
          function(key) {
            if (key === void 0) {
              return this.localeData();
            } else {
              return this.locale(key);
            }
          }
        );
        function localeData() {
          return this._locale;
        }
        var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
        function mod$1(dividend, divisor) {
          return (dividend % divisor + divisor) % divisor;
        }
        function localStartOfDate(y2, m, d2) {
          if (y2 < 100 && y2 >= 0) {
            return new Date(y2 + 400, m, d2) - MS_PER_400_YEARS;
          } else {
            return new Date(y2, m, d2).valueOf();
          }
        }
        function utcStartOfDate(y2, m, d2) {
          if (y2 < 100 && y2 >= 0) {
            return Date.UTC(y2 + 400, m, d2) - MS_PER_400_YEARS;
          } else {
            return Date.UTC(y2, m, d2);
          }
        }
        function startOf(units) {
          var time, startOfDate;
          units = normalizeUnits(units);
          if (units === void 0 || units === "millisecond" || !this.isValid()) {
            return this;
          }
          startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
          switch (units) {
            case "year":
              time = startOfDate(this.year(), 0, 1);
              break;
            case "quarter":
              time = startOfDate(
                this.year(),
                this.month() - this.month() % 3,
                1
              );
              break;
            case "month":
              time = startOfDate(this.year(), this.month(), 1);
              break;
            case "week":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - this.weekday()
              );
              break;
            case "isoWeek":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - (this.isoWeekday() - 1)
              );
              break;
            case "day":
            case "date":
              time = startOfDate(this.year(), this.month(), this.date());
              break;
            case "hour":
              time = this._d.valueOf();
              time -= mod$1(
                time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                MS_PER_HOUR
              );
              break;
            case "minute":
              time = this._d.valueOf();
              time -= mod$1(time, MS_PER_MINUTE);
              break;
            case "second":
              time = this._d.valueOf();
              time -= mod$1(time, MS_PER_SECOND);
              break;
          }
          this._d.setTime(time);
          hooks.updateOffset(this, true);
          return this;
        }
        function endOf(units) {
          var time, startOfDate;
          units = normalizeUnits(units);
          if (units === void 0 || units === "millisecond" || !this.isValid()) {
            return this;
          }
          startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
          switch (units) {
            case "year":
              time = startOfDate(this.year() + 1, 0, 1) - 1;
              break;
            case "quarter":
              time = startOfDate(
                this.year(),
                this.month() - this.month() % 3 + 3,
                1
              ) - 1;
              break;
            case "month":
              time = startOfDate(this.year(), this.month() + 1, 1) - 1;
              break;
            case "week":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - this.weekday() + 7
              ) - 1;
              break;
            case "isoWeek":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - (this.isoWeekday() - 1) + 7
              ) - 1;
              break;
            case "day":
            case "date":
              time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
              break;
            case "hour":
              time = this._d.valueOf();
              time += MS_PER_HOUR - mod$1(
                time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                MS_PER_HOUR
              ) - 1;
              break;
            case "minute":
              time = this._d.valueOf();
              time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
              break;
            case "second":
              time = this._d.valueOf();
              time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
              break;
          }
          this._d.setTime(time);
          hooks.updateOffset(this, true);
          return this;
        }
        function valueOf() {
          return this._d.valueOf() - (this._offset || 0) * 6e4;
        }
        function unix() {
          return Math.floor(this.valueOf() / 1e3);
        }
        function toDate() {
          return new Date(this.valueOf());
        }
        function toArray() {
          var m = this;
          return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond()
          ];
        }
        function toObject() {
          var m = this;
          return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
          };
        }
        function toJSON() {
          return this.isValid() ? this.toISOString() : null;
        }
        function isValid$2() {
          return isValid(this);
        }
        function parsingFlags() {
          return extend({}, getParsingFlags(this));
        }
        function invalidAt() {
          return getParsingFlags(this).overflow;
        }
        function creationData() {
          return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
          };
        }
        addFormatToken("N", 0, 0, "eraAbbr");
        addFormatToken("NN", 0, 0, "eraAbbr");
        addFormatToken("NNN", 0, 0, "eraAbbr");
        addFormatToken("NNNN", 0, 0, "eraName");
        addFormatToken("NNNNN", 0, 0, "eraNarrow");
        addFormatToken("y", ["y", 1], "yo", "eraYear");
        addFormatToken("y", ["yy", 2], 0, "eraYear");
        addFormatToken("y", ["yyy", 3], 0, "eraYear");
        addFormatToken("y", ["yyyy", 4], 0, "eraYear");
        addRegexToken("N", matchEraAbbr);
        addRegexToken("NN", matchEraAbbr);
        addRegexToken("NNN", matchEraAbbr);
        addRegexToken("NNNN", matchEraName);
        addRegexToken("NNNNN", matchEraNarrow);
        addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config2, token2) {
          var era = config2._locale.erasParse(input, token2, config2._strict);
          if (era) {
            getParsingFlags(config2).era = era;
          } else {
            getParsingFlags(config2).invalidEra = input;
          }
        });
        addRegexToken("y", matchUnsigned);
        addRegexToken("yy", matchUnsigned);
        addRegexToken("yyy", matchUnsigned);
        addRegexToken("yyyy", matchUnsigned);
        addRegexToken("yo", matchEraYearOrdinal);
        addParseToken(["y", "yy", "yyy", "yyyy"], YEAR2);
        addParseToken(["yo"], function(input, array, config2, token2) {
          var match;
          if (config2._locale._eraYearOrdinalRegex) {
            match = input.match(config2._locale._eraYearOrdinalRegex);
          }
          if (config2._locale.eraYearOrdinalParse) {
            array[YEAR2] = config2._locale.eraYearOrdinalParse(input, match);
          } else {
            array[YEAR2] = parseInt(input, 10);
          }
        });
        function localeEras(m, format2) {
          var i2, l2, date, eras = this._eras || getLocale("en")._eras;
          for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
            switch (typeof eras[i2].since) {
              case "string":
                date = hooks(eras[i2].since).startOf("day");
                eras[i2].since = date.valueOf();
                break;
            }
            switch (typeof eras[i2].until) {
              case "undefined":
                eras[i2].until = Infinity;
                break;
              case "string":
                date = hooks(eras[i2].until).startOf("day").valueOf();
                eras[i2].until = date.valueOf();
                break;
            }
          }
          return eras;
        }
        function localeErasParse(eraName, format2, strict) {
          var i2, l2, eras = this.eras(), name, abbr, narrow;
          eraName = eraName.toUpperCase();
          for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
            name = eras[i2].name.toUpperCase();
            abbr = eras[i2].abbr.toUpperCase();
            narrow = eras[i2].narrow.toUpperCase();
            if (strict) {
              switch (format2) {
                case "N":
                case "NN":
                case "NNN":
                  if (abbr === eraName) {
                    return eras[i2];
                  }
                  break;
                case "NNNN":
                  if (name === eraName) {
                    return eras[i2];
                  }
                  break;
                case "NNNNN":
                  if (narrow === eraName) {
                    return eras[i2];
                  }
                  break;
              }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
              return eras[i2];
            }
          }
        }
        function localeErasConvertYear(era, year) {
          var dir = era.since <= era.until ? 1 : -1;
          if (year === void 0) {
            return hooks(era.since).year();
          } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
          }
        }
        function getEraName() {
          var i2, l2, val, eras = this.localeData().eras();
          for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
            val = this.clone().startOf("day").valueOf();
            if (eras[i2].since <= val && val <= eras[i2].until) {
              return eras[i2].name;
            }
            if (eras[i2].until <= val && val <= eras[i2].since) {
              return eras[i2].name;
            }
          }
          return "";
        }
        function getEraNarrow() {
          var i2, l2, val, eras = this.localeData().eras();
          for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
            val = this.clone().startOf("day").valueOf();
            if (eras[i2].since <= val && val <= eras[i2].until) {
              return eras[i2].narrow;
            }
            if (eras[i2].until <= val && val <= eras[i2].since) {
              return eras[i2].narrow;
            }
          }
          return "";
        }
        function getEraAbbr() {
          var i2, l2, val, eras = this.localeData().eras();
          for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
            val = this.clone().startOf("day").valueOf();
            if (eras[i2].since <= val && val <= eras[i2].until) {
              return eras[i2].abbr;
            }
            if (eras[i2].until <= val && val <= eras[i2].since) {
              return eras[i2].abbr;
            }
          }
          return "";
        }
        function getEraYear() {
          var i2, l2, dir, val, eras = this.localeData().eras();
          for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
            dir = eras[i2].since <= eras[i2].until ? 1 : -1;
            val = this.clone().startOf("day").valueOf();
            if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
              return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
            }
          }
          return this.year();
        }
        function erasNameRegex(isStrict) {
          if (!hasOwnProp(this, "_erasNameRegex")) {
            computeErasParse.call(this);
          }
          return isStrict ? this._erasNameRegex : this._erasRegex;
        }
        function erasAbbrRegex(isStrict) {
          if (!hasOwnProp(this, "_erasAbbrRegex")) {
            computeErasParse.call(this);
          }
          return isStrict ? this._erasAbbrRegex : this._erasRegex;
        }
        function erasNarrowRegex(isStrict) {
          if (!hasOwnProp(this, "_erasNarrowRegex")) {
            computeErasParse.call(this);
          }
          return isStrict ? this._erasNarrowRegex : this._erasRegex;
        }
        function matchEraAbbr(isStrict, locale2) {
          return locale2.erasAbbrRegex(isStrict);
        }
        function matchEraName(isStrict, locale2) {
          return locale2.erasNameRegex(isStrict);
        }
        function matchEraNarrow(isStrict, locale2) {
          return locale2.erasNarrowRegex(isStrict);
        }
        function matchEraYearOrdinal(isStrict, locale2) {
          return locale2._eraYearOrdinalRegex || matchUnsigned;
        }
        function computeErasParse() {
          var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l2, eras = this.eras();
          for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
            namePieces.push(regexEscape(eras[i2].name));
            abbrPieces.push(regexEscape(eras[i2].abbr));
            narrowPieces.push(regexEscape(eras[i2].narrow));
            mixedPieces.push(regexEscape(eras[i2].name));
            mixedPieces.push(regexEscape(eras[i2].abbr));
            mixedPieces.push(regexEscape(eras[i2].narrow));
          }
          this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
          this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
          this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
          this._erasNarrowRegex = new RegExp(
            "^(" + narrowPieces.join("|") + ")",
            "i"
          );
        }
        addFormatToken(0, ["gg", 2], 0, function() {
          return this.weekYear() % 100;
        });
        addFormatToken(0, ["GG", 2], 0, function() {
          return this.isoWeekYear() % 100;
        });
        function addWeekYearFormatToken(token2, getter) {
          addFormatToken(0, [token2, token2.length], 0, getter);
        }
        addWeekYearFormatToken("gggg", "weekYear");
        addWeekYearFormatToken("ggggg", "weekYear");
        addWeekYearFormatToken("GGGG", "isoWeekYear");
        addWeekYearFormatToken("GGGGG", "isoWeekYear");
        addUnitAlias("weekYear", "gg");
        addUnitAlias("isoWeekYear", "GG");
        addUnitPriority("weekYear", 1);
        addUnitPriority("isoWeekYear", 1);
        addRegexToken("G", matchSigned);
        addRegexToken("g", matchSigned);
        addRegexToken("GG", match1to2, match2);
        addRegexToken("gg", match1to2, match2);
        addRegexToken("GGGG", match1to4, match4);
        addRegexToken("gggg", match1to4, match4);
        addRegexToken("GGGGG", match1to6, match6);
        addRegexToken("ggggg", match1to6, match6);
        addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config2, token2) {
          week[token2.substr(0, 2)] = toInt2(input);
        });
        addWeekParseToken(["gg", "GG"], function(input, week, config2, token2) {
          week[token2] = hooks.parseTwoDigitYear(input);
        });
        function getSetWeekYear(input) {
          return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
          );
        }
        function getSetISOWeekYear(input) {
          return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
          );
        }
        function getISOWeeksInYear() {
          return weeksInYear(this.year(), 1, 4);
        }
        function getISOWeeksInISOWeekYear() {
          return weeksInYear(this.isoWeekYear(), 1, 4);
        }
        function getWeeksInYear() {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }
        function getWeeksInWeekYear() {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
        }
        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
          var weeksTarget;
          if (input == null) {
            return weekOfYear(this, dow, doy).year;
          } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
              week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
          }
        }
        function setWeekAll(weekYear, week, weekday, dow, doy) {
          var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
          this.year(date.getUTCFullYear());
          this.month(date.getUTCMonth());
          this.date(date.getUTCDate());
          return this;
        }
        addFormatToken("Q", 0, "Qo", "quarter");
        addUnitAlias("quarter", "Q");
        addUnitPriority("quarter", 7);
        addRegexToken("Q", match1);
        addParseToken("Q", function(input, array) {
          array[MONTH2] = (toInt2(input) - 1) * 3;
        });
        function getSetQuarter(input) {
          return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        }
        addFormatToken("D", ["DD", 2], "Do", "date");
        addUnitAlias("date", "D");
        addUnitPriority("date", 9);
        addRegexToken("D", match1to2);
        addRegexToken("DD", match1to2, match2);
        addRegexToken("Do", function(isStrict, locale2) {
          return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
        });
        addParseToken(["D", "DD"], DATE);
        addParseToken("Do", function(input, array) {
          array[DATE] = toInt2(input.match(match1to2)[0]);
        });
        var getSetDayOfMonth = makeGetSet("Date", true);
        addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
        addUnitAlias("dayOfYear", "DDD");
        addUnitPriority("dayOfYear", 4);
        addRegexToken("DDD", match1to3);
        addRegexToken("DDDD", match3);
        addParseToken(["DDD", "DDDD"], function(input, array, config2) {
          config2._dayOfYear = toInt2(input);
        });
        function getSetDayOfYear(input) {
          var dayOfYear = Math.round(
            (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
          ) + 1;
          return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
        }
        addFormatToken("m", ["mm", 2], 0, "minute");
        addUnitAlias("minute", "m");
        addUnitPriority("minute", 14);
        addRegexToken("m", match1to2);
        addRegexToken("mm", match1to2, match2);
        addParseToken(["m", "mm"], MINUTE2);
        var getSetMinute = makeGetSet("Minutes", false);
        addFormatToken("s", ["ss", 2], 0, "second");
        addUnitAlias("second", "s");
        addUnitPriority("second", 15);
        addRegexToken("s", match1to2);
        addRegexToken("ss", match1to2, match2);
        addParseToken(["s", "ss"], SECOND2);
        var getSetSecond = makeGetSet("Seconds", false);
        addFormatToken("S", 0, 0, function() {
          return ~~(this.millisecond() / 100);
        });
        addFormatToken(0, ["SS", 2], 0, function() {
          return ~~(this.millisecond() / 10);
        });
        addFormatToken(0, ["SSS", 3], 0, "millisecond");
        addFormatToken(0, ["SSSS", 4], 0, function() {
          return this.millisecond() * 10;
        });
        addFormatToken(0, ["SSSSS", 5], 0, function() {
          return this.millisecond() * 100;
        });
        addFormatToken(0, ["SSSSSS", 6], 0, function() {
          return this.millisecond() * 1e3;
        });
        addFormatToken(0, ["SSSSSSS", 7], 0, function() {
          return this.millisecond() * 1e4;
        });
        addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
          return this.millisecond() * 1e5;
        });
        addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
          return this.millisecond() * 1e6;
        });
        addUnitAlias("millisecond", "ms");
        addUnitPriority("millisecond", 16);
        addRegexToken("S", match1to3, match1);
        addRegexToken("SS", match1to3, match2);
        addRegexToken("SSS", match1to3, match3);
        var token, getSetMillisecond;
        for (token = "SSSS"; token.length <= 9; token += "S") {
          addRegexToken(token, matchUnsigned);
        }
        function parseMs(input, array) {
          array[MILLISECOND] = toInt2(("0." + input) * 1e3);
        }
        for (token = "S"; token.length <= 9; token += "S") {
          addParseToken(token, parseMs);
        }
        getSetMillisecond = makeGetSet("Milliseconds", false);
        addFormatToken("z", 0, 0, "zoneAbbr");
        addFormatToken("zz", 0, 0, "zoneName");
        function getZoneAbbr() {
          return this._isUTC ? "UTC" : "";
        }
        function getZoneName() {
          return this._isUTC ? "Coordinated Universal Time" : "";
        }
        var proto = Moment.prototype;
        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format;
        proto.from = from;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray;
        proto.toObject = toObject;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        if (typeof Symbol !== "undefined" && Symbol.for != null) {
          proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
            return "Moment<" + this.format() + ">";
          };
        }
        proto.toJSON = toJSON;
        proto.toString = toString;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.eraName = getEraName;
        proto.eraNarrow = getEraNarrow;
        proto.eraAbbr = getEraAbbr;
        proto.eraYear = getEraYear;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.weeksInWeekYear = getWeeksInWeekYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate(
          "dates accessor is deprecated. Use date instead.",
          getSetDayOfMonth
        );
        proto.months = deprecate(
          "months accessor is deprecated. Use month instead",
          getSetMonth
        );
        proto.years = deprecate(
          "years accessor is deprecated. Use year instead",
          getSetYear
        );
        proto.zone = deprecate(
          "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
          getSetZone
        );
        proto.isDSTShifted = deprecate(
          "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
          isDaylightSavingTimeShifted
        );
        function createUnix(input) {
          return createLocal(input * 1e3);
        }
        function createInZone() {
          return createLocal.apply(null, arguments).parseZone();
        }
        function preParsePostFormat(string) {
          return string;
        }
        var proto$1 = Locale.prototype;
        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set2;
        proto$1.eras = localeEras;
        proto$1.erasParse = localeErasParse;
        proto$1.erasConvertYear = localeErasConvertYear;
        proto$1.erasAbbrRegex = erasAbbrRegex;
        proto$1.erasNameRegex = erasNameRegex;
        proto$1.erasNarrowRegex = erasNarrowRegex;
        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;
        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;
        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;
        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;
        function get$1(format2, index2, field, setter) {
          var locale2 = getLocale(), utc = createUTC().set(setter, index2);
          return locale2[field](utc, format2);
        }
        function listMonthsImpl(format2, index2, field) {
          if (isNumber(format2)) {
            index2 = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
          if (index2 != null) {
            return get$1(format2, index2, field, "month");
          }
          var i2, out = [];
          for (i2 = 0; i2 < 12; i2++) {
            out[i2] = get$1(format2, i2, field, "month");
          }
          return out;
        }
        function listWeekdaysImpl(localeSorted, format2, index2, field) {
          if (typeof localeSorted === "boolean") {
            if (isNumber(format2)) {
              index2 = format2;
              format2 = void 0;
            }
            format2 = format2 || "";
          } else {
            format2 = localeSorted;
            index2 = format2;
            localeSorted = false;
            if (isNumber(format2)) {
              index2 = format2;
              format2 = void 0;
            }
            format2 = format2 || "";
          }
          var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i2, out = [];
          if (index2 != null) {
            return get$1(format2, (index2 + shift) % 7, field, "day");
          }
          for (i2 = 0; i2 < 7; i2++) {
            out[i2] = get$1(format2, (i2 + shift) % 7, field, "day");
          }
          return out;
        }
        function listMonths(format2, index2) {
          return listMonthsImpl(format2, index2, "months");
        }
        function listMonthsShort(format2, index2) {
          return listMonthsImpl(format2, index2, "monthsShort");
        }
        function listWeekdays(localeSorted, format2, index2) {
          return listWeekdaysImpl(localeSorted, format2, index2, "weekdays");
        }
        function listWeekdaysShort(localeSorted, format2, index2) {
          return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysShort");
        }
        function listWeekdaysMin(localeSorted, format2, index2) {
          return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysMin");
        }
        getSetGlobalLocale("en", {
          eras: [
            {
              since: "0001-01-01",
              until: Infinity,
              offset: 1,
              name: "Anno Domini",
              narrow: "AD",
              abbr: "AD"
            },
            {
              since: "0000-12-31",
              until: -Infinity,
              offset: 1,
              name: "Before Christ",
              narrow: "BC",
              abbr: "BC"
            }
          ],
          dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
          ordinal: function(number) {
            var b2 = number % 10, output = toInt2(number % 100 / 10) === 1 ? "th" : b2 === 1 ? "st" : b2 === 2 ? "nd" : b2 === 3 ? "rd" : "th";
            return number + output;
          }
        });
        hooks.lang = deprecate(
          "moment.lang is deprecated. Use moment.locale instead.",
          getSetGlobalLocale
        );
        hooks.langData = deprecate(
          "moment.langData is deprecated. Use moment.localeData instead.",
          getLocale
        );
        var mathAbs = Math.abs;
        function abs() {
          var data = this._data;
          this._milliseconds = mathAbs(this._milliseconds);
          this._days = mathAbs(this._days);
          this._months = mathAbs(this._months);
          data.milliseconds = mathAbs(data.milliseconds);
          data.seconds = mathAbs(data.seconds);
          data.minutes = mathAbs(data.minutes);
          data.hours = mathAbs(data.hours);
          data.months = mathAbs(data.months);
          data.years = mathAbs(data.years);
          return this;
        }
        function addSubtract$1(duration, input, value, direction) {
          var other = createDuration(input, value);
          duration._milliseconds += direction * other._milliseconds;
          duration._days += direction * other._days;
          duration._months += direction * other._months;
          return duration._bubble();
        }
        function add$1(input, value) {
          return addSubtract$1(this, input, value, 1);
        }
        function subtract$1(input, value) {
          return addSubtract$1(this, input, value, -1);
        }
        function absCeil(number) {
          if (number < 0) {
            return Math.floor(number);
          } else {
            return Math.ceil(number);
          }
        }
        function bubble() {
          var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
          if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
            milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
            days2 = 0;
            months2 = 0;
          }
          data.milliseconds = milliseconds2 % 1e3;
          seconds2 = absFloor(milliseconds2 / 1e3);
          data.seconds = seconds2 % 60;
          minutes2 = absFloor(seconds2 / 60);
          data.minutes = minutes2 % 60;
          hours2 = absFloor(minutes2 / 60);
          data.hours = hours2 % 24;
          days2 += absFloor(hours2 / 24);
          monthsFromDays = absFloor(daysToMonths(days2));
          months2 += monthsFromDays;
          days2 -= absCeil(monthsToDays(monthsFromDays));
          years2 = absFloor(months2 / 12);
          months2 %= 12;
          data.days = days2;
          data.months = months2;
          data.years = years2;
          return this;
        }
        function daysToMonths(days2) {
          return days2 * 4800 / 146097;
        }
        function monthsToDays(months2) {
          return months2 * 146097 / 4800;
        }
        function as(units) {
          if (!this.isValid()) {
            return NaN;
          }
          var days2, months2, milliseconds2 = this._milliseconds;
          units = normalizeUnits(units);
          if (units === "month" || units === "quarter" || units === "year") {
            days2 = this._days + milliseconds2 / 864e5;
            months2 = this._months + daysToMonths(days2);
            switch (units) {
              case "month":
                return months2;
              case "quarter":
                return months2 / 3;
              case "year":
                return months2 / 12;
            }
          } else {
            days2 = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
              case "week":
                return days2 / 7 + milliseconds2 / 6048e5;
              case "day":
                return days2 + milliseconds2 / 864e5;
              case "hour":
                return days2 * 24 + milliseconds2 / 36e5;
              case "minute":
                return days2 * 1440 + milliseconds2 / 6e4;
              case "second":
                return days2 * 86400 + milliseconds2 / 1e3;
              case "millisecond":
                return Math.floor(days2 * 864e5) + milliseconds2;
              default:
                throw new Error("Unknown unit " + units);
            }
          }
        }
        function valueOf$1() {
          if (!this.isValid()) {
            return NaN;
          }
          return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt2(this._months / 12) * 31536e6;
        }
        function makeAs(alias) {
          return function() {
            return this.as(alias);
          };
        }
        var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
        function clone$1() {
          return createDuration(this);
        }
        function get$2(units) {
          units = normalizeUnits(units);
          return this.isValid() ? this[units + "s"]() : NaN;
        }
        function makeGetter(name) {
          return function() {
            return this.isValid() ? this._data[name] : NaN;
          };
        }
        var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
        function weeks() {
          return absFloor(this.days() / 7);
        }
        var round = Math.round, thresholds = {
          ss: 44,
          // a few seconds to seconds
          s: 45,
          // seconds to minute
          m: 45,
          // minutes to hour
          h: 22,
          // hours to day
          d: 26,
          // days to month/week
          w: null,
          // weeks to month
          M: 11
          // months to year
        };
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
          return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }
        function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
          var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a2 = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
          if (thresholds2.w != null) {
            a2 = a2 || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
          }
          a2 = a2 || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
          a2[2] = withoutSuffix;
          a2[3] = +posNegDuration > 0;
          a2[4] = locale2;
          return substituteTimeAgo.apply(null, a2);
        }
        function getSetRelativeTimeRounding(roundingFunction) {
          if (roundingFunction === void 0) {
            return round;
          }
          if (typeof roundingFunction === "function") {
            round = roundingFunction;
            return true;
          }
          return false;
        }
        function getSetRelativeTimeThreshold(threshold, limit) {
          if (thresholds[threshold] === void 0) {
            return false;
          }
          if (limit === void 0) {
            return thresholds[threshold];
          }
          thresholds[threshold] = limit;
          if (threshold === "s") {
            thresholds.ss = limit - 1;
          }
          return true;
        }
        function humanize(argWithSuffix, argThresholds) {
          if (!this.isValid()) {
            return this.localeData().invalidDate();
          }
          var withSuffix = false, th = thresholds, locale2, output;
          if (typeof argWithSuffix === "object") {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
          }
          if (typeof argWithSuffix === "boolean") {
            withSuffix = argWithSuffix;
          }
          if (typeof argThresholds === "object") {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
              th.ss = argThresholds.s - 1;
            }
          }
          locale2 = this.localeData();
          output = relativeTime$1(this, !withSuffix, th, locale2);
          if (withSuffix) {
            output = locale2.pastFuture(+this, output);
          }
          return locale2.postformat(output);
        }
        var abs$1 = Math.abs;
        function sign(x2) {
          return (x2 > 0) - (x2 < 0) || +x2;
        }
        function toISOString$1() {
          if (!this.isValid()) {
            return this.localeData().invalidDate();
          }
          var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s2, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
          if (!total) {
            return "P0D";
          }
          minutes2 = absFloor(seconds2 / 60);
          hours2 = absFloor(minutes2 / 60);
          seconds2 %= 60;
          minutes2 %= 60;
          years2 = absFloor(months2 / 12);
          months2 %= 12;
          s2 = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
          totalSign = total < 0 ? "-" : "";
          ymSign = sign(this._months) !== sign(total) ? "-" : "";
          daysSign = sign(this._days) !== sign(total) ? "-" : "";
          hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
          return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s2 + "S" : "");
        }
        var proto$2 = Duration.prototype;
        proto$2.isValid = isValid$1;
        proto$2.abs = abs;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asQuarters = asQuarters;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale;
        proto$2.localeData = localeData;
        proto$2.toIsoString = deprecate(
          "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
          toISOString$1
        );
        proto$2.lang = lang;
        addFormatToken("X", 0, 0, "unix");
        addFormatToken("x", 0, 0, "valueOf");
        addRegexToken("x", matchSigned);
        addRegexToken("X", matchTimestamp);
        addParseToken("X", function(input, array, config2) {
          config2._d = new Date(parseFloat(input) * 1e3);
        });
        addParseToken("x", function(input, array, config2) {
          config2._d = new Date(toInt2(input));
        });
        hooks.version = "2.29.1";
        setHookCallback(createLocal);
        hooks.fn = proto;
        hooks.min = min;
        hooks.max = max;
        hooks.now = now;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;
        hooks.HTML5_FMT = {
          DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
          // <input type="datetime-local" />
          DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
          // <input type="datetime-local" step="1" />
          DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
          // <input type="datetime-local" step="0.001" />
          DATE: "YYYY-MM-DD",
          // <input type="date" />
          TIME: "HH:mm",
          // <input type="time" />
          TIME_SECONDS: "HH:mm:ss",
          // <input type="time" step="1" />
          TIME_MS: "HH:mm:ss.SSS",
          // <input type="time" step="0.001" />
          WEEK: "GGGG-[W]WW",
          // <input type="week" />
          MONTH: "YYYY-MM"
          // <input type="month" />
        };
        return hooks;
      });
    }
  });

  // node_modules/color-name/index.js
  var require_color_name = __commonJS({
    "node_modules/color-name/index.js"(exports, module) {
      "use strict";
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/color-convert/conversions.js
  var require_conversions = __commonJS({
    "node_modules/color-convert/conversions.js"(exports, module) {
      var cssKeywords = require_color_name();
      var reverseKeywords = {};
      for (const key of Object.keys(cssKeywords)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
      var convert2 = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      module.exports = convert2;
      for (const model of Object.keys(convert2)) {
        if (!("channels" in convert2[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert2[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert2[model].labels.length !== convert2[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        const { channels, labels } = convert2[model];
        delete convert2[model].channels;
        delete convert2[model].labels;
        Object.defineProperty(convert2[model], "channels", { value: channels });
        Object.defineProperty(convert2[model], "labels", { value: labels });
      }
      convert2.rgb.hsl = function(rgb) {
        const r2 = rgb[0] / 255;
        const g2 = rgb[1] / 255;
        const b2 = rgb[2] / 255;
        const min = Math.min(r2, g2, b2);
        const max = Math.max(r2, g2, b2);
        const delta = max - min;
        let h2;
        let s2;
        if (max === min) {
          h2 = 0;
        } else if (r2 === max) {
          h2 = (g2 - b2) / delta;
        } else if (g2 === max) {
          h2 = 2 + (b2 - r2) / delta;
        } else if (b2 === max) {
          h2 = 4 + (r2 - g2) / delta;
        }
        h2 = Math.min(h2 * 60, 360);
        if (h2 < 0) {
          h2 += 360;
        }
        const l2 = (min + max) / 2;
        if (max === min) {
          s2 = 0;
        } else if (l2 <= 0.5) {
          s2 = delta / (max + min);
        } else {
          s2 = delta / (2 - max - min);
        }
        return [h2, s2 * 100, l2 * 100];
      };
      convert2.rgb.hsv = function(rgb) {
        let rdif;
        let gdif;
        let bdif;
        let h2;
        let s2;
        const r2 = rgb[0] / 255;
        const g2 = rgb[1] / 255;
        const b2 = rgb[2] / 255;
        const v2 = Math.max(r2, g2, b2);
        const diff = v2 - Math.min(r2, g2, b2);
        const diffc = function(c2) {
          return (v2 - c2) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h2 = 0;
          s2 = 0;
        } else {
          s2 = diff / v2;
          rdif = diffc(r2);
          gdif = diffc(g2);
          bdif = diffc(b2);
          if (r2 === v2) {
            h2 = bdif - gdif;
          } else if (g2 === v2) {
            h2 = 1 / 3 + rdif - bdif;
          } else if (b2 === v2) {
            h2 = 2 / 3 + gdif - rdif;
          }
          if (h2 < 0) {
            h2 += 1;
          } else if (h2 > 1) {
            h2 -= 1;
          }
        }
        return [
          h2 * 360,
          s2 * 100,
          v2 * 100
        ];
      };
      convert2.rgb.hwb = function(rgb) {
        const r2 = rgb[0];
        const g2 = rgb[1];
        let b2 = rgb[2];
        const h2 = convert2.rgb.hsl(rgb)[0];
        const w3 = 1 / 255 * Math.min(r2, Math.min(g2, b2));
        b2 = 1 - 1 / 255 * Math.max(r2, Math.max(g2, b2));
        return [h2, w3 * 100, b2 * 100];
      };
      convert2.rgb.cmyk = function(rgb) {
        const r2 = rgb[0] / 255;
        const g2 = rgb[1] / 255;
        const b2 = rgb[2] / 255;
        const k2 = Math.min(1 - r2, 1 - g2, 1 - b2);
        const c2 = (1 - r2 - k2) / (1 - k2) || 0;
        const m = (1 - g2 - k2) / (1 - k2) || 0;
        const y2 = (1 - b2 - k2) / (1 - k2) || 0;
        return [c2 * 100, m * 100, y2 * 100, k2 * 100];
      };
      function comparativeDistance(x2, y2) {
        return (x2[0] - y2[0]) ** 2 + (x2[1] - y2[1]) ** 2 + (x2[2] - y2[2]) ** 2;
      }
      convert2.rgb.keyword = function(rgb) {
        const reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        let currentClosestDistance = Infinity;
        let currentClosestKeyword;
        for (const keyword of Object.keys(cssKeywords)) {
          const value = cssKeywords[keyword];
          const distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
        return currentClosestKeyword;
      };
      convert2.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert2.rgb.xyz = function(rgb) {
        let r2 = rgb[0] / 255;
        let g2 = rgb[1] / 255;
        let b2 = rgb[2] / 255;
        r2 = r2 > 0.04045 ? ((r2 + 0.055) / 1.055) ** 2.4 : r2 / 12.92;
        g2 = g2 > 0.04045 ? ((g2 + 0.055) / 1.055) ** 2.4 : g2 / 12.92;
        b2 = b2 > 0.04045 ? ((b2 + 0.055) / 1.055) ** 2.4 : b2 / 12.92;
        const x2 = r2 * 0.4124 + g2 * 0.3576 + b2 * 0.1805;
        const y2 = r2 * 0.2126 + g2 * 0.7152 + b2 * 0.0722;
        const z2 = r2 * 0.0193 + g2 * 0.1192 + b2 * 0.9505;
        return [x2 * 100, y2 * 100, z2 * 100];
      };
      convert2.rgb.lab = function(rgb) {
        const xyz = convert2.rgb.xyz(rgb);
        let x2 = xyz[0];
        let y2 = xyz[1];
        let z2 = xyz[2];
        x2 /= 95.047;
        y2 /= 100;
        z2 /= 108.883;
        x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
        y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
        z2 = z2 > 8856e-6 ? z2 ** (1 / 3) : 7.787 * z2 + 16 / 116;
        const l2 = 116 * y2 - 16;
        const a2 = 500 * (x2 - y2);
        const b2 = 200 * (y2 - z2);
        return [l2, a2, b2];
      };
      convert2.hsl.rgb = function(hsl) {
        const h2 = hsl[0] / 360;
        const s2 = hsl[1] / 100;
        const l2 = hsl[2] / 100;
        let t2;
        let t3;
        let val;
        if (s2 === 0) {
          val = l2 * 255;
          return [val, val, val];
        }
        if (l2 < 0.5) {
          t2 = l2 * (1 + s2);
        } else {
          t2 = l2 + s2 - l2 * s2;
        }
        const t1 = 2 * l2 - t2;
        const rgb = [0, 0, 0];
        for (let i2 = 0; i2 < 3; i2++) {
          t3 = h2 + 1 / 3 * -(i2 - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i2] = val * 255;
        }
        return rgb;
      };
      convert2.hsl.hsv = function(hsl) {
        const h2 = hsl[0];
        let s2 = hsl[1] / 100;
        let l2 = hsl[2] / 100;
        let smin = s2;
        const lmin = Math.max(l2, 0.01);
        l2 *= 2;
        s2 *= l2 <= 1 ? l2 : 2 - l2;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        const v2 = (l2 + s2) / 2;
        const sv = l2 === 0 ? 2 * smin / (lmin + smin) : 2 * s2 / (l2 + s2);
        return [h2, sv * 100, v2 * 100];
      };
      convert2.hsv.rgb = function(hsv) {
        const h2 = hsv[0] / 60;
        const s2 = hsv[1] / 100;
        let v2 = hsv[2] / 100;
        const hi = Math.floor(h2) % 6;
        const f = h2 - Math.floor(h2);
        const p2 = 255 * v2 * (1 - s2);
        const q2 = 255 * v2 * (1 - s2 * f);
        const t2 = 255 * v2 * (1 - s2 * (1 - f));
        v2 *= 255;
        switch (hi) {
          case 0:
            return [v2, t2, p2];
          case 1:
            return [q2, v2, p2];
          case 2:
            return [p2, v2, t2];
          case 3:
            return [p2, q2, v2];
          case 4:
            return [t2, p2, v2];
          case 5:
            return [v2, p2, q2];
        }
      };
      convert2.hsv.hsl = function(hsv) {
        const h2 = hsv[0];
        const s2 = hsv[1] / 100;
        const v2 = hsv[2] / 100;
        const vmin = Math.max(v2, 0.01);
        let sl;
        let l2;
        l2 = (2 - s2) * v2;
        const lmin = (2 - s2) * vmin;
        sl = s2 * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l2 /= 2;
        return [h2, sl * 100, l2 * 100];
      };
      convert2.hwb.rgb = function(hwb) {
        const h2 = hwb[0] / 360;
        let wh = hwb[1] / 100;
        let bl = hwb[2] / 100;
        const ratio = wh + bl;
        let f;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        const i2 = Math.floor(6 * h2);
        const v2 = 1 - bl;
        f = 6 * h2 - i2;
        if ((i2 & 1) !== 0) {
          f = 1 - f;
        }
        const n2 = wh + f * (v2 - wh);
        let r2;
        let g2;
        let b2;
        switch (i2) {
          default:
          case 6:
          case 0:
            r2 = v2;
            g2 = n2;
            b2 = wh;
            break;
          case 1:
            r2 = n2;
            g2 = v2;
            b2 = wh;
            break;
          case 2:
            r2 = wh;
            g2 = v2;
            b2 = n2;
            break;
          case 3:
            r2 = wh;
            g2 = n2;
            b2 = v2;
            break;
          case 4:
            r2 = n2;
            g2 = wh;
            b2 = v2;
            break;
          case 5:
            r2 = v2;
            g2 = wh;
            b2 = n2;
            break;
        }
        return [r2 * 255, g2 * 255, b2 * 255];
      };
      convert2.cmyk.rgb = function(cmyk) {
        const c2 = cmyk[0] / 100;
        const m = cmyk[1] / 100;
        const y2 = cmyk[2] / 100;
        const k2 = cmyk[3] / 100;
        const r2 = 1 - Math.min(1, c2 * (1 - k2) + k2);
        const g2 = 1 - Math.min(1, m * (1 - k2) + k2);
        const b2 = 1 - Math.min(1, y2 * (1 - k2) + k2);
        return [r2 * 255, g2 * 255, b2 * 255];
      };
      convert2.xyz.rgb = function(xyz) {
        const x2 = xyz[0] / 100;
        const y2 = xyz[1] / 100;
        const z2 = xyz[2] / 100;
        let r2;
        let g2;
        let b2;
        r2 = x2 * 3.2406 + y2 * -1.5372 + z2 * -0.4986;
        g2 = x2 * -0.9689 + y2 * 1.8758 + z2 * 0.0415;
        b2 = x2 * 0.0557 + y2 * -0.204 + z2 * 1.057;
        r2 = r2 > 31308e-7 ? 1.055 * r2 ** (1 / 2.4) - 0.055 : r2 * 12.92;
        g2 = g2 > 31308e-7 ? 1.055 * g2 ** (1 / 2.4) - 0.055 : g2 * 12.92;
        b2 = b2 > 31308e-7 ? 1.055 * b2 ** (1 / 2.4) - 0.055 : b2 * 12.92;
        r2 = Math.min(Math.max(0, r2), 1);
        g2 = Math.min(Math.max(0, g2), 1);
        b2 = Math.min(Math.max(0, b2), 1);
        return [r2 * 255, g2 * 255, b2 * 255];
      };
      convert2.xyz.lab = function(xyz) {
        let x2 = xyz[0];
        let y2 = xyz[1];
        let z2 = xyz[2];
        x2 /= 95.047;
        y2 /= 100;
        z2 /= 108.883;
        x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
        y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
        z2 = z2 > 8856e-6 ? z2 ** (1 / 3) : 7.787 * z2 + 16 / 116;
        const l2 = 116 * y2 - 16;
        const a2 = 500 * (x2 - y2);
        const b2 = 200 * (y2 - z2);
        return [l2, a2, b2];
      };
      convert2.lab.xyz = function(lab) {
        const l2 = lab[0];
        const a2 = lab[1];
        const b2 = lab[2];
        let x2;
        let y2;
        let z2;
        y2 = (l2 + 16) / 116;
        x2 = a2 / 500 + y2;
        z2 = y2 - b2 / 200;
        const y22 = y2 ** 3;
        const x22 = x2 ** 3;
        const z22 = z2 ** 3;
        y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
        x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
        z2 = z22 > 8856e-6 ? z22 : (z2 - 16 / 116) / 7.787;
        x2 *= 95.047;
        y2 *= 100;
        z2 *= 108.883;
        return [x2, y2, z2];
      };
      convert2.lab.lch = function(lab) {
        const l2 = lab[0];
        const a2 = lab[1];
        const b2 = lab[2];
        let h2;
        const hr = Math.atan2(b2, a2);
        h2 = hr * 360 / 2 / Math.PI;
        if (h2 < 0) {
          h2 += 360;
        }
        const c2 = Math.sqrt(a2 * a2 + b2 * b2);
        return [l2, c2, h2];
      };
      convert2.lch.lab = function(lch) {
        const l2 = lch[0];
        const c2 = lch[1];
        const h2 = lch[2];
        const hr = h2 / 360 * 2 * Math.PI;
        const a2 = c2 * Math.cos(hr);
        const b2 = c2 * Math.sin(hr);
        return [l2, a2, b2];
      };
      convert2.rgb.ansi16 = function(args, saturation = null) {
        const [r2, g2, b2] = args;
        let value = saturation === null ? convert2.rgb.hsv(args)[2] : saturation;
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        let ansi = 30 + (Math.round(b2 / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r2 / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert2.hsv.ansi16 = function(args) {
        return convert2.rgb.ansi16(convert2.hsv.rgb(args), args[2]);
      };
      convert2.rgb.ansi256 = function(args) {
        const r2 = args[0];
        const g2 = args[1];
        const b2 = args[2];
        if (r2 === g2 && g2 === b2) {
          if (r2 < 8) {
            return 16;
          }
          if (r2 > 248) {
            return 231;
          }
          return Math.round((r2 - 8) / 247 * 24) + 232;
        }
        const ansi = 16 + 36 * Math.round(r2 / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b2 / 255 * 5);
        return ansi;
      };
      convert2.ansi16.rgb = function(args) {
        let color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        const mult = (~~(args > 50) + 1) * 0.5;
        const r2 = (color & 1) * mult * 255;
        const g2 = (color >> 1 & 1) * mult * 255;
        const b2 = (color >> 2 & 1) * mult * 255;
        return [r2, g2, b2];
      };
      convert2.ansi256.rgb = function(args) {
        if (args >= 232) {
          const c2 = (args - 232) * 10 + 8;
          return [c2, c2, c2];
        }
        args -= 16;
        let rem;
        const r2 = Math.floor(args / 36) / 5 * 255;
        const g2 = Math.floor((rem = args % 36) / 6) / 5 * 255;
        const b2 = rem % 6 / 5 * 255;
        return [r2, g2, b2];
      };
      convert2.rgb.hex = function(args) {
        const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert2.hex.rgb = function(args) {
        const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        let colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map((char) => {
            return char + char;
          }).join("");
        }
        const integer = parseInt(colorString, 16);
        const r2 = integer >> 16 & 255;
        const g2 = integer >> 8 & 255;
        const b2 = integer & 255;
        return [r2, g2, b2];
      };
      convert2.rgb.hcg = function(rgb) {
        const r2 = rgb[0] / 255;
        const g2 = rgb[1] / 255;
        const b2 = rgb[2] / 255;
        const max = Math.max(Math.max(r2, g2), b2);
        const min = Math.min(Math.min(r2, g2), b2);
        const chroma = max - min;
        let grayscale;
        let hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r2) {
          hue = (g2 - b2) / chroma % 6;
        } else if (max === g2) {
          hue = 2 + (b2 - r2) / chroma;
        } else {
          hue = 4 + (r2 - g2) / chroma;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert2.hsl.hcg = function(hsl) {
        const s2 = hsl[1] / 100;
        const l2 = hsl[2] / 100;
        const c2 = l2 < 0.5 ? 2 * s2 * l2 : 2 * s2 * (1 - l2);
        let f = 0;
        if (c2 < 1) {
          f = (l2 - 0.5 * c2) / (1 - c2);
        }
        return [hsl[0], c2 * 100, f * 100];
      };
      convert2.hsv.hcg = function(hsv) {
        const s2 = hsv[1] / 100;
        const v2 = hsv[2] / 100;
        const c2 = s2 * v2;
        let f = 0;
        if (c2 < 1) {
          f = (v2 - c2) / (1 - c2);
        }
        return [hsv[0], c2 * 100, f * 100];
      };
      convert2.hcg.rgb = function(hcg) {
        const h2 = hcg[0] / 360;
        const c2 = hcg[1] / 100;
        const g2 = hcg[2] / 100;
        if (c2 === 0) {
          return [g2 * 255, g2 * 255, g2 * 255];
        }
        const pure = [0, 0, 0];
        const hi = h2 % 1 * 6;
        const v2 = hi % 1;
        const w3 = 1 - v2;
        let mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v2;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w3;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v2;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w3;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v2;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w3;
        }
        mg = (1 - c2) * g2;
        return [
          (c2 * pure[0] + mg) * 255,
          (c2 * pure[1] + mg) * 255,
          (c2 * pure[2] + mg) * 255
        ];
      };
      convert2.hcg.hsv = function(hcg) {
        const c2 = hcg[1] / 100;
        const g2 = hcg[2] / 100;
        const v2 = c2 + g2 * (1 - c2);
        let f = 0;
        if (v2 > 0) {
          f = c2 / v2;
        }
        return [hcg[0], f * 100, v2 * 100];
      };
      convert2.hcg.hsl = function(hcg) {
        const c2 = hcg[1] / 100;
        const g2 = hcg[2] / 100;
        const l2 = g2 * (1 - c2) + 0.5 * c2;
        let s2 = 0;
        if (l2 > 0 && l2 < 0.5) {
          s2 = c2 / (2 * l2);
        } else if (l2 >= 0.5 && l2 < 1) {
          s2 = c2 / (2 * (1 - l2));
        }
        return [hcg[0], s2 * 100, l2 * 100];
      };
      convert2.hcg.hwb = function(hcg) {
        const c2 = hcg[1] / 100;
        const g2 = hcg[2] / 100;
        const v2 = c2 + g2 * (1 - c2);
        return [hcg[0], (v2 - c2) * 100, (1 - v2) * 100];
      };
      convert2.hwb.hcg = function(hwb) {
        const w3 = hwb[1] / 100;
        const b2 = hwb[2] / 100;
        const v2 = 1 - b2;
        const c2 = v2 - w3;
        let g2 = 0;
        if (c2 < 1) {
          g2 = (v2 - c2) / (1 - c2);
        }
        return [hwb[0], c2 * 100, g2 * 100];
      };
      convert2.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert2.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert2.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert2.gray.hsl = function(args) {
        return [0, 0, args[0]];
      };
      convert2.gray.hsv = convert2.gray.hsl;
      convert2.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert2.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert2.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert2.gray.hex = function(gray) {
        const val = Math.round(gray[0] / 100 * 255) & 255;
        const integer = (val << 16) + (val << 8) + val;
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert2.rgb.gray = function(rgb) {
        const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // node_modules/color-convert/route.js
  var require_route = __commonJS({
    "node_modules/color-convert/route.js"(exports, module) {
      var conversions = require_conversions();
      function buildGraph() {
        const graph = {};
        const models = Object.keys(conversions);
        for (let len = models.length, i2 = 0; i2 < len; i2++) {
          graph[models[i2]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        const graph = buildGraph();
        const queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          const current = queue.pop();
          const adjacents = Object.keys(conversions[current]);
          for (let len = adjacents.length, i2 = 0; i2 < len; i2++) {
            const adjacent = adjacents[i2];
            const node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        const path = [graph[toModel].parent, toModel];
        let fn = conversions[graph[toModel].parent][toModel];
        let cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      module.exports = function(fromModel) {
        const graph = deriveBFS(fromModel);
        const conversion = {};
        const models = Object.keys(graph);
        for (let len = models.length, i2 = 0; i2 < len; i2++) {
          const toModel = models[i2];
          const node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // node_modules/color-convert/index.js
  var require_color_convert = __commonJS({
    "node_modules/color-convert/index.js"(exports, module) {
      var conversions = require_conversions();
      var route = require_route();
      var convert2 = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          const result = fn(args);
          if (typeof result === "object") {
            for (let len = result.length, i2 = 0; i2 < len; i2++) {
              result[i2] = Math.round(result[i2]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach((fromModel) => {
        convert2[fromModel] = {};
        Object.defineProperty(convert2[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert2[fromModel], "labels", { value: conversions[fromModel].labels });
        const routes = route(fromModel);
        const routeModels = Object.keys(routes);
        routeModels.forEach((toModel) => {
          const fn = routes[toModel];
          convert2[fromModel][toModel] = wrapRounded(fn);
          convert2[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module.exports = convert2;
    }
  });

  // node_modules/ansi-styles/index.js
  var require_ansi_styles = __commonJS({
    "node_modules/ansi-styles/index.js"(exports, module) {
      "use strict";
      var wrapAnsi16 = (fn, offset) => (...args) => {
        const code = fn(...args);
        return `\x1B[${code + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => (...args) => {
        const code = fn(...args);
        return `\x1B[${38 + offset};5;${code}m`;
      };
      var wrapAnsi16m = (fn, offset) => (...args) => {
        const rgb = fn(...args);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      var ansi2ansi = (n2) => n2;
      var rgb2rgb = (r2, g2, b2) => [r2, g2, b2];
      var setLazyProperty = (object, property, get2) => {
        Object.defineProperty(object, property, {
          get: () => {
            const value = get2();
            Object.defineProperty(object, property, {
              value,
              enumerable: true,
              configurable: true
            });
            return value;
          },
          enumerable: true,
          configurable: true
        });
      };
      var colorConvert;
      var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
        if (colorConvert === void 0) {
          colorConvert = require_color_convert();
        }
        const offset = isBackground ? 10 : 0;
        const styles2 = {};
        for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
          const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
          if (sourceSpace === targetSpace) {
            styles2[name] = wrap(identity, offset);
          } else if (typeof suite === "object") {
            styles2[name] = wrap(suite[targetSpace], offset);
          }
        }
        return styles2;
      };
      function assembleStyles() {
        const codes = /* @__PURE__ */ new Map();
        const styles2 = {
          modifier: {
            reset: [0, 0],
            // 21 isn't widely supported and 22 does the same thing
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            // Bright color
            blackBright: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            // Bright color
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles2.color.gray = styles2.color.blackBright;
        styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright;
        styles2.color.grey = styles2.color.blackBright;
        styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
        for (const [groupName, group] of Object.entries(styles2)) {
          for (const [styleName, style] of Object.entries(group)) {
            styles2[styleName] = {
              open: `\x1B[${style[0]}m`,
              close: `\x1B[${style[1]}m`
            };
            group[styleName] = styles2[styleName];
            codes.set(style[0], style[1]);
          }
          Object.defineProperty(styles2, groupName, {
            value: group,
            enumerable: false
          });
        }
        Object.defineProperty(styles2, "codes", {
          value: codes,
          enumerable: false
        });
        styles2.color.close = "\x1B[39m";
        styles2.bgColor.close = "\x1B[49m";
        setLazyProperty(styles2.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
        setLazyProperty(styles2.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
        setLazyProperty(styles2.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
        setLazyProperty(styles2.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
        setLazyProperty(styles2.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
        setLazyProperty(styles2.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
        return styles2;
      }
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });

  // node_modules/supports-color/browser.js
  var require_browser = __commonJS({
    "node_modules/supports-color/browser.js"(exports, module) {
      "use strict";
      module.exports = {
        stdout: false,
        stderr: false
      };
    }
  });

  // node_modules/chalk/source/util.js
  var require_util = __commonJS({
    "node_modules/chalk/source/util.js"(exports, module) {
      "use strict";
      var stringReplaceAll = (string, substring, replacer) => {
        let index2 = string.indexOf(substring);
        if (index2 === -1) {
          return string;
        }
        const substringLength = substring.length;
        let endIndex = 0;
        let returnValue = "";
        do {
          returnValue += string.substr(endIndex, index2 - endIndex) + substring + replacer;
          endIndex = index2 + substringLength;
          index2 = string.indexOf(substring, endIndex);
        } while (index2 !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index2) => {
        let endIndex = 0;
        let returnValue = "";
        do {
          const gotCR = string[index2 - 1] === "\r";
          returnValue += string.substr(endIndex, (gotCR ? index2 - 1 : index2) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
          endIndex = index2 + 1;
          index2 = string.indexOf("\n", endIndex);
        } while (index2 !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      module.exports = {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      };
    }
  });

  // node_modules/chalk/source/templates.js
  var require_templates = __commonJS({
    "node_modules/chalk/source/templates.js"(exports, module) {
      "use strict";
      var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = /* @__PURE__ */ new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "	"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\x1B"],
        ["a", "\x07"]
      ]);
      function unescape(c2) {
        const u2 = c2[0] === "u";
        const bracket = c2[1] === "{";
        if (u2 && !bracket && c2.length === 5 || c2[0] === "x" && c2.length === 3) {
          return String.fromCharCode(parseInt(c2.slice(1), 16));
        }
        if (u2 && bracket) {
          return String.fromCodePoint(parseInt(c2.slice(2, -1), 16));
        }
        return ESCAPES.get(c2) || c2;
      }
      function parseArguments(name, arguments_) {
        const results = [];
        const chunks = arguments_.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          const number = Number(chunk);
          if (!Number.isNaN(number)) {
            results.push(number);
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1];
          if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([name].concat(args));
          } else {
            results.push([name]);
          }
        }
        return results;
      }
      function buildStyle(chalk2, styles2) {
        const enabled = {};
        for (const layer of styles2) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk2;
        for (const [styleName, styles3] of Object.entries(enabled)) {
          if (!Array.isArray(styles3)) {
            continue;
          }
          if (!(styleName in current)) {
            throw new Error(`Unknown Chalk style: ${styleName}`);
          }
          current = styles3.length > 0 ? current[styleName](...styles3) : current[styleName];
        }
        return current;
      }
      module.exports = (chalk2, temporary) => {
        const styles2 = [];
        const chunks = [];
        let chunk = [];
        temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
          if (escapeCharacter) {
            chunk.push(unescape(escapeCharacter));
          } else if (style) {
            const string = chunk.join("");
            chunk = [];
            chunks.push(styles2.length === 0 ? string : buildStyle(chalk2, styles2)(string));
            styles2.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles2.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk2, styles2)(chunk.join("")));
            chunk = [];
            styles2.pop();
          } else {
            chunk.push(character);
          }
        });
        chunks.push(chunk.join(""));
        if (styles2.length > 0) {
          const errMessage = `Chalk template literal is missing ${styles2.length} closing bracket${styles2.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMessage);
        }
        return chunks.join("");
      };
    }
  });

  // node_modules/chalk/source/index.js
  var require_source = __commonJS({
    "node_modules/chalk/source/index.js"(exports, module) {
      "use strict";
      var ansiStyles = require_ansi_styles();
      var { stdout: stdoutColor, stderr: stderrColor } = require_browser();
      var {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      } = require_util();
      var { isArray } = Array;
      var levelMapping = [
        "ansi",
        "ansi",
        "ansi256",
        "ansi16m"
      ];
      var styles2 = /* @__PURE__ */ Object.create(null);
      var applyOptions = (object, options = {}) => {
        if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
          throw new Error("The `level` option should be an integer from 0 to 3");
        }
        const colorLevel = stdoutColor ? stdoutColor.level : 0;
        object.level = options.level === void 0 ? colorLevel : options.level;
      };
      var ChalkClass = class {
        constructor(options) {
          return chalkFactory(options);
        }
      };
      var chalkFactory = (options) => {
        const chalk3 = {};
        applyOptions(chalk3, options);
        chalk3.template = (...arguments_) => chalkTag(chalk3.template, ...arguments_);
        Object.setPrototypeOf(chalk3, Chalk.prototype);
        Object.setPrototypeOf(chalk3.template, chalk3);
        chalk3.template.constructor = () => {
          throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
        };
        chalk3.template.Instance = ChalkClass;
        return chalk3.template;
      };
      function Chalk(options) {
        return chalkFactory(options);
      }
      for (const [styleName, style] of Object.entries(ansiStyles)) {
        styles2[styleName] = {
          get() {
            const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
            Object.defineProperty(this, styleName, { value: builder });
            return builder;
          }
        };
      }
      styles2.visible = {
        get() {
          const builder = createBuilder(this, this._styler, true);
          Object.defineProperty(this, "visible", { value: builder });
          return builder;
        }
      };
      var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
      for (const model of usedModels) {
        styles2[model] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      for (const model of usedModels) {
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles2[bgModel] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, {
        ...styles2,
        level: {
          enumerable: true,
          get() {
            return this._generator.level;
          },
          set(level) {
            this._generator.level = level;
          }
        }
      });
      var createStyler = (open, close, parent) => {
        let openAll;
        let closeAll;
        if (parent === void 0) {
          openAll = open;
          closeAll = close;
        } else {
          openAll = parent.openAll + open;
          closeAll = close + parent.closeAll;
        }
        return {
          open,
          close,
          openAll,
          closeAll,
          parent
        };
      };
      var createBuilder = (self2, _styler, _isEmpty) => {
        const builder = (...arguments_) => {
          if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
            return applyStyle(builder, chalkTag(builder, ...arguments_));
          }
          return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
        };
        Object.setPrototypeOf(builder, proto);
        builder._generator = self2;
        builder._styler = _styler;
        builder._isEmpty = _isEmpty;
        return builder;
      };
      var applyStyle = (self2, string) => {
        if (self2.level <= 0 || !string) {
          return self2._isEmpty ? "" : string;
        }
        let styler = self2._styler;
        if (styler === void 0) {
          return string;
        }
        const { openAll, closeAll } = styler;
        if (string.indexOf("\x1B") !== -1) {
          while (styler !== void 0) {
            string = stringReplaceAll(string, styler.close, styler.open);
            styler = styler.parent;
          }
        }
        const lfIndex = string.indexOf("\n");
        if (lfIndex !== -1) {
          string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
        }
        return openAll + string + closeAll;
      };
      var template;
      var chalkTag = (chalk3, ...strings) => {
        const [firstString] = strings;
        if (!isArray(firstString) || !isArray(firstString.raw)) {
          return strings.join(" ");
        }
        const arguments_ = strings.slice(1);
        const parts = [firstString.raw[0]];
        for (let i2 = 1; i2 < firstString.length; i2++) {
          parts.push(
            String(arguments_[i2 - 1]).replace(/[{}\\]/g, "\\$&"),
            String(firstString.raw[i2])
          );
        }
        if (template === void 0) {
          template = require_templates();
        }
        return template(chalk3, parts.join(""));
      };
      Object.defineProperties(Chalk.prototype, styles2);
      var chalk2 = Chalk();
      chalk2.supportsColor = stdoutColor;
      chalk2.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
      chalk2.stderr.supportsColor = stderrColor;
      module.exports = chalk2;
    }
  });

  // node_modules/events/events.js
  var require_events = __commonJS({
    "node_modules/events/events.js"(exports, module) {
      "use strict";
      var R2 = typeof Reflect === "object" ? Reflect : null;
      var ReflectApply = R2 && typeof R2.apply === "function" ? R2.apply : function ReflectApply2(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      };
      var ReflectOwnKeys;
      if (R2 && typeof R2.ownKeys === "function") {
        ReflectOwnKeys = R2.ownKeys;
      } else if (Object.getOwnPropertySymbols) {
        ReflectOwnKeys = function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
        };
      } else {
        ReflectOwnKeys = function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target);
        };
      }
      function ProcessEmitWarning(warning) {
        if (console && console.warn)
          console.warn(warning);
      }
      var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
        return value !== value;
      };
      function EventEmitter5() {
        EventEmitter5.init.call(this);
      }
      module.exports = EventEmitter5;
      module.exports.once = once;
      EventEmitter5.EventEmitter = EventEmitter5;
      EventEmitter5.prototype._events = void 0;
      EventEmitter5.prototype._eventsCount = 0;
      EventEmitter5.prototype._maxListeners = void 0;
      var defaultMaxListeners = 10;
      function checkListener(listener3) {
        if (typeof listener3 !== "function") {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener3);
        }
      }
      Object.defineProperty(EventEmitter5, "defaultMaxListeners", {
        enumerable: true,
        get: function() {
          return defaultMaxListeners;
        },
        set: function(arg) {
          if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
          }
          defaultMaxListeners = arg;
        }
      });
      EventEmitter5.init = function() {
        if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        }
        this._maxListeners = this._maxListeners || void 0;
      };
      EventEmitter5.prototype.setMaxListeners = function setMaxListeners(n2) {
        if (typeof n2 !== "number" || n2 < 0 || NumberIsNaN(n2)) {
          throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n2 + ".");
        }
        this._maxListeners = n2;
        return this;
      };
      function _getMaxListeners(that) {
        if (that._maxListeners === void 0)
          return EventEmitter5.defaultMaxListeners;
        return that._maxListeners;
      }
      EventEmitter5.prototype.getMaxListeners = function getMaxListeners() {
        return _getMaxListeners(this);
      };
      EventEmitter5.prototype.emit = function emit(type) {
        var args = [];
        for (var i2 = 1; i2 < arguments.length; i2++)
          args.push(arguments[i2]);
        var doError = type === "error";
        var events = this._events;
        if (events !== void 0)
          doError = doError && events.error === void 0;
        else if (!doError)
          return false;
        if (doError) {
          var er;
          if (args.length > 0)
            er = args[0];
          if (er instanceof Error) {
            throw er;
          }
          var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
          err.context = er;
          throw err;
        }
        var handler = events[type];
        if (handler === void 0)
          return false;
        if (typeof handler === "function") {
          ReflectApply(handler, this, args);
        } else {
          var len = handler.length;
          var listeners = arrayClone(handler, len);
          for (var i2 = 0; i2 < len; ++i2)
            ReflectApply(listeners[i2], this, args);
        }
        return true;
      };
      function _addListener(target, type, listener3, prepend) {
        var m;
        var events;
        var existing;
        checkListener(listener3);
        events = target._events;
        if (events === void 0) {
          events = target._events = /* @__PURE__ */ Object.create(null);
          target._eventsCount = 0;
        } else {
          if (events.newListener !== void 0) {
            target.emit(
              "newListener",
              type,
              listener3.listener ? listener3.listener : listener3
            );
            events = target._events;
          }
          existing = events[type];
        }
        if (existing === void 0) {
          existing = events[type] = listener3;
          ++target._eventsCount;
        } else {
          if (typeof existing === "function") {
            existing = events[type] = prepend ? [listener3, existing] : [existing, listener3];
          } else if (prepend) {
            existing.unshift(listener3);
          } else {
            existing.push(listener3);
          }
          m = _getMaxListeners(target);
          if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            var w3 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            w3.name = "MaxListenersExceededWarning";
            w3.emitter = target;
            w3.type = type;
            w3.count = existing.length;
            ProcessEmitWarning(w3);
          }
        }
        return target;
      }
      EventEmitter5.prototype.addListener = function addListener(type, listener3) {
        return _addListener(this, type, listener3, false);
      };
      EventEmitter5.prototype.on = EventEmitter5.prototype.addListener;
      EventEmitter5.prototype.prependListener = function prependListener(type, listener3) {
        return _addListener(this, type, listener3, true);
      };
      function onceWrapper() {
        if (!this.fired) {
          this.target.removeListener(this.type, this.wrapFn);
          this.fired = true;
          if (arguments.length === 0)
            return this.listener.call(this.target);
          return this.listener.apply(this.target, arguments);
        }
      }
      function _onceWrap(target, type, listener3) {
        var state = { fired: false, wrapFn: void 0, target, type, listener: listener3 };
        var wrapped = onceWrapper.bind(state);
        wrapped.listener = listener3;
        state.wrapFn = wrapped;
        return wrapped;
      }
      EventEmitter5.prototype.once = function once2(type, listener3) {
        checkListener(listener3);
        this.on(type, _onceWrap(this, type, listener3));
        return this;
      };
      EventEmitter5.prototype.prependOnceListener = function prependOnceListener(type, listener3) {
        checkListener(listener3);
        this.prependListener(type, _onceWrap(this, type, listener3));
        return this;
      };
      EventEmitter5.prototype.removeListener = function removeListener(type, listener3) {
        var list, events, position, i2, originalListener;
        checkListener(listener3);
        events = this._events;
        if (events === void 0)
          return this;
        list = events[type];
        if (list === void 0)
          return this;
        if (list === listener3 || list.listener === listener3) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit("removeListener", type, list.listener || listener3);
          }
        } else if (typeof list !== "function") {
          position = -1;
          for (i2 = list.length - 1; i2 >= 0; i2--) {
            if (list[i2] === listener3 || list[i2].listener === listener3) {
              originalListener = list[i2].listener;
              position = i2;
              break;
            }
          }
          if (position < 0)
            return this;
          if (position === 0)
            list.shift();
          else {
            spliceOne(list, position);
          }
          if (list.length === 1)
            events[type] = list[0];
          if (events.removeListener !== void 0)
            this.emit("removeListener", type, originalListener || listener3);
        }
        return this;
      };
      EventEmitter5.prototype.off = EventEmitter5.prototype.removeListener;
      EventEmitter5.prototype.removeAllListeners = function removeAllListeners(type) {
        var listeners, events, i2;
        events = this._events;
        if (events === void 0)
          return this;
        if (events.removeListener === void 0) {
          if (arguments.length === 0) {
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== void 0) {
            if (--this._eventsCount === 0)
              this._events = /* @__PURE__ */ Object.create(null);
            else
              delete events[type];
          }
          return this;
        }
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i2 = 0; i2 < keys.length; ++i2) {
            key = keys[i2];
            if (key === "removeListener")
              continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners("removeListener");
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
          return this;
        }
        listeners = events[type];
        if (typeof listeners === "function") {
          this.removeListener(type, listeners);
        } else if (listeners !== void 0) {
          for (i2 = listeners.length - 1; i2 >= 0; i2--) {
            this.removeListener(type, listeners[i2]);
          }
        }
        return this;
      };
      function _listeners(target, type, unwrap) {
        var events = target._events;
        if (events === void 0)
          return [];
        var evlistener = events[type];
        if (evlistener === void 0)
          return [];
        if (typeof evlistener === "function")
          return unwrap ? [evlistener.listener || evlistener] : [evlistener];
        return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
      }
      EventEmitter5.prototype.listeners = function listeners(type) {
        return _listeners(this, type, true);
      };
      EventEmitter5.prototype.rawListeners = function rawListeners(type) {
        return _listeners(this, type, false);
      };
      EventEmitter5.listenerCount = function(emitter, type) {
        if (typeof emitter.listenerCount === "function") {
          return emitter.listenerCount(type);
        } else {
          return listenerCount.call(emitter, type);
        }
      };
      EventEmitter5.prototype.listenerCount = listenerCount;
      function listenerCount(type) {
        var events = this._events;
        if (events !== void 0) {
          var evlistener = events[type];
          if (typeof evlistener === "function") {
            return 1;
          } else if (evlistener !== void 0) {
            return evlistener.length;
          }
        }
        return 0;
      }
      EventEmitter5.prototype.eventNames = function eventNames() {
        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
      };
      function arrayClone(arr, n2) {
        var copy = new Array(n2);
        for (var i2 = 0; i2 < n2; ++i2)
          copy[i2] = arr[i2];
        return copy;
      }
      function spliceOne(list, index2) {
        for (; index2 + 1 < list.length; index2++)
          list[index2] = list[index2 + 1];
        list.pop();
      }
      function unwrapListeners(arr) {
        var ret2 = new Array(arr.length);
        for (var i2 = 0; i2 < ret2.length; ++i2) {
          ret2[i2] = arr[i2].listener || arr[i2];
        }
        return ret2;
      }
      function once(emitter, name) {
        return new Promise(function(resolve2, reject2) {
          function eventListener() {
            if (errorListener !== void 0) {
              emitter.removeListener("error", errorListener);
            }
            resolve2([].slice.call(arguments));
          }
          ;
          var errorListener;
          if (name !== "error") {
            errorListener = function errorListener2(err) {
              emitter.removeListener(name, eventListener);
              reject2(err);
            };
            emitter.once("error", errorListener);
          }
          emitter.once(name, eventListener);
        });
      }
    }
  });

  // node_modules/frequencyjs/dsp.js
  var require_dsp = __commonJS({
    "node_modules/frequencyjs/dsp.js"(exports, module) {
      var DSP = {
        // Channels
        LEFT: 0,
        RIGHT: 1,
        MIX: 2,
        // Waveforms
        SINE: 1,
        TRIANGLE: 2,
        SAW: 3,
        SQUARE: 4,
        // Filters
        LOWPASS: 0,
        HIGHPASS: 1,
        BANDPASS: 2,
        NOTCH: 3,
        // Window functions
        BARTLETT: 1,
        BARTLETTHANN: 2,
        BLACKMAN: 3,
        COSINE: 4,
        GAUSS: 5,
        HAMMING: 6,
        HANN: 7,
        LANCZOS: 8,
        RECTANGULAR: 9,
        TRIANGULAR: 10,
        // Loop modes
        OFF: 0,
        FW: 1,
        BW: 2,
        FWBW: 3,
        // Math
        TWO_PI: 2 * Math.PI
      };
      function setupTypedArray(name, fallback) {
        if (typeof this[name] !== "function" && typeof this[name] !== "object") {
          if (typeof this[fallback] === "function" && typeof this[fallback] !== "object") {
            this[name] = this[fallback];
          } else {
            this[name] = function(obj) {
              if (obj instanceof Array) {
                return obj;
              } else if (typeof obj === "number") {
                return new Array(obj);
              }
            };
          }
        }
      }
      setupTypedArray("Float32Array", "WebGLFloatArray");
      setupTypedArray("Int32Array", "WebGLIntArray");
      setupTypedArray("Uint16Array", "WebGLUnsignedShortArray");
      setupTypedArray("Uint8Array", "WebGLUnsignedByteArray");
      DSP.invert = function(buffer) {
        for (var i2 = 0, len = buffer.length; i2 < len; i2++) {
          buffer[i2] *= -1;
        }
        return buffer;
      };
      DSP.interleave = function(left, right) {
        if (left.length !== right.length) {
          throw "Can not interleave. Channel lengths differ.";
        }
        var stereoInterleaved = new Float32Array(left.length * 2);
        for (var i2 = 0, len = left.length; i2 < len; i2++) {
          stereoInterleaved[2 * i2] = left[i2];
          stereoInterleaved[2 * i2 + 1] = right[i2];
        }
        return stereoInterleaved;
      };
      DSP.deinterleave = function() {
        var left, right, mix, deinterleaveChannel = [];
        deinterleaveChannel[DSP.MIX] = function(buffer) {
          for (var i2 = 0, len = buffer.length / 2; i2 < len; i2++) {
            mix[i2] = (buffer[2 * i2] + buffer[2 * i2 + 1]) / 2;
          }
          return mix;
        };
        deinterleaveChannel[DSP.LEFT] = function(buffer) {
          for (var i2 = 0, len = buffer.length / 2; i2 < len; i2++) {
            left[i2] = buffer[2 * i2];
          }
          return left;
        };
        deinterleaveChannel[DSP.RIGHT] = function(buffer) {
          for (var i2 = 0, len = buffer.length / 2; i2 < len; i2++) {
            right[i2] = buffer[2 * i2 + 1];
          }
          return right;
        };
        return function(channel, buffer) {
          left = left || new Float32Array(buffer.length / 2);
          right = right || new Float32Array(buffer.length / 2);
          mix = mix || new Float32Array(buffer.length / 2);
          if (buffer.length / 2 !== left.length) {
            left = new Float32Array(buffer.length / 2);
            right = new Float32Array(buffer.length / 2);
            mix = new Float32Array(buffer.length / 2);
          }
          return deinterleaveChannel[channel](buffer);
        };
      }();
      DSP.getChannel = DSP.deinterleave;
      DSP.mixSampleBuffers = function(sampleBuffer1, sampleBuffer2, negate, volumeCorrection) {
        var outputSamples = new Float32Array(sampleBuffer1);
        for (var i2 = 0; i2 < sampleBuffer1.length; i2++) {
          outputSamples[i2] += (negate ? -sampleBuffer2[i2] : sampleBuffer2[i2]) / volumeCorrection;
        }
        return outputSamples;
      };
      DSP.LPF = 0;
      DSP.HPF = 1;
      DSP.BPF_CONSTANT_SKIRT = 2;
      DSP.BPF_CONSTANT_PEAK = 3;
      DSP.NOTCH = 4;
      DSP.APF = 5;
      DSP.PEAKING_EQ = 6;
      DSP.LOW_SHELF = 7;
      DSP.HIGH_SHELF = 8;
      DSP.Q = 1;
      DSP.BW = 2;
      DSP.S = 3;
      DSP.RMS = function(buffer) {
        var total = 0;
        for (var i2 = 0, n2 = buffer.length; i2 < n2; i2++) {
          total += buffer[i2] * buffer[i2];
        }
        return Math.sqrt(total / n2);
      };
      DSP.Peak = function(buffer) {
        var peak = 0;
        for (var i2 = 0, n2 = buffer.length; i2 < n2; i2++) {
          peak = Math.abs(buffer[i2]) > peak ? Math.abs(buffer[i2]) : peak;
        }
        return peak;
      };
      function FourierTransform(bufferSize, sampleRate) {
        this.bufferSize = bufferSize;
        this.sampleRate = sampleRate;
        this.bandwidth = 2 / bufferSize * sampleRate / 2;
        this.spectrum = new Float32Array(bufferSize / 2);
        this.real = new Float32Array(bufferSize);
        this.imag = new Float32Array(bufferSize);
        this.peakBand = 0;
        this.peak = 0;
        this.getBandFrequency = function(index2) {
          return this.bandwidth * index2 + this.bandwidth / 2;
        };
        this.calculateSpectrum = function() {
          var spectrum = this.spectrum, real = this.real, imag = this.imag, bSi = 2 / this.bufferSize, sqrt = Math.sqrt, rval, ival, mag;
          for (var i2 = 0, N2 = bufferSize / 2; i2 < N2; i2++) {
            rval = real[i2];
            ival = imag[i2];
            mag = bSi * sqrt(rval * rval + ival * ival);
            if (mag > this.peak) {
              this.peakBand = i2;
              this.peak = mag;
            }
            spectrum[i2] = mag;
          }
        };
      }
      function DFT(bufferSize, sampleRate) {
        FourierTransform.call(this, bufferSize, sampleRate);
        var N2 = bufferSize / 2 * bufferSize;
        var TWO_PI = 2 * Math.PI;
        this.sinTable = new Float32Array(N2);
        this.cosTable = new Float32Array(N2);
        for (var i2 = 0; i2 < N2; i2++) {
          this.sinTable[i2] = Math.sin(i2 * TWO_PI / bufferSize);
          this.cosTable[i2] = Math.cos(i2 * TWO_PI / bufferSize);
        }
      }
      DFT.prototype.forward = function(buffer) {
        var real = this.real, imag = this.imag, rval, ival;
        for (var k2 = 0; k2 < this.bufferSize / 2; k2++) {
          rval = 0;
          ival = 0;
          for (var n2 = 0; n2 < buffer.length; n2++) {
            rval += this.cosTable[k2 * n2] * buffer[n2];
            ival += this.sinTable[k2 * n2] * buffer[n2];
          }
          real[k2] = rval;
          imag[k2] = ival;
        }
        return this.calculateSpectrum();
      };
      function FFT(bufferSize, sampleRate) {
        FourierTransform.call(this, bufferSize, sampleRate);
        this.reverseTable = new Uint32Array(bufferSize);
        var limit = 1;
        var bit = bufferSize >> 1;
        var i2;
        while (limit < bufferSize) {
          for (i2 = 0; i2 < limit; i2++) {
            this.reverseTable[i2 + limit] = this.reverseTable[i2] + bit;
          }
          limit = limit << 1;
          bit = bit >> 1;
        }
        this.sinTable = new Float32Array(bufferSize);
        this.cosTable = new Float32Array(bufferSize);
        for (i2 = 0; i2 < bufferSize; i2++) {
          this.sinTable[i2] = Math.sin(-Math.PI / i2);
          this.cosTable[i2] = Math.cos(-Math.PI / i2);
        }
      }
      FFT.prototype.forward = function(buffer) {
        var bufferSize = this.bufferSize, cosTable = this.cosTable, sinTable = this.sinTable, reverseTable = this.reverseTable, real = this.real, imag = this.imag, spectrum = this.spectrum;
        var k2 = Math.floor(Math.log(bufferSize) / Math.LN2);
        if (Math.pow(2, k2) !== bufferSize) {
          throw "Invalid buffer size, must be a power of 2.";
        }
        if (bufferSize !== buffer.length) {
          throw "Supplied buffer is not the same size as defined FFT. FFT Size: " + bufferSize + " Buffer Size: " + buffer.length;
        }
        var halfSize = 1, phaseShiftStepReal, phaseShiftStepImag, currentPhaseShiftReal, currentPhaseShiftImag, off, tr, ti, tmpReal, i2;
        for (i2 = 0; i2 < bufferSize; i2++) {
          real[i2] = buffer[reverseTable[i2]];
          imag[i2] = 0;
        }
        while (halfSize < bufferSize) {
          phaseShiftStepReal = cosTable[halfSize];
          phaseShiftStepImag = sinTable[halfSize];
          currentPhaseShiftReal = 1;
          currentPhaseShiftImag = 0;
          for (var fftStep = 0; fftStep < halfSize; fftStep++) {
            i2 = fftStep;
            while (i2 < bufferSize) {
              off = i2 + halfSize;
              tr = currentPhaseShiftReal * real[off] - currentPhaseShiftImag * imag[off];
              ti = currentPhaseShiftReal * imag[off] + currentPhaseShiftImag * real[off];
              real[off] = real[i2] - tr;
              imag[off] = imag[i2] - ti;
              real[i2] += tr;
              imag[i2] += ti;
              i2 += halfSize << 1;
            }
            tmpReal = currentPhaseShiftReal;
            currentPhaseShiftReal = tmpReal * phaseShiftStepReal - currentPhaseShiftImag * phaseShiftStepImag;
            currentPhaseShiftImag = tmpReal * phaseShiftStepImag + currentPhaseShiftImag * phaseShiftStepReal;
          }
          halfSize = halfSize << 1;
        }
        return this.calculateSpectrum();
      };
      FFT.prototype.inverse = function(real, imag) {
        var bufferSize = this.bufferSize, cosTable = this.cosTable, sinTable = this.sinTable, reverseTable = this.reverseTable, spectrum = this.spectrum;
        real = real || this.real;
        imag = imag || this.imag;
        var halfSize = 1, phaseShiftStepReal, phaseShiftStepImag, currentPhaseShiftReal, currentPhaseShiftImag, off, tr, ti, tmpReal, i2;
        for (i2 = 0; i2 < bufferSize; i2++) {
          imag[i2] *= -1;
        }
        var revReal = new Float32Array(bufferSize);
        var revImag = new Float32Array(bufferSize);
        for (i2 = 0; i2 < real.length; i2++) {
          revReal[i2] = real[reverseTable[i2]];
          revImag[i2] = imag[reverseTable[i2]];
        }
        real = revReal;
        imag = revImag;
        while (halfSize < bufferSize) {
          phaseShiftStepReal = cosTable[halfSize];
          phaseShiftStepImag = sinTable[halfSize];
          currentPhaseShiftReal = 1;
          currentPhaseShiftImag = 0;
          for (var fftStep = 0; fftStep < halfSize; fftStep++) {
            i2 = fftStep;
            while (i2 < bufferSize) {
              off = i2 + halfSize;
              tr = currentPhaseShiftReal * real[off] - currentPhaseShiftImag * imag[off];
              ti = currentPhaseShiftReal * imag[off] + currentPhaseShiftImag * real[off];
              real[off] = real[i2] - tr;
              imag[off] = imag[i2] - ti;
              real[i2] += tr;
              imag[i2] += ti;
              i2 += halfSize << 1;
            }
            tmpReal = currentPhaseShiftReal;
            currentPhaseShiftReal = tmpReal * phaseShiftStepReal - currentPhaseShiftImag * phaseShiftStepImag;
            currentPhaseShiftImag = tmpReal * phaseShiftStepImag + currentPhaseShiftImag * phaseShiftStepReal;
          }
          halfSize = halfSize << 1;
        }
        var buffer = new Float32Array(bufferSize);
        for (i2 = 0; i2 < bufferSize; i2++) {
          buffer[i2] = real[i2] / bufferSize;
        }
        return buffer;
      };
      function RFFT(bufferSize, sampleRate) {
        FourierTransform.call(this, bufferSize, sampleRate);
        this.trans = new Float32Array(bufferSize);
        this.reverseTable = new Uint32Array(bufferSize);
        this.reverseBinPermute = function(dest, source) {
          var bufferSize2 = this.bufferSize, halfSize = bufferSize2 >>> 1, nm1 = bufferSize2 - 1, i2 = 1, r2 = 0, h2;
          dest[0] = source[0];
          do {
            r2 += halfSize;
            dest[i2] = source[r2];
            dest[r2] = source[i2];
            i2++;
            h2 = halfSize << 1;
            while (h2 = h2 >> 1, !((r2 ^= h2) & h2))
              ;
            if (r2 >= i2) {
              dest[i2] = source[r2];
              dest[r2] = source[i2];
              dest[nm1 - i2] = source[nm1 - r2];
              dest[nm1 - r2] = source[nm1 - i2];
            }
            i2++;
          } while (i2 < halfSize);
          dest[nm1] = source[nm1];
        };
        this.generateReverseTable = function() {
          var bufferSize2 = this.bufferSize, halfSize = bufferSize2 >>> 1, nm1 = bufferSize2 - 1, i2 = 1, r2 = 0, h2;
          this.reverseTable[0] = 0;
          do {
            r2 += halfSize;
            this.reverseTable[i2] = r2;
            this.reverseTable[r2] = i2;
            i2++;
            h2 = halfSize << 1;
            while (h2 = h2 >> 1, !((r2 ^= h2) & h2))
              ;
            if (r2 >= i2) {
              this.reverseTable[i2] = r2;
              this.reverseTable[r2] = i2;
              this.reverseTable[nm1 - i2] = nm1 - r2;
              this.reverseTable[nm1 - r2] = nm1 - i2;
            }
            i2++;
          } while (i2 < halfSize);
          this.reverseTable[nm1] = nm1;
        };
        this.generateReverseTable();
      }
      RFFT.prototype.forward = function(buffer) {
        var n2 = this.bufferSize, spectrum = this.spectrum, x2 = this.trans, TWO_PI = 2 * Math.PI, sqrt = Math.sqrt, i2 = n2 >>> 1, bSi = 2 / n2, n22, n4, n8, nn, t1, t2, t3, t4, i1, i22, i3, i4, i5, i6, i7, i8, st1, cc1, ss1, cc3, ss3, e2, a2, rval, ival, mag;
        this.reverseBinPermute(x2, buffer);
        for (var ix = 0, id = 4; ix < n2; id *= 4) {
          for (var i0 = ix; i0 < n2; i0 += id) {
            st1 = x2[i0] - x2[i0 + 1];
            x2[i0] += x2[i0 + 1];
            x2[i0 + 1] = st1;
          }
          ix = 2 * (id - 1);
        }
        n22 = 2;
        nn = n2 >>> 1;
        while (nn = nn >>> 1) {
          ix = 0;
          n22 = n22 << 1;
          id = n22 << 1;
          n4 = n22 >>> 2;
          n8 = n22 >>> 3;
          do {
            if (n4 !== 1) {
              for (i0 = ix; i0 < n2; i0 += id) {
                i1 = i0;
                i22 = i1 + n4;
                i3 = i22 + n4;
                i4 = i3 + n4;
                t1 = x2[i3] + x2[i4];
                x2[i4] -= x2[i3];
                x2[i3] = x2[i1] - t1;
                x2[i1] += t1;
                i1 += n8;
                i22 += n8;
                i3 += n8;
                i4 += n8;
                t1 = x2[i3] + x2[i4];
                t2 = x2[i3] - x2[i4];
                t1 = -t1 * Math.SQRT1_2;
                t2 *= Math.SQRT1_2;
                st1 = x2[i22];
                x2[i4] = t1 + st1;
                x2[i3] = t1 - st1;
                x2[i22] = x2[i1] - t2;
                x2[i1] += t2;
              }
            } else {
              for (i0 = ix; i0 < n2; i0 += id) {
                i1 = i0;
                i22 = i1 + n4;
                i3 = i22 + n4;
                i4 = i3 + n4;
                t1 = x2[i3] + x2[i4];
                x2[i4] -= x2[i3];
                x2[i3] = x2[i1] - t1;
                x2[i1] += t1;
              }
            }
            ix = (id << 1) - n22;
            id = id << 2;
          } while (ix < n2);
          e2 = TWO_PI / n22;
          for (var j2 = 1; j2 < n8; j2++) {
            a2 = j2 * e2;
            ss1 = Math.sin(a2);
            cc1 = Math.cos(a2);
            cc3 = 4 * cc1 * (cc1 * cc1 - 0.75);
            ss3 = 4 * ss1 * (0.75 - ss1 * ss1);
            ix = 0;
            id = n22 << 1;
            do {
              for (i0 = ix; i0 < n2; i0 += id) {
                i1 = i0 + j2;
                i22 = i1 + n4;
                i3 = i22 + n4;
                i4 = i3 + n4;
                i5 = i0 + n4 - j2;
                i6 = i5 + n4;
                i7 = i6 + n4;
                i8 = i7 + n4;
                t2 = x2[i7] * cc1 - x2[i3] * ss1;
                t1 = x2[i7] * ss1 + x2[i3] * cc1;
                t4 = x2[i8] * cc3 - x2[i4] * ss3;
                t3 = x2[i8] * ss3 + x2[i4] * cc3;
                st1 = t2 - t4;
                t2 += t4;
                t4 = st1;
                x2[i8] = t2 + x2[i6];
                x2[i3] = t2 - x2[i6];
                st1 = t3 - t1;
                t1 += t3;
                t3 = st1;
                x2[i4] = t3 + x2[i22];
                x2[i7] = t3 - x2[i22];
                x2[i6] = x2[i1] - t1;
                x2[i1] += t1;
                x2[i22] = t4 + x2[i5];
                x2[i5] -= t4;
              }
              ix = (id << 1) - n22;
              id = id << 2;
            } while (ix < n2);
          }
        }
        while (--i2) {
          rval = x2[i2];
          ival = x2[n2 - i2 - 1];
          mag = bSi * sqrt(rval * rval + ival * ival);
          if (mag > this.peak) {
            this.peakBand = i2;
            this.peak = mag;
          }
          spectrum[i2] = mag;
        }
        spectrum[0] = bSi * x2[0];
        return spectrum;
      };
      function Sampler(file, bufferSize, sampleRate, playStart, playEnd, loopStart, loopEnd, loopMode) {
        this.file = file;
        this.bufferSize = bufferSize;
        this.sampleRate = sampleRate;
        this.playStart = playStart || 0;
        this.playEnd = playEnd || 1;
        this.loopStart = loopStart || 0;
        this.loopEnd = loopEnd || 1;
        this.loopMode = loopMode || DSP.OFF;
        this.loaded = false;
        this.samples = [];
        this.signal = new Float32Array(bufferSize);
        this.frameCount = 0;
        this.envelope = null;
        this.amplitude = 1;
        this.rootFrequency = 110;
        this.frequency = 550;
        this.step = this.frequency / this.rootFrequency;
        this.duration = 0;
        this.samplesProcessed = 0;
        this.playhead = 0;
        var audio = (
          /* new Audio();*/
          document.createElement("AUDIO")
        );
        var self2 = this;
        this.loadSamples = function(event) {
          var buffer = DSP.getChannel(DSP.MIX, event.frameBuffer);
          for (var i2 = 0; i2 < buffer.length; i2++) {
            self2.samples.push(buffer[i2]);
          }
        };
        this.loadComplete = function() {
          self2.samples = new Float32Array(self2.samples);
          self2.loaded = true;
        };
        this.loadMetaData = function() {
          self2.duration = audio.duration;
        };
        audio.addEventListener("MozAudioAvailable", this.loadSamples, false);
        audio.addEventListener("loadedmetadata", this.loadMetaData, false);
        audio.addEventListener("ended", this.loadComplete, false);
        audio.muted = true;
        audio.src = file;
        audio.play();
      }
      Sampler.prototype.applyEnvelope = function() {
        this.envelope.process(this.signal);
        return this.signal;
      };
      Sampler.prototype.generate = function() {
        var frameOffset = this.frameCount * this.bufferSize;
        var loopWidth = this.playEnd * this.samples.length - this.playStart * this.samples.length;
        var playStartSamples = this.playStart * this.samples.length;
        var playEndSamples = this.playEnd * this.samples.length;
        var offset;
        for (var i2 = 0; i2 < this.bufferSize; i2++) {
          switch (this.loopMode) {
            case DSP.OFF:
              this.playhead = Math.round(this.samplesProcessed * this.step + playStartSamples);
              if (this.playhead < this.playEnd * this.samples.length) {
                this.signal[i2] = this.samples[this.playhead] * this.amplitude;
              } else {
                this.signal[i2] = 0;
              }
              break;
            case DSP.FW:
              this.playhead = Math.round(this.samplesProcessed * this.step % loopWidth + playStartSamples);
              if (this.playhead < this.playEnd * this.samples.length) {
                this.signal[i2] = this.samples[this.playhead] * this.amplitude;
              }
              break;
            case DSP.BW:
              this.playhead = playEndSamples - Math.round(this.samplesProcessed * this.step % loopWidth);
              if (this.playhead < this.playEnd * this.samples.length) {
                this.signal[i2] = this.samples[this.playhead] * this.amplitude;
              }
              break;
            case DSP.FWBW:
              if (Math.floor(this.samplesProcessed * this.step / loopWidth) % 2 === 0) {
                this.playhead = Math.round(this.samplesProcessed * this.step % loopWidth + playStartSamples);
              } else {
                this.playhead = playEndSamples - Math.round(this.samplesProcessed * this.step % loopWidth);
              }
              if (this.playhead < this.playEnd * this.samples.length) {
                this.signal[i2] = this.samples[this.playhead] * this.amplitude;
              }
              break;
          }
          this.samplesProcessed++;
        }
        this.frameCount++;
        return this.signal;
      };
      Sampler.prototype.setFreq = function(frequency) {
        var totalProcessed = this.samplesProcessed * this.step;
        this.frequency = frequency;
        this.step = this.frequency / this.rootFrequency;
        this.samplesProcessed = Math.round(totalProcessed / this.step);
      };
      Sampler.prototype.reset = function() {
        this.samplesProcessed = 0;
        this.playhead = 0;
      };
      function Oscillator(type, frequency, amplitude, bufferSize, sampleRate) {
        this.frequency = frequency;
        this.amplitude = amplitude;
        this.bufferSize = bufferSize;
        this.sampleRate = sampleRate;
        this.frameCount = 0;
        this.waveTableLength = 2048;
        this.cyclesPerSample = frequency / sampleRate;
        this.signal = new Float32Array(bufferSize);
        this.envelope = null;
        switch (parseInt(type, 10)) {
          case DSP.TRIANGLE:
            this.func = Oscillator.Triangle;
            break;
          case DSP.SAW:
            this.func = Oscillator.Saw;
            break;
          case DSP.SQUARE:
            this.func = Oscillator.Square;
            break;
          default:
          case DSP.SINE:
            this.func = Oscillator.Sine;
            break;
        }
        this.generateWaveTable = function() {
          Oscillator.waveTable[this.func] = new Float32Array(2048);
          var waveTableTime = this.waveTableLength / this.sampleRate;
          var waveTableHz = 1 / waveTableTime;
          for (var i2 = 0; i2 < this.waveTableLength; i2++) {
            Oscillator.waveTable[this.func][i2] = this.func(i2 * waveTableHz / this.sampleRate);
          }
        };
        if (typeof Oscillator.waveTable === "undefined") {
          Oscillator.waveTable = {};
        }
        if (typeof Oscillator.waveTable[this.func] === "undefined") {
          this.generateWaveTable();
        }
        this.waveTable = Oscillator.waveTable[this.func];
      }
      Oscillator.prototype.setAmp = function(amplitude) {
        if (amplitude >= 0 && amplitude <= 1) {
          this.amplitude = amplitude;
        } else {
          throw "Amplitude out of range (0..1).";
        }
      };
      Oscillator.prototype.setFreq = function(frequency) {
        this.frequency = frequency;
        this.cyclesPerSample = frequency / this.sampleRate;
      };
      Oscillator.prototype.add = function(oscillator) {
        for (var i2 = 0; i2 < this.bufferSize; i2++) {
          this.signal[i2] += oscillator.signal[i2];
        }
        return this.signal;
      };
      Oscillator.prototype.addSignal = function(signal2) {
        for (var i2 = 0; i2 < signal2.length; i2++) {
          if (i2 >= this.bufferSize) {
            break;
          }
          this.signal[i2] += signal2[i2];
        }
        return this.signal;
      };
      Oscillator.prototype.addEnvelope = function(envelope) {
        this.envelope = envelope;
      };
      Oscillator.prototype.applyEnvelope = function() {
        this.envelope.process(this.signal);
      };
      Oscillator.prototype.valueAt = function(offset) {
        return this.waveTable[offset % this.waveTableLength];
      };
      Oscillator.prototype.generate = function() {
        var frameOffset = this.frameCount * this.bufferSize;
        var step = this.waveTableLength * this.frequency / this.sampleRate;
        var offset;
        for (var i2 = 0; i2 < this.bufferSize; i2++) {
          offset = Math.round((frameOffset + i2) * step);
          this.signal[i2] = this.waveTable[offset % this.waveTableLength] * this.amplitude;
        }
        this.frameCount++;
        return this.signal;
      };
      Oscillator.Sine = function(step) {
        return Math.sin(DSP.TWO_PI * step);
      };
      Oscillator.Square = function(step) {
        return step < 0.5 ? 1 : -1;
      };
      Oscillator.Saw = function(step) {
        return 2 * (step - Math.round(step));
      };
      Oscillator.Triangle = function(step) {
        return 1 - 4 * Math.abs(Math.round(step) - step);
      };
      Oscillator.Pulse = function(step) {
      };
      function ADSR(attackLength, decayLength, sustainLevel, sustainLength, releaseLength, sampleRate) {
        this.sampleRate = sampleRate;
        this.attackLength = attackLength;
        this.decayLength = decayLength;
        this.sustainLevel = sustainLevel;
        this.sustainLength = sustainLength;
        this.releaseLength = releaseLength;
        this.sampleRate = sampleRate;
        this.attackSamples = attackLength * sampleRate;
        this.decaySamples = decayLength * sampleRate;
        this.sustainSamples = sustainLength * sampleRate;
        this.releaseSamples = releaseLength * sampleRate;
        this.update = function() {
          this.attack = this.attackSamples;
          this.decay = this.attack + this.decaySamples;
          this.sustain = this.decay + this.sustainSamples;
          this.release = this.sustain + this.releaseSamples;
        };
        this.update();
        this.samplesProcessed = 0;
      }
      ADSR.prototype.noteOn = function() {
        this.samplesProcessed = 0;
        this.sustainSamples = this.sustainLength * this.sampleRate;
        this.update();
      };
      ADSR.prototype.noteOff = function() {
        this.sustainSamples = this.samplesProcessed - this.decaySamples;
        this.update();
      };
      ADSR.prototype.processSample = function(sample2) {
        var amplitude = 0;
        if (this.samplesProcessed <= this.attack) {
          amplitude = 0 + (1 - 0) * ((this.samplesProcessed - 0) / (this.attack - 0));
        } else if (this.samplesProcessed > this.attack && this.samplesProcessed <= this.decay) {
          amplitude = 1 + (this.sustainLevel - 1) * ((this.samplesProcessed - this.attack) / (this.decay - this.attack));
        } else if (this.samplesProcessed > this.decay && this.samplesProcessed <= this.sustain) {
          amplitude = this.sustainLevel;
        } else if (this.samplesProcessed > this.sustain && this.samplesProcessed <= this.release) {
          amplitude = this.sustainLevel + (0 - this.sustainLevel) * ((this.samplesProcessed - this.sustain) / (this.release - this.sustain));
        }
        return sample2 * amplitude;
      };
      ADSR.prototype.value = function() {
        var amplitude = 0;
        if (this.samplesProcessed <= this.attack) {
          amplitude = 0 + (1 - 0) * ((this.samplesProcessed - 0) / (this.attack - 0));
        } else if (this.samplesProcessed > this.attack && this.samplesProcessed <= this.decay) {
          amplitude = 1 + (this.sustainLevel - 1) * ((this.samplesProcessed - this.attack) / (this.decay - this.attack));
        } else if (this.samplesProcessed > this.decay && this.samplesProcessed <= this.sustain) {
          amplitude = this.sustainLevel;
        } else if (this.samplesProcessed > this.sustain && this.samplesProcessed <= this.release) {
          amplitude = this.sustainLevel + (0 - this.sustainLevel) * ((this.samplesProcessed - this.sustain) / (this.release - this.sustain));
        }
        return amplitude;
      };
      ADSR.prototype.process = function(buffer) {
        for (var i2 = 0; i2 < buffer.length; i2++) {
          buffer[i2] *= this.value();
          this.samplesProcessed++;
        }
        return buffer;
      };
      ADSR.prototype.isActive = function() {
        if (this.samplesProcessed > this.release || this.samplesProcessed === -1) {
          return false;
        } else {
          return true;
        }
      };
      ADSR.prototype.disable = function() {
        this.samplesProcessed = -1;
      };
      function IIRFilter(type, cutoff, resonance, sampleRate) {
        this.sampleRate = sampleRate;
        switch (type) {
          case DSP.LOWPASS:
          case DSP.LP12:
            this.func = new IIRFilter.LP12(cutoff, resonance, sampleRate);
            break;
        }
      }
      Object.defineProperty(IIRFilter, "cutoff", {
        get: function cutoff() {
          return this.func.cutoff;
        }
      });
      Object.defineProperty(IIRFilter, "resonance", {
        get: function cutoff() {
          return this.func.resonance;
        }
      });
      IIRFilter.prototype.set = function(cutoff, resonance) {
        this.func.calcCoeff(cutoff, resonance);
      };
      IIRFilter.prototype.process = function(buffer) {
        this.func.process(buffer);
      };
      IIRFilter.prototype.addEnvelope = function(envelope) {
        if (envelope instanceof ADSR) {
          this.func.addEnvelope(envelope);
        } else {
          throw "Not an envelope.";
        }
      };
      IIRFilter.LP12 = function(cutoff, resonance, sampleRate) {
        this.sampleRate = sampleRate;
        this.vibraPos = 0;
        this.vibraSpeed = 0;
        this.envelope = false;
        this.calcCoeff = function(cutoff2, resonance2) {
          this.w = 2 * Math.PI * cutoff2 / this.sampleRate;
          this.q = 1 - this.w / (2 * (resonance2 + 0.5 / (1 + this.w)) + this.w - 2);
          this.r = this.q * this.q;
          this.c = this.r + 1 - 2 * Math.cos(this.w) * this.q;
          this.cutoff = cutoff2;
          this.resonance = resonance2;
        };
        this.calcCoeff(cutoff, resonance);
        this.process = function(buffer) {
          for (var i2 = 0; i2 < buffer.length; i2++) {
            this.vibraSpeed += (buffer[i2] - this.vibraPos) * this.c;
            this.vibraPos += this.vibraSpeed;
            this.vibraSpeed *= this.r;
            if (this.envelope) {
              buffer[i2] = buffer[i2] * (1 - this.envelope.value()) + this.vibraPos * this.envelope.value();
              this.envelope.samplesProcessed++;
            } else {
              buffer[i2] = this.vibraPos;
            }
          }
        };
      };
      IIRFilter.LP12.prototype.addEnvelope = function(envelope) {
        this.envelope = envelope;
      };
      function IIRFilter2(type, cutoff, resonance, sampleRate) {
        this.type = type;
        this.cutoff = cutoff;
        this.resonance = resonance;
        this.sampleRate = sampleRate;
        this.f = Float32Array(4);
        this.f[0] = 0;
        this.f[1] = 0;
        this.f[2] = 0;
        this.f[3] = 0;
        this.calcCoeff = function(cutoff2, resonance2) {
          this.freq = 2 * Math.sin(Math.PI * Math.min(0.25, cutoff2 / (this.sampleRate * 2)));
          this.damp = Math.min(2 * (1 - Math.pow(resonance2, 0.25)), Math.min(2, 2 / this.freq - this.freq * 0.5));
        };
        this.calcCoeff(cutoff, resonance);
      }
      IIRFilter2.prototype.process = function(buffer) {
        var input, output;
        var f = this.f;
        for (var i2 = 0; i2 < buffer.length; i2++) {
          input = buffer[i2];
          f[3] = input - this.damp * f[2];
          f[0] = f[0] + this.freq * f[2];
          f[1] = f[3] - f[0];
          f[2] = this.freq * f[1] + f[2];
          output = 0.5 * f[this.type];
          f[3] = input - this.damp * f[2];
          f[0] = f[0] + this.freq * f[2];
          f[1] = f[3] - f[0];
          f[2] = this.freq * f[1] + f[2];
          output += 0.5 * f[this.type];
          if (this.envelope) {
            buffer[i2] = buffer[i2] * (1 - this.envelope.value()) + output * this.envelope.value();
            this.envelope.samplesProcessed++;
          } else {
            buffer[i2] = output;
          }
        }
      };
      IIRFilter2.prototype.addEnvelope = function(envelope) {
        if (envelope instanceof ADSR) {
          this.envelope = envelope;
        } else {
          throw "This is not an envelope.";
        }
      };
      IIRFilter2.prototype.set = function(cutoff, resonance) {
        this.calcCoeff(cutoff, resonance);
      };
      function WindowFunction(type, alpha) {
        this.alpha = alpha;
        switch (type) {
          case DSP.BARTLETT:
            this.func = WindowFunction.Bartlett;
            break;
          case DSP.BARTLETTHANN:
            this.func = WindowFunction.BartlettHann;
            break;
          case DSP.BLACKMAN:
            this.func = WindowFunction.Blackman;
            this.alpha = this.alpha || 0.16;
            break;
          case DSP.COSINE:
            this.func = WindowFunction.Cosine;
            break;
          case DSP.GAUSS:
            this.func = WindowFunction.Gauss;
            this.alpha = this.alpha || 0.25;
            break;
          case DSP.HAMMING:
            this.func = WindowFunction.Hamming;
            break;
          case DSP.HANN:
            this.func = WindowFunction.Hann;
            break;
          case DSP.LANCZOS:
            this.func = WindowFunction.Lanczoz;
            break;
          case DSP.RECTANGULAR:
            this.func = WindowFunction.Rectangular;
            break;
          case DSP.TRIANGULAR:
            this.func = WindowFunction.Triangular;
            break;
        }
      }
      WindowFunction.prototype.process = function(buffer) {
        var length = buffer.length;
        for (var i2 = 0; i2 < length; i2++) {
          buffer[i2] *= this.func(length, i2, this.alpha);
        }
        return buffer;
      };
      WindowFunction.Bartlett = function(length, index2) {
        return 2 / (length - 1) * ((length - 1) / 2 - Math.abs(index2 - (length - 1) / 2));
      };
      WindowFunction.BartlettHann = function(length, index2) {
        return 0.62 - 0.48 * Math.abs(index2 / (length - 1) - 0.5) - 0.38 * Math.cos(DSP.TWO_PI * index2 / (length - 1));
      };
      WindowFunction.Blackman = function(length, index2, alpha) {
        var a0 = (1 - alpha) / 2;
        var a1 = 0.5;
        var a2 = alpha / 2;
        return a0 - a1 * Math.cos(DSP.TWO_PI * index2 / (length - 1)) + a2 * Math.cos(4 * Math.PI * index2 / (length - 1));
      };
      WindowFunction.Cosine = function(length, index2) {
        return Math.cos(Math.PI * index2 / (length - 1) - Math.PI / 2);
      };
      WindowFunction.Gauss = function(length, index2, alpha) {
        return Math.pow(Math.E, -0.5 * Math.pow((index2 - (length - 1) / 2) / (alpha * (length - 1) / 2), 2));
      };
      WindowFunction.Hamming = function(length, index2) {
        return 0.54 - 0.46 * Math.cos(DSP.TWO_PI * index2 / (length - 1));
      };
      WindowFunction.Hann = function(length, index2) {
        return 0.5 * (1 - Math.cos(DSP.TWO_PI * index2 / (length - 1)));
      };
      WindowFunction.Lanczos = function(length, index2) {
        var x2 = 2 * index2 / (length - 1) - 1;
        return Math.sin(Math.PI * x2) / (Math.PI * x2);
      };
      WindowFunction.Rectangular = function(length, index2) {
        return 1;
      };
      WindowFunction.Triangular = function(length, index2) {
        return 2 / length * (length / 2 - Math.abs(index2 - (length - 1) / 2));
      };
      DSP.mag2db = function(buffer) {
        var minDb = -120;
        var minMag = Math.pow(10, minDb / 20);
        var log2 = Math.log;
        var max = Math.max;
        var result = Float32Array(buffer.length);
        for (var i2 = 0; i2 < buffer.length; i2++) {
          result[i2] = 20 * log2(max(buffer[i2], minMag));
        }
        return result;
      };
      DSP.freqz = function(b2, a2, w3) {
        var i2, j2;
        if (!w3) {
          w3 = Float32Array(200);
          for (i2 = 0; i2 < w3.length; i2++) {
            w3[i2] = DSP.TWO_PI / w3.length * i2 - Math.PI;
          }
        }
        var result = Float32Array(w3.length);
        var sqrt = Math.sqrt;
        var cos = Math.cos;
        var sin = Math.sin;
        for (i2 = 0; i2 < w3.length; i2++) {
          var numerator = { real: 0, imag: 0 };
          for (j2 = 0; j2 < b2.length; j2++) {
            numerator.real += b2[j2] * cos(-j2 * w3[i2]);
            numerator.imag += b2[j2] * sin(-j2 * w3[i2]);
          }
          var denominator = { real: 0, imag: 0 };
          for (j2 = 0; j2 < a2.length; j2++) {
            denominator.real += a2[j2] * cos(-j2 * w3[i2]);
            denominator.imag += a2[j2] * sin(-j2 * w3[i2]);
          }
          result[i2] = sqrt(numerator.real * numerator.real + numerator.imag * numerator.imag) / sqrt(denominator.real * denominator.real + denominator.imag * denominator.imag);
        }
        return result;
      };
      function MultiDelay(maxDelayInSamplesSize, delayInSamples, masterVolume, delayVolume) {
        this.delayBufferSamples = new Float32Array(maxDelayInSamplesSize);
        this.delayInputPointer = delayInSamples;
        this.delayOutputPointer = 0;
        this.delayInSamples = delayInSamples;
        this.masterVolume = masterVolume;
        this.delayVolume = delayVolume;
      }
      MultiDelay.prototype.setDelayInSamples = function(delayInSamples) {
        this.delayInSamples = delayInSamples;
        this.delayInputPointer = this.delayOutputPointer + delayInSamples;
        if (this.delayInputPointer >= this.delayBufferSamples.length - 1) {
          this.delayInputPointer = this.delayInputPointer - this.delayBufferSamples.length;
        }
      };
      MultiDelay.prototype.setMasterVolume = function(masterVolume) {
        this.masterVolume = masterVolume;
      };
      MultiDelay.prototype.setDelayVolume = function(delayVolume) {
        this.delayVolume = delayVolume;
      };
      MultiDelay.prototype.process = function(samples) {
        var outputSamples = new Float32Array(samples.length);
        for (var i2 = 0; i2 < samples.length; i2++) {
          var delaySample = this.delayBufferSamples[this.delayOutputPointer] === null ? 0 : this.delayBufferSamples[this.delayOutputPointer];
          var sample2 = delaySample * this.delayVolume + samples[i2];
          this.delayBufferSamples[this.delayInputPointer] = sample2;
          outputSamples[i2] = sample2 * this.masterVolume;
          this.delayInputPointer++;
          if (this.delayInputPointer >= this.delayBufferSamples.length - 1) {
            this.delayInputPointer = 0;
          }
          this.delayOutputPointer++;
          if (this.delayOutputPointer >= this.delayBufferSamples.length - 1) {
            this.delayOutputPointer = 0;
          }
        }
        return outputSamples;
      };
      function SingleDelay(maxDelayInSamplesSize, delayInSamples, delayVolume) {
        this.delayBufferSamples = new Float32Array(maxDelayInSamplesSize);
        this.delayInputPointer = delayInSamples;
        this.delayOutputPointer = 0;
        this.delayInSamples = delayInSamples;
        this.delayVolume = delayVolume;
      }
      SingleDelay.prototype.setDelayInSamples = function(delayInSamples) {
        this.delayInSamples = delayInSamples;
        this.delayInputPointer = this.delayOutputPointer + delayInSamples;
        if (this.delayInputPointer >= this.delayBufferSamples.length - 1) {
          this.delayInputPointer = this.delayInputPointer - this.delayBufferSamples.length;
        }
      };
      SingleDelay.prototype.setDelayVolume = function(delayVolume) {
        this.delayVolume = delayVolume;
      };
      SingleDelay.prototype.process = function(samples) {
        var outputSamples = new Float32Array(samples.length);
        for (var i2 = 0; i2 < samples.length; i2++) {
          this.delayBufferSamples[this.delayInputPointer] = samples[i2];
          var delaySample = this.delayBufferSamples[this.delayOutputPointer];
          outputSamples[i2] = delaySample * this.delayVolume;
          this.delayInputPointer++;
          if (this.delayInputPointer >= this.delayBufferSamples.length - 1) {
            this.delayInputPointer = 0;
          }
          this.delayOutputPointer++;
          if (this.delayOutputPointer >= this.delayBufferSamples.length - 1) {
            this.delayOutputPointer = 0;
          }
        }
        return outputSamples;
      };
      function Reverb(maxDelayInSamplesSize, delayInSamples, masterVolume, mixVolume, delayVolume, dampFrequency) {
        this.delayInSamples = delayInSamples;
        this.masterVolume = masterVolume;
        this.mixVolume = mixVolume;
        this.delayVolume = delayVolume;
        this.dampFrequency = dampFrequency;
        this.NR_OF_MULTIDELAYS = 6;
        this.NR_OF_SINGLEDELAYS = 6;
        this.LOWPASSL = new IIRFilter2(DSP.LOWPASS, dampFrequency, 0, 44100);
        this.LOWPASSR = new IIRFilter2(DSP.LOWPASS, dampFrequency, 0, 44100);
        this.singleDelays = [];
        var i2, delayMultiply;
        for (i2 = 0; i2 < this.NR_OF_SINGLEDELAYS; i2++) {
          delayMultiply = 1 + i2 / 7;
          this.singleDelays[i2] = new SingleDelay(maxDelayInSamplesSize, Math.round(this.delayInSamples * delayMultiply), this.delayVolume);
        }
        this.multiDelays = [];
        for (i2 = 0; i2 < this.NR_OF_MULTIDELAYS; i2++) {
          delayMultiply = 1 + i2 / 10;
          this.multiDelays[i2] = new MultiDelay(maxDelayInSamplesSize, Math.round(this.delayInSamples * delayMultiply), this.masterVolume, this.delayVolume);
        }
      }
      Reverb.prototype.setDelayInSamples = function(delayInSamples) {
        this.delayInSamples = delayInSamples;
        var i2, delayMultiply;
        for (i2 = 0; i2 < this.NR_OF_SINGLEDELAYS; i2++) {
          delayMultiply = 1 + i2 / 7;
          this.singleDelays[i2].setDelayInSamples(Math.round(this.delayInSamples * delayMultiply));
        }
        for (i2 = 0; i2 < this.NR_OF_MULTIDELAYS; i2++) {
          delayMultiply = 1 + i2 / 10;
          this.multiDelays[i2].setDelayInSamples(Math.round(this.delayInSamples * delayMultiply));
        }
      };
      Reverb.prototype.setMasterVolume = function(masterVolume) {
        this.masterVolume = masterVolume;
      };
      Reverb.prototype.setMixVolume = function(mixVolume) {
        this.mixVolume = mixVolume;
      };
      Reverb.prototype.setDelayVolume = function(delayVolume) {
        this.delayVolume = delayVolume;
        var i2;
        for (i2 = 0; i2 < this.NR_OF_SINGLEDELAYS; i2++) {
          this.singleDelays[i2].setDelayVolume(this.delayVolume);
        }
        for (i2 = 0; i2 < this.NR_OF_MULTIDELAYS; i2++) {
          this.multiDelays[i2].setDelayVolume(this.delayVolume);
        }
      };
      Reverb.prototype.setDampFrequency = function(dampFrequency) {
        this.dampFrequency = dampFrequency;
        this.LOWPASSL.set(dampFrequency, 0);
        this.LOWPASSR.set(dampFrequency, 0);
      };
      Reverb.prototype.process = function(interleavedSamples) {
        var outputSamples = new Float32Array(interleavedSamples.length);
        var leftRightMix = DSP.deinterleave(interleavedSamples);
        this.LOWPASSL.process(leftRightMix[DSP.LEFT]);
        this.LOWPASSR.process(leftRightMix[DSP.RIGHT]);
        var filteredSamples = DSP.interleave(leftRightMix[DSP.LEFT], leftRightMix[DSP.RIGHT]);
        var i2;
        for (i2 = 0; i2 < this.NR_OF_MULTIDELAYS; i2++) {
          outputSamples = DSP.mixSampleBuffers(outputSamples, this.multiDelays[i2].process(filteredSamples), 2 % i2 === 0, this.NR_OF_MULTIDELAYS);
        }
        var singleDelaySamples = new Float32Array(outputSamples.length);
        for (i2 = 0; i2 < this.NR_OF_SINGLEDELAYS; i2++) {
          singleDelaySamples = DSP.mixSampleBuffers(singleDelaySamples, this.singleDelays[i2].process(outputSamples), 2 % i2 === 0, 1);
        }
        for (i2 = 0; i2 < singleDelaySamples.length; i2++) {
          singleDelaySamples[i2] *= this.mixVolume;
        }
        outputSamples = DSP.mixSampleBuffers(singleDelaySamples, interleavedSamples, 0, 1);
        for (i2 = 0; i2 < outputSamples.length; i2++) {
          outputSamples[i2] *= this.masterVolume;
        }
        return outputSamples;
      };
      module.exports = {
        Oscillator,
        DFT,
        FFT,
        SINE: DSP.SINE
      };
    }
  });

  // node_modules/frequencyjs/node_modules/lodash/dist/lodash.js
  var require_lodash2 = __commonJS({
    "node_modules/frequencyjs/node_modules/lodash/dist/lodash.js"(exports, module) {
      (function() {
        var undefined2;
        var arrayPool = [], objectPool = [];
        var idCounter = 0;
        var keyPrefix = +/* @__PURE__ */ new Date() + "";
        var largeArraySize = 75;
        var maxPoolSize = 40;
        var whitespace = (
          // whitespace
          " 	\v\f\xA0\uFEFF\n\r\u2028\u2029\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000"
        );
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reFuncName = /^\s*function[ \n\r\t]+\w/;
        var reInterpolate = /<%=([\s\S]+?)%>/g;
        var reLeadingSpacesAndZeros = RegExp("^[" + whitespace + "]*0+(?=.$)");
        var reNoMatch = /($^)/;
        var reThis = /\bthis\b/;
        var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;
        var contextProps = [
          "Array",
          "Boolean",
          "Date",
          "Function",
          "Math",
          "Number",
          "Object",
          "RegExp",
          "String",
          "_",
          "attachEvent",
          "clearTimeout",
          "isFinite",
          "isNaN",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = 0;
        var argsClass = "[object Arguments]", arrayClass = "[object Array]", boolClass = "[object Boolean]", dateClass = "[object Date]", funcClass = "[object Function]", numberClass = "[object Number]", objectClass = "[object Object]", regexpClass = "[object RegExp]", stringClass = "[object String]";
        var cloneableClasses = {};
        cloneableClasses[funcClass] = false;
        cloneableClasses[argsClass] = cloneableClasses[arrayClass] = cloneableClasses[boolClass] = cloneableClasses[dateClass] = cloneableClasses[numberClass] = cloneableClasses[objectClass] = cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;
        var debounceOptions = {
          "leading": false,
          "maxWait": 0,
          "trailing": false
        };
        var descriptor = {
          "configurable": false,
          "enumerable": false,
          "value": null,
          "writable": false
        };
        var objectTypes = {
          "boolean": false,
          "function": true,
          "object": true,
          "number": false,
          "string": false,
          "undefined": false
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "	": "t",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var root = objectTypes[typeof window] && window || this;
        var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
        var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;
        var freeGlobal = objectTypes[typeof global] && global;
        if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
          root = freeGlobal;
        }
        function baseIndexOf(array, value, fromIndex) {
          var index2 = (fromIndex || 0) - 1, length = array ? array.length : 0;
          while (++index2 < length) {
            if (array[index2] === value) {
              return index2;
            }
          }
          return -1;
        }
        function cacheIndexOf(cache, value) {
          var type = typeof value;
          cache = cache.cache;
          if (type == "boolean" || value == null) {
            return cache[value] ? 0 : -1;
          }
          if (type != "number" && type != "string") {
            type = "object";
          }
          var key = type == "number" ? value : keyPrefix + value;
          cache = (cache = cache[type]) && cache[key];
          return type == "object" ? cache && baseIndexOf(cache, value) > -1 ? 0 : -1 : cache ? 0 : -1;
        }
        function cachePush(value) {
          var cache = this.cache, type = typeof value;
          if (type == "boolean" || value == null) {
            cache[value] = true;
          } else {
            if (type != "number" && type != "string") {
              type = "object";
            }
            var key = type == "number" ? value : keyPrefix + value, typeCache = cache[type] || (cache[type] = {});
            if (type == "object") {
              (typeCache[key] || (typeCache[key] = [])).push(value);
            } else {
              typeCache[key] = true;
            }
          }
        }
        function charAtCallback(value) {
          return value.charCodeAt(0);
        }
        function compareAscending(a2, b2) {
          var ac = a2.criteria, bc = b2.criteria, index2 = -1, length = ac.length;
          while (++index2 < length) {
            var value = ac[index2], other = bc[index2];
            if (value !== other) {
              if (value > other || typeof value == "undefined") {
                return 1;
              }
              if (value < other || typeof other == "undefined") {
                return -1;
              }
            }
          }
          return a2.index - b2.index;
        }
        function createCache(array) {
          var index2 = -1, length = array.length, first = array[0], mid = array[length / 2 | 0], last = array[length - 1];
          if (first && typeof first == "object" && mid && typeof mid == "object" && last && typeof last == "object") {
            return false;
          }
          var cache = getObject();
          cache["false"] = cache["null"] = cache["true"] = cache["undefined"] = false;
          var result = getObject();
          result.array = array;
          result.cache = cache;
          result.push = cachePush;
          while (++index2 < length) {
            result.push(array[index2]);
          }
          return result;
        }
        function escapeStringChar(match) {
          return "\\" + stringEscapes[match];
        }
        function getArray() {
          return arrayPool.pop() || [];
        }
        function getObject() {
          return objectPool.pop() || {
            "array": null,
            "cache": null,
            "criteria": null,
            "false": false,
            "index": 0,
            "null": false,
            "number": null,
            "object": null,
            "push": null,
            "string": null,
            "true": false,
            "undefined": false,
            "value": null
          };
        }
        function releaseArray(array) {
          array.length = 0;
          if (arrayPool.length < maxPoolSize) {
            arrayPool.push(array);
          }
        }
        function releaseObject(object) {
          var cache = object.cache;
          if (cache) {
            releaseObject(cache);
          }
          object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
          if (objectPool.length < maxPoolSize) {
            objectPool.push(object);
          }
        }
        function slice(array, start, end) {
          start || (start = 0);
          if (typeof end == "undefined") {
            end = array ? array.length : 0;
          }
          var index2 = -1, length = end - start || 0, result = Array(length < 0 ? 0 : length);
          while (++index2 < length) {
            result[index2] = array[start + index2];
          }
          return result;
        }
        function runInContext(context) {
          context = context ? _2.defaults(root.Object(), context, _2.pick(root, contextProps)) : root;
          var Array2 = context.Array, Boolean2 = context.Boolean, Date2 = context.Date, Function2 = context.Function, Math2 = context.Math, Number2 = context.Number, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayRef = [];
          var objectProto = Object2.prototype;
          var oldDash = context._;
          var toString = objectProto.toString;
          var reNative = RegExp2(
            "^" + String2(toString).replace(/[.*+?^${}()|[\]\\]/g, "\\$&").replace(/toString| for [^\]]+/g, ".*?") + "$"
          );
          var ceil = Math2.ceil, clearTimeout2 = context.clearTimeout, floor = Math2.floor, fnToString = Function2.prototype.toString, getPrototypeOf = isNative(getPrototypeOf = Object2.getPrototypeOf) && getPrototypeOf, hasOwnProperty2 = objectProto.hasOwnProperty, push = arrayRef.push, setTimeout2 = context.setTimeout, splice = arrayRef.splice, unshift = arrayRef.unshift;
          var defineProperty = function() {
            try {
              var o2 = {}, func = isNative(func = Object2.defineProperty) && func, result2 = func(o2, o2, o2) && func;
            } catch (e2) {
            }
            return result2;
          }();
          var nativeCreate = isNative(nativeCreate = Object2.create) && nativeCreate, nativeIsArray = isNative(nativeIsArray = Array2.isArray) && nativeIsArray, nativeIsFinite = context.isFinite, nativeIsNaN = context.isNaN, nativeKeys = isNative(nativeKeys = Object2.keys) && nativeKeys, nativeMax = Math2.max, nativeMin = Math2.min, nativeParseInt = context.parseInt, nativeRandom = Math2.random;
          var ctorByClass = {};
          ctorByClass[arrayClass] = Array2;
          ctorByClass[boolClass] = Boolean2;
          ctorByClass[dateClass] = Date2;
          ctorByClass[funcClass] = Function2;
          ctorByClass[objectClass] = Object2;
          ctorByClass[numberClass] = Number2;
          ctorByClass[regexpClass] = RegExp2;
          ctorByClass[stringClass] = String2;
          function lodash(value) {
            return value && typeof value == "object" && !isArray(value) && hasOwnProperty2.call(value, "__wrapped__") ? value : new lodashWrapper(value);
          }
          function lodashWrapper(value, chainAll) {
            this.__chain__ = !!chainAll;
            this.__wrapped__ = value;
          }
          lodashWrapper.prototype = lodash.prototype;
          var support = lodash.support = {};
          support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);
          support.funcNames = typeof Function2.name == "string";
          lodash.templateSettings = {
            /**
             * Used to detect `data` property values to be HTML-escaped.
             *
             * @memberOf _.templateSettings
             * @type RegExp
             */
            "escape": /<%-([\s\S]+?)%>/g,
            /**
             * Used to detect code to be evaluated.
             *
             * @memberOf _.templateSettings
             * @type RegExp
             */
            "evaluate": /<%([\s\S]+?)%>/g,
            /**
             * Used to detect `data` property values to inject.
             *
             * @memberOf _.templateSettings
             * @type RegExp
             */
            "interpolate": reInterpolate,
            /**
             * Used to reference the data object in the template text.
             *
             * @memberOf _.templateSettings
             * @type string
             */
            "variable": "",
            /**
             * Used to import variables into the compiled template.
             *
             * @memberOf _.templateSettings
             * @type Object
             */
            "imports": {
              /**
               * A reference to the `lodash` function.
               *
               * @memberOf _.templateSettings.imports
               * @type Function
               */
              "_": lodash
            }
          };
          function baseBind(bindData) {
            var func = bindData[0], partialArgs = bindData[2], thisArg = bindData[4];
            function bound() {
              if (partialArgs) {
                var args = slice(partialArgs);
                push.apply(args, arguments);
              }
              if (this instanceof bound) {
                var thisBinding = baseCreate(func.prototype), result2 = func.apply(thisBinding, args || arguments);
                return isObject(result2) ? result2 : thisBinding;
              }
              return func.apply(thisArg, args || arguments);
            }
            setBindData(bound, bindData);
            return bound;
          }
          function baseClone(value, isDeep, callback, stackA, stackB) {
            if (callback) {
              var result2 = callback(value);
              if (typeof result2 != "undefined") {
                return result2;
              }
            }
            var isObj = isObject(value);
            if (isObj) {
              var className = toString.call(value);
              if (!cloneableClasses[className]) {
                return value;
              }
              var ctor = ctorByClass[className];
              switch (className) {
                case boolClass:
                case dateClass:
                  return new ctor(+value);
                case numberClass:
                case stringClass:
                  return new ctor(value);
                case regexpClass:
                  result2 = ctor(value.source, reFlags.exec(value));
                  result2.lastIndex = value.lastIndex;
                  return result2;
              }
            } else {
              return value;
            }
            var isArr = isArray(value);
            if (isDeep) {
              var initedStack = !stackA;
              stackA || (stackA = getArray());
              stackB || (stackB = getArray());
              var length = stackA.length;
              while (length--) {
                if (stackA[length] == value) {
                  return stackB[length];
                }
              }
              result2 = isArr ? ctor(value.length) : {};
            } else {
              result2 = isArr ? slice(value) : assign({}, value);
            }
            if (isArr) {
              if (hasOwnProperty2.call(value, "index")) {
                result2.index = value.index;
              }
              if (hasOwnProperty2.call(value, "input")) {
                result2.input = value.input;
              }
            }
            if (!isDeep) {
              return result2;
            }
            stackA.push(value);
            stackB.push(result2);
            (isArr ? forEach : forOwn)(value, function(objValue, key) {
              result2[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
            });
            if (initedStack) {
              releaseArray(stackA);
              releaseArray(stackB);
            }
            return result2;
          }
          function baseCreate(prototype, properties) {
            return isObject(prototype) ? nativeCreate(prototype) : {};
          }
          if (!nativeCreate) {
            baseCreate = /* @__PURE__ */ function() {
              function Object3() {
              }
              return function(prototype) {
                if (isObject(prototype)) {
                  Object3.prototype = prototype;
                  var result2 = new Object3();
                  Object3.prototype = null;
                }
                return result2 || context.Object();
              };
            }();
          }
          function baseCreateCallback(func, thisArg, argCount) {
            if (typeof func != "function") {
              return identity;
            }
            if (typeof thisArg == "undefined" || !("prototype" in func)) {
              return func;
            }
            var bindData = func.__bindData__;
            if (typeof bindData == "undefined") {
              if (support.funcNames) {
                bindData = !func.name;
              }
              bindData = bindData || !support.funcDecomp;
              if (!bindData) {
                var source = fnToString.call(func);
                if (!support.funcNames) {
                  bindData = !reFuncName.test(source);
                }
                if (!bindData) {
                  bindData = reThis.test(source);
                  setBindData(func, bindData);
                }
              }
            }
            if (bindData === false || bindData !== true && bindData[1] & 1) {
              return func;
            }
            switch (argCount) {
              case 1:
                return function(value) {
                  return func.call(thisArg, value);
                };
              case 2:
                return function(a2, b2) {
                  return func.call(thisArg, a2, b2);
                };
              case 3:
                return function(value, index2, collection) {
                  return func.call(thisArg, value, index2, collection);
                };
              case 4:
                return function(accumulator, value, index2, collection) {
                  return func.call(thisArg, accumulator, value, index2, collection);
                };
            }
            return bind(func, thisArg);
          }
          function baseCreateWrapper(bindData) {
            var func = bindData[0], bitmask = bindData[1], partialArgs = bindData[2], partialRightArgs = bindData[3], thisArg = bindData[4], arity = bindData[5];
            var isBind = bitmask & 1, isBindKey = bitmask & 2, isCurry = bitmask & 4, isCurryBound = bitmask & 8, key = func;
            function bound() {
              var thisBinding = isBind ? thisArg : this;
              if (partialArgs) {
                var args = slice(partialArgs);
                push.apply(args, arguments);
              }
              if (partialRightArgs || isCurry) {
                args || (args = slice(arguments));
                if (partialRightArgs) {
                  push.apply(args, partialRightArgs);
                }
                if (isCurry && args.length < arity) {
                  bitmask |= 16 & ~32;
                  return baseCreateWrapper([func, isCurryBound ? bitmask : bitmask & ~3, args, null, thisArg, arity]);
                }
              }
              args || (args = arguments);
              if (isBindKey) {
                func = thisBinding[key];
              }
              if (this instanceof bound) {
                thisBinding = baseCreate(func.prototype);
                var result2 = func.apply(thisBinding, args);
                return isObject(result2) ? result2 : thisBinding;
              }
              return func.apply(thisBinding, args);
            }
            setBindData(bound, bindData);
            return bound;
          }
          function baseDifference(array, values2) {
            var index2 = -1, indexOf2 = getIndexOf(), length = array ? array.length : 0, isLarge = length >= largeArraySize && indexOf2 === baseIndexOf, result2 = [];
            if (isLarge) {
              var cache = createCache(values2);
              if (cache) {
                indexOf2 = cacheIndexOf;
                values2 = cache;
              } else {
                isLarge = false;
              }
            }
            while (++index2 < length) {
              var value = array[index2];
              if (indexOf2(values2, value) < 0) {
                result2.push(value);
              }
            }
            if (isLarge) {
              releaseObject(values2);
            }
            return result2;
          }
          function baseFlatten(array, isShallow, isStrict, fromIndex) {
            var index2 = (fromIndex || 0) - 1, length = array ? array.length : 0, result2 = [];
            while (++index2 < length) {
              var value = array[index2];
              if (value && typeof value == "object" && typeof value.length == "number" && (isArray(value) || isArguments(value))) {
                if (!isShallow) {
                  value = baseFlatten(value, isShallow, isStrict);
                }
                var valIndex = -1, valLength = value.length, resIndex = result2.length;
                result2.length += valLength;
                while (++valIndex < valLength) {
                  result2[resIndex++] = value[valIndex];
                }
              } else if (!isStrict) {
                result2.push(value);
              }
            }
            return result2;
          }
          function baseIsEqual(a2, b2, callback, isWhere, stackA, stackB) {
            if (callback) {
              var result2 = callback(a2, b2);
              if (typeof result2 != "undefined") {
                return !!result2;
              }
            }
            if (a2 === b2) {
              return a2 !== 0 || 1 / a2 == 1 / b2;
            }
            var type = typeof a2, otherType = typeof b2;
            if (a2 === a2 && !(a2 && objectTypes[type]) && !(b2 && objectTypes[otherType])) {
              return false;
            }
            if (a2 == null || b2 == null) {
              return a2 === b2;
            }
            var className = toString.call(a2), otherClass = toString.call(b2);
            if (className == argsClass) {
              className = objectClass;
            }
            if (otherClass == argsClass) {
              otherClass = objectClass;
            }
            if (className != otherClass) {
              return false;
            }
            switch (className) {
              case boolClass:
              case dateClass:
                return +a2 == +b2;
              case numberClass:
                return a2 != +a2 ? b2 != +b2 : a2 == 0 ? 1 / a2 == 1 / b2 : a2 == +b2;
              case regexpClass:
              case stringClass:
                return a2 == String2(b2);
            }
            var isArr = className == arrayClass;
            if (!isArr) {
              var aWrapped = hasOwnProperty2.call(a2, "__wrapped__"), bWrapped = hasOwnProperty2.call(b2, "__wrapped__");
              if (aWrapped || bWrapped) {
                return baseIsEqual(aWrapped ? a2.__wrapped__ : a2, bWrapped ? b2.__wrapped__ : b2, callback, isWhere, stackA, stackB);
              }
              if (className != objectClass) {
                return false;
              }
              var ctorA = a2.constructor, ctorB = b2.constructor;
              if (ctorA != ctorB && !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) && ("constructor" in a2 && "constructor" in b2)) {
                return false;
              }
            }
            var initedStack = !stackA;
            stackA || (stackA = getArray());
            stackB || (stackB = getArray());
            var length = stackA.length;
            while (length--) {
              if (stackA[length] == a2) {
                return stackB[length] == b2;
              }
            }
            var size2 = 0;
            result2 = true;
            stackA.push(a2);
            stackB.push(b2);
            if (isArr) {
              length = a2.length;
              size2 = b2.length;
              result2 = size2 == length;
              if (result2 || isWhere) {
                while (size2--) {
                  var index2 = length, value = b2[size2];
                  if (isWhere) {
                    while (index2--) {
                      if (result2 = baseIsEqual(a2[index2], value, callback, isWhere, stackA, stackB)) {
                        break;
                      }
                    }
                  } else if (!(result2 = baseIsEqual(a2[size2], value, callback, isWhere, stackA, stackB))) {
                    break;
                  }
                }
              }
            } else {
              forIn(b2, function(value2, key, b3) {
                if (hasOwnProperty2.call(b3, key)) {
                  size2++;
                  return result2 = hasOwnProperty2.call(a2, key) && baseIsEqual(a2[key], value2, callback, isWhere, stackA, stackB);
                }
              });
              if (result2 && !isWhere) {
                forIn(a2, function(value2, key, a3) {
                  if (hasOwnProperty2.call(a3, key)) {
                    return result2 = --size2 > -1;
                  }
                });
              }
            }
            stackA.pop();
            stackB.pop();
            if (initedStack) {
              releaseArray(stackA);
              releaseArray(stackB);
            }
            return result2;
          }
          function baseMerge(object, source, callback, stackA, stackB) {
            (isArray(source) ? forEach : forOwn)(source, function(source2, key) {
              var found, isArr, result2 = source2, value = object[key];
              if (source2 && ((isArr = isArray(source2)) || isPlainObject(source2))) {
                var stackLength = stackA.length;
                while (stackLength--) {
                  if (found = stackA[stackLength] == source2) {
                    value = stackB[stackLength];
                    break;
                  }
                }
                if (!found) {
                  var isShallow;
                  if (callback) {
                    result2 = callback(value, source2);
                    if (isShallow = typeof result2 != "undefined") {
                      value = result2;
                    }
                  }
                  if (!isShallow) {
                    value = isArr ? isArray(value) ? value : [] : isPlainObject(value) ? value : {};
                  }
                  stackA.push(source2);
                  stackB.push(value);
                  if (!isShallow) {
                    baseMerge(value, source2, callback, stackA, stackB);
                  }
                }
              } else {
                if (callback) {
                  result2 = callback(value, source2);
                  if (typeof result2 == "undefined") {
                    result2 = source2;
                  }
                }
                if (typeof result2 != "undefined") {
                  value = result2;
                }
              }
              object[key] = value;
            });
          }
          function baseRandom(min2, max2) {
            return min2 + floor(nativeRandom() * (max2 - min2 + 1));
          }
          function baseUniq(array, isSorted, callback) {
            var index2 = -1, indexOf2 = getIndexOf(), length = array ? array.length : 0, result2 = [];
            var isLarge = !isSorted && length >= largeArraySize && indexOf2 === baseIndexOf, seen = callback || isLarge ? getArray() : result2;
            if (isLarge) {
              var cache = createCache(seen);
              indexOf2 = cacheIndexOf;
              seen = cache;
            }
            while (++index2 < length) {
              var value = array[index2], computed = callback ? callback(value, index2, array) : value;
              if (isSorted ? !index2 || seen[seen.length - 1] !== computed : indexOf2(seen, computed) < 0) {
                if (callback || isLarge) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
            if (isLarge) {
              releaseArray(seen.array);
              releaseObject(seen);
            } else if (callback) {
              releaseArray(seen);
            }
            return result2;
          }
          function createAggregator(setter) {
            return function(collection, callback, thisArg) {
              var result2 = {};
              callback = lodash.createCallback(callback, thisArg, 3);
              var index2 = -1, length = collection ? collection.length : 0;
              if (typeof length == "number") {
                while (++index2 < length) {
                  var value = collection[index2];
                  setter(result2, value, callback(value, index2, collection), collection);
                }
              } else {
                forOwn(collection, function(value2, key, collection2) {
                  setter(result2, value2, callback(value2, key, collection2), collection2);
                });
              }
              return result2;
            };
          }
          function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
            var isBind = bitmask & 1, isBindKey = bitmask & 2, isCurry = bitmask & 4, isCurryBound = bitmask & 8, isPartial = bitmask & 16, isPartialRight = bitmask & 32;
            if (!isBindKey && !isFunction(func)) {
              throw new TypeError2();
            }
            if (isPartial && !partialArgs.length) {
              bitmask &= ~16;
              isPartial = partialArgs = false;
            }
            if (isPartialRight && !partialRightArgs.length) {
              bitmask &= ~32;
              isPartialRight = partialRightArgs = false;
            }
            var bindData = func && func.__bindData__;
            if (bindData && bindData !== true) {
              bindData = slice(bindData);
              if (bindData[2]) {
                bindData[2] = slice(bindData[2]);
              }
              if (bindData[3]) {
                bindData[3] = slice(bindData[3]);
              }
              if (isBind && !(bindData[1] & 1)) {
                bindData[4] = thisArg;
              }
              if (!isBind && bindData[1] & 1) {
                bitmask |= 8;
              }
              if (isCurry && !(bindData[1] & 4)) {
                bindData[5] = arity;
              }
              if (isPartial) {
                push.apply(bindData[2] || (bindData[2] = []), partialArgs);
              }
              if (isPartialRight) {
                unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
              }
              bindData[1] |= bitmask;
              return createWrapper.apply(null, bindData);
            }
            var creater = bitmask == 1 || bitmask === 17 ? baseBind : baseCreateWrapper;
            return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
          }
          function escapeHtmlChar(match) {
            return htmlEscapes[match];
          }
          function getIndexOf() {
            var result2 = (result2 = lodash.indexOf) === indexOf ? baseIndexOf : result2;
            return result2;
          }
          function isNative(value) {
            return typeof value == "function" && reNative.test(value);
          }
          var setBindData = !defineProperty ? noop5 : function(func, value) {
            descriptor.value = value;
            defineProperty(func, "__bindData__", descriptor);
            descriptor.value = null;
          };
          function shimIsPlainObject(value) {
            var ctor, result2;
            if (!(value && toString.call(value) == objectClass) || (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
              return false;
            }
            forIn(value, function(value2, key) {
              result2 = key;
            });
            return typeof result2 == "undefined" || hasOwnProperty2.call(value, result2);
          }
          function unescapeHtmlChar(match) {
            return htmlUnescapes[match];
          }
          function isArguments(value) {
            return value && typeof value == "object" && typeof value.length == "number" && toString.call(value) == argsClass || false;
          }
          var isArray = nativeIsArray || function(value) {
            return value && typeof value == "object" && typeof value.length == "number" && toString.call(value) == arrayClass || false;
          };
          var shimKeys = function(object) {
            var index2, iterable = object, result2 = [];
            if (!iterable)
              return result2;
            if (!objectTypes[typeof object])
              return result2;
            for (index2 in iterable) {
              if (hasOwnProperty2.call(iterable, index2)) {
                result2.push(index2);
              }
            }
            return result2;
          };
          var keys = !nativeKeys ? shimKeys : function(object) {
            if (!isObject(object)) {
              return [];
            }
            return nativeKeys(object);
          };
          var htmlEscapes = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;"
          };
          var htmlUnescapes = invert(htmlEscapes);
          var reEscapedHtml = RegExp2("(" + keys(htmlUnescapes).join("|") + ")", "g"), reUnescapedHtml = RegExp2("[" + keys(htmlEscapes).join("") + "]", "g");
          var assign = function(object, source, guard) {
            var index2, iterable = object, result2 = iterable;
            if (!iterable)
              return result2;
            var args = arguments, argsIndex = 0, argsLength = typeof guard == "number" ? 2 : args.length;
            if (argsLength > 3 && typeof args[argsLength - 2] == "function") {
              var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
            } else if (argsLength > 2 && typeof args[argsLength - 1] == "function") {
              callback = args[--argsLength];
            }
            while (++argsIndex < argsLength) {
              iterable = args[argsIndex];
              if (iterable && objectTypes[typeof iterable]) {
                var ownIndex = -1, ownProps = objectTypes[typeof iterable] && keys(iterable), length = ownProps ? ownProps.length : 0;
                while (++ownIndex < length) {
                  index2 = ownProps[ownIndex];
                  result2[index2] = callback ? callback(result2[index2], iterable[index2]) : iterable[index2];
                }
              }
            }
            return result2;
          };
          function clone(value, isDeep, callback, thisArg) {
            if (typeof isDeep != "boolean" && isDeep != null) {
              thisArg = callback;
              callback = isDeep;
              isDeep = false;
            }
            return baseClone(value, isDeep, typeof callback == "function" && baseCreateCallback(callback, thisArg, 1));
          }
          function cloneDeep2(value, callback, thisArg) {
            return baseClone(value, true, typeof callback == "function" && baseCreateCallback(callback, thisArg, 1));
          }
          function create(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties ? assign(result2, properties) : result2;
          }
          var defaults = function(object, source, guard) {
            var index2, iterable = object, result2 = iterable;
            if (!iterable)
              return result2;
            var args = arguments, argsIndex = 0, argsLength = typeof guard == "number" ? 2 : args.length;
            while (++argsIndex < argsLength) {
              iterable = args[argsIndex];
              if (iterable && objectTypes[typeof iterable]) {
                var ownIndex = -1, ownProps = objectTypes[typeof iterable] && keys(iterable), length = ownProps ? ownProps.length : 0;
                while (++ownIndex < length) {
                  index2 = ownProps[ownIndex];
                  if (typeof result2[index2] == "undefined")
                    result2[index2] = iterable[index2];
                }
              }
            }
            return result2;
          };
          function findKey(object, callback, thisArg) {
            var result2;
            callback = lodash.createCallback(callback, thisArg, 3);
            forOwn(object, function(value, key, object2) {
              if (callback(value, key, object2)) {
                result2 = key;
                return false;
              }
            });
            return result2;
          }
          function findLastKey(object, callback, thisArg) {
            var result2;
            callback = lodash.createCallback(callback, thisArg, 3);
            forOwnRight(object, function(value, key, object2) {
              if (callback(value, key, object2)) {
                result2 = key;
                return false;
              }
            });
            return result2;
          }
          var forIn = function(collection, callback, thisArg) {
            var index2, iterable = collection, result2 = iterable;
            if (!iterable)
              return result2;
            if (!objectTypes[typeof iterable])
              return result2;
            callback = callback && typeof thisArg == "undefined" ? callback : baseCreateCallback(callback, thisArg, 3);
            for (index2 in iterable) {
              if (callback(iterable[index2], index2, collection) === false)
                return result2;
            }
            return result2;
          };
          function forInRight(object, callback, thisArg) {
            var pairs2 = [];
            forIn(object, function(value, key) {
              pairs2.push(key, value);
            });
            var length = pairs2.length;
            callback = baseCreateCallback(callback, thisArg, 3);
            while (length--) {
              if (callback(pairs2[length--], pairs2[length], object) === false) {
                break;
              }
            }
            return object;
          }
          var forOwn = function(collection, callback, thisArg) {
            var index2, iterable = collection, result2 = iterable;
            if (!iterable)
              return result2;
            if (!objectTypes[typeof iterable])
              return result2;
            callback = callback && typeof thisArg == "undefined" ? callback : baseCreateCallback(callback, thisArg, 3);
            var ownIndex = -1, ownProps = objectTypes[typeof iterable] && keys(iterable), length = ownProps ? ownProps.length : 0;
            while (++ownIndex < length) {
              index2 = ownProps[ownIndex];
              if (callback(iterable[index2], index2, collection) === false)
                return result2;
            }
            return result2;
          };
          function forOwnRight(object, callback, thisArg) {
            var props = keys(object), length = props.length;
            callback = baseCreateCallback(callback, thisArg, 3);
            while (length--) {
              var key = props[length];
              if (callback(object[key], key, object) === false) {
                break;
              }
            }
            return object;
          }
          function functions2(object) {
            var result2 = [];
            forIn(object, function(value, key) {
              if (isFunction(value)) {
                result2.push(key);
              }
            });
            return result2.sort();
          }
          function has(object, key) {
            return object ? hasOwnProperty2.call(object, key) : false;
          }
          function invert(object) {
            var index2 = -1, props = keys(object), length = props.length, result2 = {};
            while (++index2 < length) {
              var key = props[index2];
              result2[object[key]] = key;
            }
            return result2;
          }
          function isBoolean(value) {
            return value === true || value === false || value && typeof value == "object" && toString.call(value) == boolClass || false;
          }
          function isDate(value) {
            return value && typeof value == "object" && toString.call(value) == dateClass || false;
          }
          function isElement(value) {
            return value && value.nodeType === 1 || false;
          }
          function isEmpty(value) {
            var result2 = true;
            if (!value) {
              return result2;
            }
            var className = toString.call(value), length = value.length;
            if (className == arrayClass || className == stringClass || className == argsClass || className == objectClass && typeof length == "number" && isFunction(value.splice)) {
              return !length;
            }
            forOwn(value, function() {
              return result2 = false;
            });
            return result2;
          }
          function isEqual(a2, b2, callback, thisArg) {
            return baseIsEqual(a2, b2, typeof callback == "function" && baseCreateCallback(callback, thisArg, 2));
          }
          function isFinite2(value) {
            return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
          }
          function isFunction(value) {
            return typeof value == "function";
          }
          function isObject(value) {
            return !!(value && objectTypes[typeof value]);
          }
          function isNaN2(value) {
            return isNumber(value) && value != +value;
          }
          function isNull(value) {
            return value === null;
          }
          function isNumber(value) {
            return typeof value == "number" || value && typeof value == "object" && toString.call(value) == numberClass || false;
          }
          var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
            if (!(value && toString.call(value) == objectClass)) {
              return false;
            }
            var valueOf = value.valueOf, objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);
            return objProto ? value == objProto || getPrototypeOf(value) == objProto : shimIsPlainObject(value);
          };
          function isRegExp(value) {
            return value && typeof value == "object" && toString.call(value) == regexpClass || false;
          }
          function isString(value) {
            return typeof value == "string" || value && typeof value == "object" && toString.call(value) == stringClass || false;
          }
          function isUndefined(value) {
            return typeof value == "undefined";
          }
          function mapValues(object, callback, thisArg) {
            var result2 = {};
            callback = lodash.createCallback(callback, thisArg, 3);
            forOwn(object, function(value, key, object2) {
              result2[key] = callback(value, key, object2);
            });
            return result2;
          }
          function merge(object) {
            var args = arguments, length = 2;
            if (!isObject(object)) {
              return object;
            }
            if (typeof args[2] != "number") {
              length = args.length;
            }
            if (length > 3 && typeof args[length - 2] == "function") {
              var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
            } else if (length > 2 && typeof args[length - 1] == "function") {
              callback = args[--length];
            }
            var sources = slice(arguments, 1, length), index2 = -1, stackA = getArray(), stackB = getArray();
            while (++index2 < length) {
              baseMerge(object, sources[index2], callback, stackA, stackB);
            }
            releaseArray(stackA);
            releaseArray(stackB);
            return object;
          }
          function omit(object, callback, thisArg) {
            var result2 = {};
            if (typeof callback != "function") {
              var props = [];
              forIn(object, function(value, key2) {
                props.push(key2);
              });
              props = baseDifference(props, baseFlatten(arguments, true, false, 1));
              var index2 = -1, length = props.length;
              while (++index2 < length) {
                var key = props[index2];
                result2[key] = object[key];
              }
            } else {
              callback = lodash.createCallback(callback, thisArg, 3);
              forIn(object, function(value, key2, object2) {
                if (!callback(value, key2, object2)) {
                  result2[key2] = value;
                }
              });
            }
            return result2;
          }
          function pairs(object) {
            var index2 = -1, props = keys(object), length = props.length, result2 = Array2(length);
            while (++index2 < length) {
              var key = props[index2];
              result2[index2] = [key, object[key]];
            }
            return result2;
          }
          function pick(object, callback, thisArg) {
            var result2 = {};
            if (typeof callback != "function") {
              var index2 = -1, props = baseFlatten(arguments, true, false, 1), length = isObject(object) ? props.length : 0;
              while (++index2 < length) {
                var key = props[index2];
                if (key in object) {
                  result2[key] = object[key];
                }
              }
            } else {
              callback = lodash.createCallback(callback, thisArg, 3);
              forIn(object, function(value, key2, object2) {
                if (callback(value, key2, object2)) {
                  result2[key2] = value;
                }
              });
            }
            return result2;
          }
          function transform2(object, callback, accumulator, thisArg) {
            var isArr = isArray(object);
            if (accumulator == null) {
              if (isArr) {
                accumulator = [];
              } else {
                var ctor = object && object.constructor, proto = ctor && ctor.prototype;
                accumulator = baseCreate(proto);
              }
            }
            if (callback) {
              callback = lodash.createCallback(callback, thisArg, 4);
              (isArr ? forEach : forOwn)(object, function(value, index2, object2) {
                return callback(accumulator, value, index2, object2);
              });
            }
            return accumulator;
          }
          function values(object) {
            var index2 = -1, props = keys(object), length = props.length, result2 = Array2(length);
            while (++index2 < length) {
              result2[index2] = object[props[index2]];
            }
            return result2;
          }
          function at(collection) {
            var args = arguments, index2 = -1, props = baseFlatten(args, true, false, 1), length = args[2] && args[2][args[1]] === collection ? 1 : props.length, result2 = Array2(length);
            while (++index2 < length) {
              result2[index2] = collection[props[index2]];
            }
            return result2;
          }
          function contains(collection, target, fromIndex) {
            var index2 = -1, indexOf2 = getIndexOf(), length = collection ? collection.length : 0, result2 = false;
            fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
            if (isArray(collection)) {
              result2 = indexOf2(collection, target, fromIndex) > -1;
            } else if (typeof length == "number") {
              result2 = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf2(collection, target, fromIndex)) > -1;
            } else {
              forOwn(collection, function(value) {
                if (++index2 >= fromIndex) {
                  return !(result2 = value === target);
                }
              });
            }
            return result2;
          }
          var countBy = createAggregator(function(result2, value, key) {
            hasOwnProperty2.call(result2, key) ? result2[key]++ : result2[key] = 1;
          });
          function every(collection, callback, thisArg) {
            var result2 = true;
            callback = lodash.createCallback(callback, thisArg, 3);
            var index2 = -1, length = collection ? collection.length : 0;
            if (typeof length == "number") {
              while (++index2 < length) {
                if (!(result2 = !!callback(collection[index2], index2, collection))) {
                  break;
                }
              }
            } else {
              forOwn(collection, function(value, index3, collection2) {
                return result2 = !!callback(value, index3, collection2);
              });
            }
            return result2;
          }
          function filter(collection, callback, thisArg) {
            var result2 = [];
            callback = lodash.createCallback(callback, thisArg, 3);
            var index2 = -1, length = collection ? collection.length : 0;
            if (typeof length == "number") {
              while (++index2 < length) {
                var value = collection[index2];
                if (callback(value, index2, collection)) {
                  result2.push(value);
                }
              }
            } else {
              forOwn(collection, function(value2, index3, collection2) {
                if (callback(value2, index3, collection2)) {
                  result2.push(value2);
                }
              });
            }
            return result2;
          }
          function find(collection, callback, thisArg) {
            callback = lodash.createCallback(callback, thisArg, 3);
            var index2 = -1, length = collection ? collection.length : 0;
            if (typeof length == "number") {
              while (++index2 < length) {
                var value = collection[index2];
                if (callback(value, index2, collection)) {
                  return value;
                }
              }
            } else {
              var result2;
              forOwn(collection, function(value2, index3, collection2) {
                if (callback(value2, index3, collection2)) {
                  result2 = value2;
                  return false;
                }
              });
              return result2;
            }
          }
          function findLast(collection, callback, thisArg) {
            var result2;
            callback = lodash.createCallback(callback, thisArg, 3);
            forEachRight(collection, function(value, index2, collection2) {
              if (callback(value, index2, collection2)) {
                result2 = value;
                return false;
              }
            });
            return result2;
          }
          function forEach(collection, callback, thisArg) {
            var index2 = -1, length = collection ? collection.length : 0;
            callback = callback && typeof thisArg == "undefined" ? callback : baseCreateCallback(callback, thisArg, 3);
            if (typeof length == "number") {
              while (++index2 < length) {
                if (callback(collection[index2], index2, collection) === false) {
                  break;
                }
              }
            } else {
              forOwn(collection, callback);
            }
            return collection;
          }
          function forEachRight(collection, callback, thisArg) {
            var length = collection ? collection.length : 0;
            callback = callback && typeof thisArg == "undefined" ? callback : baseCreateCallback(callback, thisArg, 3);
            if (typeof length == "number") {
              while (length--) {
                if (callback(collection[length], length, collection) === false) {
                  break;
                }
              }
            } else {
              var props = keys(collection);
              length = props.length;
              forOwn(collection, function(value, key, collection2) {
                key = props ? props[--length] : --length;
                return callback(collection2[key], key, collection2);
              });
            }
            return collection;
          }
          var groupBy = createAggregator(function(result2, value, key) {
            (hasOwnProperty2.call(result2, key) ? result2[key] : result2[key] = []).push(value);
          });
          var indexBy = createAggregator(function(result2, value, key) {
            result2[key] = value;
          });
          function invoke(collection, methodName) {
            var args = slice(arguments, 2), index2 = -1, isFunc = typeof methodName == "function", length = collection ? collection.length : 0, result2 = Array2(typeof length == "number" ? length : 0);
            forEach(collection, function(value) {
              result2[++index2] = (isFunc ? methodName : value[methodName]).apply(value, args);
            });
            return result2;
          }
          function map(collection, callback, thisArg) {
            var index2 = -1, length = collection ? collection.length : 0;
            callback = lodash.createCallback(callback, thisArg, 3);
            if (typeof length == "number") {
              var result2 = Array2(length);
              while (++index2 < length) {
                result2[index2] = callback(collection[index2], index2, collection);
              }
            } else {
              result2 = [];
              forOwn(collection, function(value, key, collection2) {
                result2[++index2] = callback(value, key, collection2);
              });
            }
            return result2;
          }
          function max(collection, callback, thisArg) {
            var computed = -Infinity, result2 = computed;
            if (typeof callback != "function" && thisArg && thisArg[callback] === collection) {
              callback = null;
            }
            if (callback == null && isArray(collection)) {
              var index2 = -1, length = collection.length;
              while (++index2 < length) {
                var value = collection[index2];
                if (value > result2) {
                  result2 = value;
                }
              }
            } else {
              callback = callback == null && isString(collection) ? charAtCallback : lodash.createCallback(callback, thisArg, 3);
              forEach(collection, function(value2, index3, collection2) {
                var current = callback(value2, index3, collection2);
                if (current > computed) {
                  computed = current;
                  result2 = value2;
                }
              });
            }
            return result2;
          }
          function min(collection, callback, thisArg) {
            var computed = Infinity, result2 = computed;
            if (typeof callback != "function" && thisArg && thisArg[callback] === collection) {
              callback = null;
            }
            if (callback == null && isArray(collection)) {
              var index2 = -1, length = collection.length;
              while (++index2 < length) {
                var value = collection[index2];
                if (value < result2) {
                  result2 = value;
                }
              }
            } else {
              callback = callback == null && isString(collection) ? charAtCallback : lodash.createCallback(callback, thisArg, 3);
              forEach(collection, function(value2, index3, collection2) {
                var current = callback(value2, index3, collection2);
                if (current < computed) {
                  computed = current;
                  result2 = value2;
                }
              });
            }
            return result2;
          }
          var pluck = map;
          function reduce2(collection, callback, accumulator, thisArg) {
            if (!collection)
              return accumulator;
            var noaccum = arguments.length < 3;
            callback = lodash.createCallback(callback, thisArg, 4);
            var index2 = -1, length = collection.length;
            if (typeof length == "number") {
              if (noaccum) {
                accumulator = collection[++index2];
              }
              while (++index2 < length) {
                accumulator = callback(accumulator, collection[index2], index2, collection);
              }
            } else {
              forOwn(collection, function(value, index3, collection2) {
                accumulator = noaccum ? (noaccum = false, value) : callback(accumulator, value, index3, collection2);
              });
            }
            return accumulator;
          }
          function reduceRight(collection, callback, accumulator, thisArg) {
            var noaccum = arguments.length < 3;
            callback = lodash.createCallback(callback, thisArg, 4);
            forEachRight(collection, function(value, index2, collection2) {
              accumulator = noaccum ? (noaccum = false, value) : callback(accumulator, value, index2, collection2);
            });
            return accumulator;
          }
          function reject2(collection, callback, thisArg) {
            callback = lodash.createCallback(callback, thisArg, 3);
            return filter(collection, function(value, index2, collection2) {
              return !callback(value, index2, collection2);
            });
          }
          function sample2(collection, n2, guard) {
            if (collection && typeof collection.length != "number") {
              collection = values(collection);
            }
            if (n2 == null || guard) {
              return collection ? collection[baseRandom(0, collection.length - 1)] : undefined2;
            }
            var result2 = shuffle(collection);
            result2.length = nativeMin(nativeMax(0, n2), result2.length);
            return result2;
          }
          function shuffle(collection) {
            var index2 = -1, length = collection ? collection.length : 0, result2 = Array2(typeof length == "number" ? length : 0);
            forEach(collection, function(value) {
              var rand = baseRandom(0, ++index2);
              result2[index2] = result2[rand];
              result2[rand] = value;
            });
            return result2;
          }
          function size(collection) {
            var length = collection ? collection.length : 0;
            return typeof length == "number" ? length : keys(collection).length;
          }
          function some(collection, callback, thisArg) {
            var result2;
            callback = lodash.createCallback(callback, thisArg, 3);
            var index2 = -1, length = collection ? collection.length : 0;
            if (typeof length == "number") {
              while (++index2 < length) {
                if (result2 = callback(collection[index2], index2, collection)) {
                  break;
                }
              }
            } else {
              forOwn(collection, function(value, index3, collection2) {
                return !(result2 = callback(value, index3, collection2));
              });
            }
            return !!result2;
          }
          function sortBy(collection, callback, thisArg) {
            var index2 = -1, isArr = isArray(callback), length = collection ? collection.length : 0, result2 = Array2(typeof length == "number" ? length : 0);
            if (!isArr) {
              callback = lodash.createCallback(callback, thisArg, 3);
            }
            forEach(collection, function(value, key, collection2) {
              var object2 = result2[++index2] = getObject();
              if (isArr) {
                object2.criteria = map(callback, function(key2) {
                  return value[key2];
                });
              } else {
                (object2.criteria = getArray())[0] = callback(value, key, collection2);
              }
              object2.index = index2;
              object2.value = value;
            });
            length = result2.length;
            result2.sort(compareAscending);
            while (length--) {
              var object = result2[length];
              result2[length] = object.value;
              if (!isArr) {
                releaseArray(object.criteria);
              }
              releaseObject(object);
            }
            return result2;
          }
          function toArray(collection) {
            if (collection && typeof collection.length == "number") {
              return slice(collection);
            }
            return values(collection);
          }
          var where = filter;
          function compact(array) {
            var index2 = -1, length = array ? array.length : 0, result2 = [];
            while (++index2 < length) {
              var value = array[index2];
              if (value) {
                result2.push(value);
              }
            }
            return result2;
          }
          function difference(array) {
            return baseDifference(array, baseFlatten(arguments, true, true, 1));
          }
          function findIndex(array, callback, thisArg) {
            var index2 = -1, length = array ? array.length : 0;
            callback = lodash.createCallback(callback, thisArg, 3);
            while (++index2 < length) {
              if (callback(array[index2], index2, array)) {
                return index2;
              }
            }
            return -1;
          }
          function findLastIndex(array, callback, thisArg) {
            var length = array ? array.length : 0;
            callback = lodash.createCallback(callback, thisArg, 3);
            while (length--) {
              if (callback(array[length], length, array)) {
                return length;
              }
            }
            return -1;
          }
          function first(array, callback, thisArg) {
            var n2 = 0, length = array ? array.length : 0;
            if (typeof callback != "number" && callback != null) {
              var index2 = -1;
              callback = lodash.createCallback(callback, thisArg, 3);
              while (++index2 < length && callback(array[index2], index2, array)) {
                n2++;
              }
            } else {
              n2 = callback;
              if (n2 == null || thisArg) {
                return array ? array[0] : undefined2;
              }
            }
            return slice(array, 0, nativeMin(nativeMax(0, n2), length));
          }
          function flatten(array, isShallow, callback, thisArg) {
            if (typeof isShallow != "boolean" && isShallow != null) {
              thisArg = callback;
              callback = typeof isShallow != "function" && thisArg && thisArg[isShallow] === array ? null : isShallow;
              isShallow = false;
            }
            if (callback != null) {
              array = map(array, callback, thisArg);
            }
            return baseFlatten(array, isShallow);
          }
          function indexOf(array, value, fromIndex) {
            if (typeof fromIndex == "number") {
              var length = array ? array.length : 0;
              fromIndex = fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0;
            } else if (fromIndex) {
              var index2 = sortedIndex(array, value);
              return array[index2] === value ? index2 : -1;
            }
            return baseIndexOf(array, value, fromIndex);
          }
          function initial2(array, callback, thisArg) {
            var n2 = 0, length = array ? array.length : 0;
            if (typeof callback != "number" && callback != null) {
              var index2 = length;
              callback = lodash.createCallback(callback, thisArg, 3);
              while (index2-- && callback(array[index2], index2, array)) {
                n2++;
              }
            } else {
              n2 = callback == null || thisArg ? 1 : callback || n2;
            }
            return slice(array, 0, nativeMin(nativeMax(0, length - n2), length));
          }
          function intersection() {
            var args = [], argsIndex = -1, argsLength = arguments.length, caches = getArray(), indexOf2 = getIndexOf(), trustIndexOf = indexOf2 === baseIndexOf, seen = getArray();
            while (++argsIndex < argsLength) {
              var value = arguments[argsIndex];
              if (isArray(value) || isArguments(value)) {
                args.push(value);
                caches.push(trustIndexOf && value.length >= largeArraySize && createCache(argsIndex ? args[argsIndex] : seen));
              }
            }
            var array = args[0], index2 = -1, length = array ? array.length : 0, result2 = [];
            outer:
              while (++index2 < length) {
                var cache = caches[0];
                value = array[index2];
                if ((cache ? cacheIndexOf(cache, value) : indexOf2(seen, value)) < 0) {
                  argsIndex = argsLength;
                  (cache || seen).push(value);
                  while (--argsIndex) {
                    cache = caches[argsIndex];
                    if ((cache ? cacheIndexOf(cache, value) : indexOf2(args[argsIndex], value)) < 0) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                }
              }
            while (argsLength--) {
              cache = caches[argsLength];
              if (cache) {
                releaseObject(cache);
              }
            }
            releaseArray(caches);
            releaseArray(seen);
            return result2;
          }
          function last(array, callback, thisArg) {
            var n2 = 0, length = array ? array.length : 0;
            if (typeof callback != "number" && callback != null) {
              var index2 = length;
              callback = lodash.createCallback(callback, thisArg, 3);
              while (index2-- && callback(array[index2], index2, array)) {
                n2++;
              }
            } else {
              n2 = callback;
              if (n2 == null || thisArg) {
                return array ? array[length - 1] : undefined2;
              }
            }
            return slice(array, nativeMax(0, length - n2));
          }
          function lastIndexOf(array, value, fromIndex) {
            var index2 = array ? array.length : 0;
            if (typeof fromIndex == "number") {
              index2 = (fromIndex < 0 ? nativeMax(0, index2 + fromIndex) : nativeMin(fromIndex, index2 - 1)) + 1;
            }
            while (index2--) {
              if (array[index2] === value) {
                return index2;
              }
            }
            return -1;
          }
          function pull(array) {
            var args = arguments, argsIndex = 0, argsLength = args.length, length = array ? array.length : 0;
            while (++argsIndex < argsLength) {
              var index2 = -1, value = args[argsIndex];
              while (++index2 < length) {
                if (array[index2] === value) {
                  splice.call(array, index2--, 1);
                  length--;
                }
              }
            }
            return array;
          }
          function range(start, end, step) {
            start = +start || 0;
            step = typeof step == "number" ? step : +step || 1;
            if (end == null) {
              end = start;
              start = 0;
            }
            var index2 = -1, length = nativeMax(0, ceil((end - start) / (step || 1))), result2 = Array2(length);
            while (++index2 < length) {
              result2[index2] = start;
              start += step;
            }
            return result2;
          }
          function remove(array, callback, thisArg) {
            var index2 = -1, length = array ? array.length : 0, result2 = [];
            callback = lodash.createCallback(callback, thisArg, 3);
            while (++index2 < length) {
              var value = array[index2];
              if (callback(value, index2, array)) {
                result2.push(value);
                splice.call(array, index2--, 1);
                length--;
              }
            }
            return result2;
          }
          function rest(array, callback, thisArg) {
            if (typeof callback != "number" && callback != null) {
              var n2 = 0, index2 = -1, length = array ? array.length : 0;
              callback = lodash.createCallback(callback, thisArg, 3);
              while (++index2 < length && callback(array[index2], index2, array)) {
                n2++;
              }
            } else {
              n2 = callback == null || thisArg ? 1 : nativeMax(0, callback);
            }
            return slice(array, n2);
          }
          function sortedIndex(array, value, callback, thisArg) {
            var low = 0, high = array ? array.length : low;
            callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
            value = callback(value);
            while (low < high) {
              var mid = low + high >>> 1;
              callback(array[mid]) < value ? low = mid + 1 : high = mid;
            }
            return low;
          }
          function union() {
            return baseUniq(baseFlatten(arguments, true, true));
          }
          function uniq(array, isSorted, callback, thisArg) {
            if (typeof isSorted != "boolean" && isSorted != null) {
              thisArg = callback;
              callback = typeof isSorted != "function" && thisArg && thisArg[isSorted] === array ? null : isSorted;
              isSorted = false;
            }
            if (callback != null) {
              callback = lodash.createCallback(callback, thisArg, 3);
            }
            return baseUniq(array, isSorted, callback);
          }
          function without(array) {
            return baseDifference(array, slice(arguments, 1));
          }
          function xor() {
            var index2 = -1, length = arguments.length;
            while (++index2 < length) {
              var array = arguments[index2];
              if (isArray(array) || isArguments(array)) {
                var result2 = result2 ? baseUniq(baseDifference(result2, array).concat(baseDifference(array, result2))) : array;
              }
            }
            return result2 || [];
          }
          function zip() {
            var array = arguments.length > 1 ? arguments : arguments[0], index2 = -1, length = array ? max(pluck(array, "length")) : 0, result2 = Array2(length < 0 ? 0 : length);
            while (++index2 < length) {
              result2[index2] = pluck(array, index2);
            }
            return result2;
          }
          function zipObject(keys2, values2) {
            var index2 = -1, length = keys2 ? keys2.length : 0, result2 = {};
            if (!values2 && length && !isArray(keys2[0])) {
              values2 = [];
            }
            while (++index2 < length) {
              var key = keys2[index2];
              if (values2) {
                result2[key] = values2[index2];
              } else if (key) {
                result2[key[0]] = key[1];
              }
            }
            return result2;
          }
          function after(n2, func) {
            if (!isFunction(func)) {
              throw new TypeError2();
            }
            return function() {
              if (--n2 < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function bind(func, thisArg) {
            return arguments.length > 2 ? createWrapper(func, 17, slice(arguments, 2), null, thisArg) : createWrapper(func, 1, null, null, thisArg);
          }
          function bindAll(object) {
            var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions2(object), index2 = -1, length = funcs.length;
            while (++index2 < length) {
              var key = funcs[index2];
              object[key] = createWrapper(object[key], 1, null, null, object);
            }
            return object;
          }
          function bindKey(object, key) {
            return arguments.length > 2 ? createWrapper(key, 19, slice(arguments, 2), null, object) : createWrapper(key, 3, null, null, object);
          }
          function compose() {
            var funcs = arguments, length = funcs.length;
            while (length--) {
              if (!isFunction(funcs[length])) {
                throw new TypeError2();
              }
            }
            return function() {
              var args = arguments, length2 = funcs.length;
              while (length2--) {
                args = [funcs[length2].apply(this, args)];
              }
              return args[0];
            };
          }
          function curry(func, arity) {
            arity = typeof arity == "number" ? arity : +arity || func.length;
            return createWrapper(func, 4, null, null, null, arity);
          }
          function debounce2(func, wait, options) {
            var args, maxTimeoutId, result2, stamp, thisArg, timeoutId, trailingCall, lastCalled = 0, maxWait = false, trailing = true;
            if (!isFunction(func)) {
              throw new TypeError2();
            }
            wait = nativeMax(0, wait) || 0;
            if (options === true) {
              var leading = true;
              trailing = false;
            } else if (isObject(options)) {
              leading = options.leading;
              maxWait = "maxWait" in options && (nativeMax(wait, options.maxWait) || 0);
              trailing = "trailing" in options ? options.trailing : trailing;
            }
            var delayed = function() {
              var remaining = wait - (now() - stamp);
              if (remaining <= 0) {
                if (maxTimeoutId) {
                  clearTimeout2(maxTimeoutId);
                }
                var isCalled = trailingCall;
                maxTimeoutId = timeoutId = trailingCall = undefined2;
                if (isCalled) {
                  lastCalled = now();
                  result2 = func.apply(thisArg, args);
                  if (!timeoutId && !maxTimeoutId) {
                    args = thisArg = null;
                  }
                }
              } else {
                timeoutId = setTimeout2(delayed, remaining);
              }
            };
            var maxDelayed = function() {
              if (timeoutId) {
                clearTimeout2(timeoutId);
              }
              maxTimeoutId = timeoutId = trailingCall = undefined2;
              if (trailing || maxWait !== wait) {
                lastCalled = now();
                result2 = func.apply(thisArg, args);
                if (!timeoutId && !maxTimeoutId) {
                  args = thisArg = null;
                }
              }
            };
            return function() {
              args = arguments;
              stamp = now();
              thisArg = this;
              trailingCall = trailing && (timeoutId || !leading);
              if (maxWait === false) {
                var leadingCall = leading && !timeoutId;
              } else {
                if (!maxTimeoutId && !leading) {
                  lastCalled = stamp;
                }
                var remaining = maxWait - (stamp - lastCalled), isCalled = remaining <= 0;
                if (isCalled) {
                  if (maxTimeoutId) {
                    maxTimeoutId = clearTimeout2(maxTimeoutId);
                  }
                  lastCalled = stamp;
                  result2 = func.apply(thisArg, args);
                } else if (!maxTimeoutId) {
                  maxTimeoutId = setTimeout2(maxDelayed, remaining);
                }
              }
              if (isCalled && timeoutId) {
                timeoutId = clearTimeout2(timeoutId);
              } else if (!timeoutId && wait !== maxWait) {
                timeoutId = setTimeout2(delayed, wait);
              }
              if (leadingCall) {
                isCalled = true;
                result2 = func.apply(thisArg, args);
              }
              if (isCalled && !timeoutId && !maxTimeoutId) {
                args = thisArg = null;
              }
              return result2;
            };
          }
          function defer(func) {
            if (!isFunction(func)) {
              throw new TypeError2();
            }
            var args = slice(arguments, 1);
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, 1);
          }
          function delay(func, wait) {
            if (!isFunction(func)) {
              throw new TypeError2();
            }
            var args = slice(arguments, 2);
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function memoize2(func, resolver) {
            if (!isFunction(func)) {
              throw new TypeError2();
            }
            var memoized = function() {
              var cache = memoized.cache, key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];
              return hasOwnProperty2.call(cache, key) ? cache[key] : cache[key] = func.apply(this, arguments);
            };
            memoized.cache = {};
            return memoized;
          }
          function once(func) {
            var ran, result2;
            if (!isFunction(func)) {
              throw new TypeError2();
            }
            return function() {
              if (ran) {
                return result2;
              }
              ran = true;
              result2 = func.apply(this, arguments);
              func = null;
              return result2;
            };
          }
          function partial(func) {
            return createWrapper(func, 16, slice(arguments, 1));
          }
          function partialRight(func) {
            return createWrapper(func, 32, null, slice(arguments, 1));
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (!isFunction(func)) {
              throw new TypeError2();
            }
            if (options === false) {
              leading = false;
            } else if (isObject(options)) {
              leading = "leading" in options ? options.leading : leading;
              trailing = "trailing" in options ? options.trailing : trailing;
            }
            debounceOptions.leading = leading;
            debounceOptions.maxWait = wait;
            debounceOptions.trailing = trailing;
            return debounce2(func, wait, debounceOptions);
          }
          function wrap(value, wrapper) {
            return createWrapper(wrapper, 16, [value]);
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function createCallback(func, thisArg, argCount) {
            var type = typeof func;
            if (func == null || type == "function") {
              return baseCreateCallback(func, thisArg, argCount);
            }
            if (type != "object") {
              return property(func);
            }
            var props = keys(func), key = props[0], a2 = func[key];
            if (props.length == 1 && a2 === a2 && !isObject(a2)) {
              return function(object) {
                var b2 = object[key];
                return a2 === b2 && (a2 !== 0 || 1 / a2 == 1 / b2);
              };
            }
            return function(object) {
              var length = props.length, result2 = false;
              while (length--) {
                if (!(result2 = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
                  break;
                }
              }
              return result2;
            };
          }
          function escape(string) {
            return string == null ? "" : String2(string).replace(reUnescapedHtml, escapeHtmlChar);
          }
          function identity(value) {
            return value;
          }
          function mixin(object, source, options) {
            var chain2 = true, methodNames = source && functions2(source);
            if (!source || !options && !methodNames.length) {
              if (options == null) {
                options = source;
              }
              ctor = lodashWrapper;
              source = object;
              object = lodash;
              methodNames = functions2(source);
            }
            if (options === false) {
              chain2 = false;
            } else if (isObject(options) && "chain" in options) {
              chain2 = options.chain;
            }
            var ctor = object, isFunc = isFunction(ctor);
            forEach(methodNames, function(methodName) {
              var func = object[methodName] = source[methodName];
              if (isFunc) {
                ctor.prototype[methodName] = function() {
                  var chainAll = this.__chain__, value = this.__wrapped__, args = [value];
                  push.apply(args, arguments);
                  var result2 = func.apply(object, args);
                  if (chain2 || chainAll) {
                    if (value === result2 && isObject(result2)) {
                      return this;
                    }
                    result2 = new ctor(result2);
                    result2.__chain__ = chainAll;
                  }
                  return result2;
                };
              }
            });
          }
          function noConflict() {
            context._ = oldDash;
            return this;
          }
          function noop5() {
          }
          var now = isNative(now = Date2.now) && now || function() {
            return new Date2().getTime();
          };
          var parseInt2 = nativeParseInt(whitespace + "08") == 8 ? nativeParseInt : function(value, radix) {
            return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, "") : value, radix || 0);
          };
          function property(key) {
            return function(object) {
              return object[key];
            };
          }
          function random3(min2, max2, floating) {
            var noMin = min2 == null, noMax = max2 == null;
            if (floating == null) {
              if (typeof min2 == "boolean" && noMax) {
                floating = min2;
                min2 = 1;
              } else if (!noMax && typeof max2 == "boolean") {
                floating = max2;
                noMax = true;
              }
            }
            if (noMin && noMax) {
              max2 = 1;
            }
            min2 = +min2 || 0;
            if (noMax) {
              max2 = min2;
              min2 = 0;
            } else {
              max2 = +max2 || 0;
            }
            if (floating || min2 % 1 || max2 % 1) {
              var rand = nativeRandom();
              return nativeMin(min2 + rand * (max2 - min2 + parseFloat("1e-" + ((rand + "").length - 1))), max2);
            }
            return baseRandom(min2, max2);
          }
          function result(object, key) {
            if (object) {
              var value = object[key];
              return isFunction(value) ? object[key]() : value;
            }
          }
          function template(text, data, options) {
            var settings = lodash.templateSettings;
            text = String2(text || "");
            options = defaults({}, options, settings);
            var imports = defaults({}, options.imports, settings.imports), importsKeys = keys(imports), importsValues = values(imports);
            var isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2(
              (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
              "g"
            );
            text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += text.slice(index2, offset).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index2 = offset + match.length;
              return match;
            });
            source += "';\n";
            var variable = options.variable, hasVariable = variable;
            if (!hasVariable) {
              variable = "obj";
              source = "with (" + variable + ") {\n" + source + "\n}\n";
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + variable + ") {\n" + (hasVariable ? "" : variable + " || (" + variable + " = {});\n") + "var __t, __p = '', __e = _.escape" + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var sourceURL = "\n/*\n//# sourceURL=" + (options.sourceURL || "/lodash/template/source[" + templateCounter++ + "]") + "\n*/";
            try {
              var result2 = Function2(importsKeys, "return " + source + sourceURL).apply(undefined2, importsValues);
            } catch (e2) {
              e2.source = source;
              throw e2;
            }
            if (data) {
              return result2(data);
            }
            result2.source = source;
            return result2;
          }
          function times(n2, callback, thisArg) {
            n2 = (n2 = +n2) > -1 ? n2 : 0;
            var index2 = -1, result2 = Array2(n2);
            callback = baseCreateCallback(callback, thisArg, 1);
            while (++index2 < n2) {
              result2[index2] = callback(index2);
            }
            return result2;
          }
          function unescape(string) {
            return string == null ? "" : String2(string).replace(reEscapedHtml, unescapeHtmlChar);
          }
          function uniqueId(prefix) {
            var id = ++idCounter;
            return String2(prefix == null ? "" : prefix) + id;
          }
          function chain(value) {
            value = new lodashWrapper(value);
            value.__chain__ = true;
            return value;
          }
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          function wrapperChain() {
            this.__chain__ = true;
            return this;
          }
          function wrapperToString() {
            return String2(this.__wrapped__);
          }
          function wrapperValueOf() {
            return this.__wrapped__;
          }
          lodash.after = after;
          lodash.assign = assign;
          lodash.at = at;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.chain = chain;
          lodash.compact = compact;
          lodash.compose = compose;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.createCallback = createCallback;
          lodash.curry = curry;
          lodash.debounce = debounce2;
          lodash.defaults = defaults;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.filter = filter;
          lodash.flatten = flatten;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.functions = functions2;
          lodash.groupBy = groupBy;
          lodash.indexBy = indexBy;
          lodash.initial = initial2;
          lodash.intersection = intersection;
          lodash.invert = invert;
          lodash.invoke = invoke;
          lodash.keys = keys;
          lodash.map = map;
          lodash.mapValues = mapValues;
          lodash.max = max;
          lodash.memoize = memoize2;
          lodash.merge = merge;
          lodash.min = min;
          lodash.omit = omit;
          lodash.once = once;
          lodash.pairs = pairs;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.pick = pick;
          lodash.pluck = pluck;
          lodash.property = property;
          lodash.pull = pull;
          lodash.range = range;
          lodash.reject = reject2;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.shuffle = shuffle;
          lodash.sortBy = sortBy;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.times = times;
          lodash.toArray = toArray;
          lodash.transform = transform2;
          lodash.union = union;
          lodash.uniq = uniq;
          lodash.values = values;
          lodash.where = where;
          lodash.without = without;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.collect = map;
          lodash.drop = rest;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.extend = assign;
          lodash.methods = functions2;
          lodash.object = zipObject;
          lodash.select = filter;
          lodash.tail = rest;
          lodash.unique = uniq;
          lodash.unzip = zip;
          mixin(lodash);
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep2;
          lodash.contains = contains;
          lodash.escape = escape;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.has = has;
          lodash.identity = identity;
          lodash.indexOf = indexOf;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isBoolean = isBoolean;
          lodash.isDate = isDate;
          lodash.isElement = isElement;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction;
          lodash.isNaN = isNaN2;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject;
          lodash.isPlainObject = isPlainObject;
          lodash.isRegExp = isRegExp;
          lodash.isString = isString;
          lodash.isUndefined = isUndefined;
          lodash.lastIndexOf = lastIndexOf;
          lodash.mixin = mixin;
          lodash.noConflict = noConflict;
          lodash.noop = noop5;
          lodash.now = now;
          lodash.parseInt = parseInt2;
          lodash.random = random3;
          lodash.reduce = reduce2;
          lodash.reduceRight = reduceRight;
          lodash.result = result;
          lodash.runInContext = runInContext;
          lodash.size = size;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.template = template;
          lodash.unescape = unescape;
          lodash.uniqueId = uniqueId;
          lodash.all = every;
          lodash.any = some;
          lodash.detect = find;
          lodash.findWhere = find;
          lodash.foldl = reduce2;
          lodash.foldr = reduceRight;
          lodash.include = contains;
          lodash.inject = reduce2;
          mixin(function() {
            var source = {};
            forOwn(lodash, function(func, methodName) {
              if (!lodash.prototype[methodName]) {
                source[methodName] = func;
              }
            });
            return source;
          }(), false);
          lodash.first = first;
          lodash.last = last;
          lodash.sample = sample2;
          lodash.take = first;
          lodash.head = first;
          forOwn(lodash, function(func, methodName) {
            var callbackable = methodName !== "sample";
            if (!lodash.prototype[methodName]) {
              lodash.prototype[methodName] = function(n2, guard) {
                var chainAll = this.__chain__, result2 = func(this.__wrapped__, n2, guard);
                return !chainAll && (n2 == null || guard && !(callbackable && typeof n2 == "function")) ? result2 : new lodashWrapper(result2, chainAll);
              };
            }
          });
          lodash.VERSION = "2.4.2";
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.toString = wrapperToString;
          lodash.prototype.value = wrapperValueOf;
          lodash.prototype.valueOf = wrapperValueOf;
          forEach(["join", "pop", "shift"], function(methodName) {
            var func = arrayRef[methodName];
            lodash.prototype[methodName] = function() {
              var chainAll = this.__chain__, result2 = func.apply(this.__wrapped__, arguments);
              return chainAll ? new lodashWrapper(result2, chainAll) : result2;
            };
          });
          forEach(["push", "reverse", "sort", "unshift"], function(methodName) {
            var func = arrayRef[methodName];
            lodash.prototype[methodName] = function() {
              func.apply(this.__wrapped__, arguments);
              return this;
            };
          });
          forEach(["concat", "slice", "splice"], function(methodName) {
            var func = arrayRef[methodName];
            lodash.prototype[methodName] = function() {
              return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
            };
          });
          return lodash;
        }
        var _2 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _2;
          define(function() {
            return _2;
          });
        } else if (freeExports && freeModule) {
          if (moduleExports) {
            (freeModule.exports = _2)._ = _2;
          } else {
            freeExports._ = _2;
          }
        } else {
          root._ = _2;
        }
      }).call(exports);
    }
  });

  // node_modules/frequencyjs/lib/signal.js
  var require_signal = __commonJS({
    "node_modules/frequencyjs/lib/signal.js"(exports, module) {
      var _2 = require_lodash2();
      function defaultSampling(options) {
        var defaultSpectrum = 22050;
        if (!options.disableWarnings || !_2.contains(options.disableWarnings, "defaultSampling")) {
        }
        return defaultSpectrum;
      }
      var signal2 = function(sig, options) {
        if ("values" in sig && "sampling" in sig)
          return sig;
        options = options || {};
        var sampling = options.sampling || sig.sampling || defaultSampling(options);
        var curT = 0;
        var data = _2.map(sig, function(v2) {
          ret = { t: curT, value: v2 };
          curT = curT + 1 / sampling;
          return ret;
        });
        data.sampling = sampling;
        data.dt = 1 / sampling;
        data.values = function() {
          return _2.map(data, function(p2) {
            return p2.value;
          });
        };
        return data;
      };
      module.exports = signal2;
    }
  });

  // node_modules/frequencyjs/lib/utils/signals.js
  var require_signals = __commonJS({
    "node_modules/frequencyjs/lib/utils/signals.js"(exports, module) {
      module.exports = {
        triangle: function(period) {
          return function(idx) {
            return 1 - Math.abs((idx + period * 0.25) % period - period * 0.5) / period * 4;
          };
        },
        rectangle: function(period) {
          return function(idx) {
            return idx % period < period * 0.5 ? 1 : -1;
          };
        }
      };
    }
  });

  // node_modules/frequencyjs/lib/generator.js
  var require_generator = __commonJS({
    "node_modules/frequencyjs/lib/generator.js"(exports, module) {
      var dsp = require_dsp();
      var _2 = require_lodash2();
      var Signal = require_signal();
      var generator = function(genFunction, cfg) {
        var data = [];
        return {
          /** creates a signal
           *  call
           *   - create() [uses default: sampling=44100, length=1000]
           *   - create({sampling: 44100, length: 1000})
           */
          create: function(options) {
            options = _2.defaults(options || {}, { sampling: 44100, length: 1e3 });
            var signalData = _2.map(_2.range(options.length), function(idx) {
              return cfg.amplitude * genFunction(cfg.functionPeriod * cfg.frequency * idx / options.sampling);
            });
            var s2 = Signal(signalData, options);
            s2.amplitude = cfg.amplitude;
            s2.frequency = cfg.frequency;
            return s2;
          }
        };
      };
      var mergeTwoSignals = function(s1, s2) {
        var sigData = _2(s1).zip(s2).map(function(p2) {
          return p2[0].value + p2[1].value;
        }).value();
        return Signal(sigData, { sampling: s1.sampling });
      };
      var combinator = function(generators) {
        return {
          create: function(options) {
            options = _2.defaults(options || {}, { sampling: 44100, length: 1e3 });
            return _2(generators).invoke("create", options).reduce(mergeTwoSignals);
          }
        };
      };
      var Signals = require_signals();
      var Generators = {
        /** sine wave generator.
         *  call
         *   - sine() [uses default: frequency=440, phase = 0, amplitude: 1]
         *   - sine({frequency:440, phase:0, amplitude: 1})
         *  returns a generator for the sine wave
         */
        sine: function(options) {
          options = _2.defaults(options || {}, { frequency: 440, phase: 0, amplitude: 1 });
          options.functionPeriod = 2 * Math.PI;
          return generator(Math.sin, options);
        },
        sines: function(signals) {
          var gens = _2.map(signals, function(s2) {
            return Generators.sine(s2);
          });
          return combinator(gens);
        },
        triangle: function(options) {
          options = _2.defaults(options || {}, { frequency: 440, phase: 0, amplitude: 1 });
          options.functionPeriod = 1;
          return generator(Signals.triangle(1), options);
        },
        rectangle: function(options) {
          options = _2.defaults(options || {}, { frequency: 440, phase: 0, amplitude: 1 });
          options.functionPeriod = 1;
          return generator(Signals.rectangle(1), options);
        }
      };
      module.exports = Generators;
    }
  });

  // node_modules/frequencyjs/lib/spectrum.js
  var require_spectrum = __commonJS({
    "node_modules/frequencyjs/lib/spectrum.js"(exports, module) {
      var _2 = require_lodash2();
      var spectrumCreate = function(spectrumArray, sampling, signalLength) {
        var spectrum = _2.map(_2.range(spectrumArray.length), function(idx) {
          var freq = idx / signalLength * sampling;
          var freqFac = idx == 0 ? 0.5 : 1;
          return { frequency: freq, amplitude: spectrumArray[idx] * freqFac };
        });
        spectrum.dominantFrequency = function() {
          return _2.max(spectrum, function(s2) {
            return s2.amplitude;
          });
        };
        spectrum.amplitudes = function() {
          return _2.map(spectrum, function(v2) {
            return v2.amplitude;
          });
        };
        spectrum.sampling = sampling;
        return spectrum;
      };
      var timeDependentSpectrumCreate = function(spectrumArray, sampling) {
        var levels = Math.floor(Math.log(spectrumArray.length) / Math.log(2));
        var curLevel = levels - 1;
        var idx = Math.pow(2, curLevel);
        var spectrum = [];
        var cnt = 0;
        while (curLevel >= 0) {
          var freq = sampling * idx / spectrumArray.length;
          for (var i2 = idx; i2 < idx * 2; i2++) {
            var diffIdx = i2 - idx;
            var stepSize = spectrumArray.length / (idx * sampling);
            spectrum[i2] = {
              frequency: freq,
              amplitude: spectrumArray[i2],
              timeStart: diffIdx * stepSize,
              timeEnd: (diffIdx + 1) * stepSize,
              time: (diffIdx + 0.5) * stepSize
            };
          }
          curLevel = curLevel - 1;
          idx = idx / 2;
          cnt++;
        }
        spectrum[0] = { frequency: 0, amplitude: spectrumArray[0] };
        spectrum.dominantFrequency = function() {
          return _2.max(spectrum, function(s2) {
            return s2.amplitude;
          });
        };
        spectrum.amplitudes = function() {
          return _2.map(spectrum, function(v2) {
            return v2.amplitude;
          });
        };
        spectrum.sampling = sampling;
        return spectrum;
      };
      var Spectrum = function(spectrumArray, options) {
        if ("amplitudes" in spectrumArray)
          return spectrumArray;
        if ("timeDependent" in spectrumArray && spectrumArray.timeDependent)
          return timeDependentSpectrumCreate(spectrumArray, options.sampling);
        return spectrumCreate(spectrumArray, options.sampling, options.signalLength);
      };
      module.exports = Spectrum;
    }
  });

  // node_modules/frequencyjs/lib/transforms/dft.js
  var require_dft = __commonJS({
    "node_modules/frequencyjs/lib/transforms/dft.js"(exports, module) {
      var dsp = require_dsp();
      var dspCache = {};
      var identifier = function(options) {
        return options.length + ":" + options.sampling;
      };
      var prepare2 = function(options) {
        var id = identifier(options);
        if (!(id in dspCache)) {
          dspCache[id] = new dsp.DFT(options.length, options.sampling);
        }
        return dspCache[id];
      };
      module.exports = {
        name: "DFT DSP.JS",
        register: function(Transform) {
          Transform.register({
            name: "dft",
            forward: function(signal2, options) {
              options.length = signal2.length;
              var dft = prepare2(options);
              dft.forward(signal2.values());
              return dft.spectrum;
            },
            backward: function(spectrum, options) {
              options.length = spectrum.length;
              var dft = prepare2(options);
              dft.backward(signal);
              throw new Error("?? what to return ??");
            }
          });
        }
      };
    }
  });

  // node_modules/frequencyjs/lib/utils/poweroftwo.js
  var require_poweroftwo = __commonJS({
    "node_modules/frequencyjs/lib/utils/poweroftwo.js"(exports, module) {
      module.exports = function(number) {
        return number != 0 && !(number & number - 1);
      };
    }
  });

  // node_modules/frequencyjs/lib/transforms/fft.js
  var require_fft = __commonJS({
    "node_modules/frequencyjs/lib/transforms/fft.js"(exports, module) {
      var dsp = require_dsp();
      var isPowerOfTwo = require_poweroftwo();
      var dspCache = {};
      var identifier = function(options) {
        return options.length + ":" + options.sampling;
      };
      var prepare2 = function(options) {
        var id = identifier(options);
        if (!(id in dspCache)) {
          if (!isPowerOfTwo(options.length)) {
            throw new Error("FFT only works for a power of two signal length");
          }
          dspCache[id] = new dsp.FFT(options.length, options.sampling);
        }
        return dspCache[id];
      };
      module.exports = {
        name: "FFT DSP.JS",
        register: function(Transform) {
          Transform.register({
            name: "fft",
            forward: function(signal2, options) {
              options.length = signal2.length;
              var fft = prepare2(options);
              fft.forward(signal2.values());
              return fft.spectrum;
            },
            backward: function(spectrum, options) {
              options.length = spectrum.length;
              var fft = prepare2(options);
              fft.backward(signal);
              throw new Error("?? what to return ??");
            }
          });
        }
      };
    }
  });

  // node_modules/frequencyjs/lib/transforms/wavelets/haar.js
  var require_haar = __commonJS({
    "node_modules/frequencyjs/lib/transforms/wavelets/haar.js"(exports, module) {
      var haar = function(signal2, options) {
        var input = signal2.values();
        var copy = [];
        var res = [];
        var len = Math.floor(signal2.length / 2);
        while (len > 0) {
          for (var i2 = 0; i2 < len; i2++) {
            var scaling = (input[2 * i2] + input[2 * i2 + 1]) * 0.5;
            var wavelet = (input[2 * i2] - input[2 * i2 + 1]) * 0.5;
            copy[i2] = scaling;
            res[len + i2] = wavelet;
          }
          var tmp = copy;
          copy = input;
          input = tmp;
          len = Math.floor(len / 2);
        }
        res[0] = input[0];
        return res;
      };
      module.exports = {
        name: "DWT Haar",
        register: function(Transform) {
          Transform.register({
            name: "haar",
            forward: function(signal2, options) {
              var trans = haar(signal2);
              trans.timeDependent = true;
              return trans;
            },
            backward: function(spectrum, options) {
              options.length = spectrum.length;
              var dft = prepare(options);
              dft.backward(signal);
              throw new Error("?? what to return ??");
            }
          });
        }
      };
    }
  });

  // node_modules/frequencyjs/lib/transforms/wavelets/daubechiesCoefficients.js
  var require_daubechiesCoefficients = __commonJS({
    "node_modules/frequencyjs/lib/transforms/wavelets/daubechiesCoefficients.js"(exports, module) {
      var Daub1 = [
        0.7071067811865476,
        0.7071067811865476
      ];
      var Daub2 = [
        0.48296291314453416,
        0.8365163037378079,
        0.2241438680420134,
        -0.12940952255126037
      ];
      var Daub3 = [
        0.33267055295008263,
        0.8068915093110925,
        0.45987750211849154,
        -0.13501102001025458,
        -0.08544127388202666,
        0.03522629188570953
      ];
      var Daub4 = [
        0.2303778133088965,
        0.7148465705529157,
        0.6308807679298589,
        -0.027983769416859854,
        -0.18703481171909309,
        0.030841381835560764,
        0.0328830116668852,
        -0.010597401785069032
      ];
      var Daub5 = [
        0.16010239797419293,
        0.6038292697971896,
        0.7243085284377729,
        0.13842814590132074,
        -0.24229488706638203,
        -0.032244869584638375,
        0.07757149384004572,
        -0.006241490212798274,
        -0.012580751999081999,
        0.0033357252854737712
      ];
      var Daub6 = [
        0.11154074335010947,
        0.49462389039845306,
        0.7511339080210954,
        0.31525035170919763,
        -0.22626469396543983,
        -0.12976686756726194,
        0.09750160558732304,
        0.027522865530305727,
        -0.03158203931748603,
        5538422011614961e-19,
        0.004777257510945511,
        -0.0010773010853084796
      ];
      var Daub7 = [
        0.07785205408500918,
        0.3965393194819173,
        0.7291320908462351,
        0.4697822874051931,
        -0.14390600392856498,
        -0.22403618499387498,
        0.07130921926683026,
        0.08061260915108308,
        -0.03802993693501441,
        -0.01657454163066688,
        0.01255099855609984,
        4295779729213665e-19,
        -0.0018016407040474908,
        35371379997452024e-20
      ];
      var Daub8 = [
        0.05441584224310401,
        0.31287159091429995,
        0.6756307362972898,
        0.5853546836542067,
        -0.015829105256349306,
        -0.2840155429615469,
        4724845739132828e-19,
        0.12874742662047847,
        -0.017369301001807547,
        -0.044088253930794755,
        0.013981027917398282,
        0.008746094047405777,
        -0.004870352993451574,
        -39174037337694705e-20,
        6754494064505693e-19,
        -11747678412476953e-20
      ];
      var Daub9 = [
        0.038077947363878345,
        0.24383467461259034,
        0.6048231236901112,
        0.6572880780513005,
        0.13319738582500756,
        -0.2932737832791749,
        -0.09684078322297646,
        0.14854074933810638,
        0.03072568147933338,
        -0.06763282906132997,
        25094711483145197e-20,
        0.022361662123679096,
        -0.004723204757751397,
        -0.00428150368246343,
        0.0018476468830562265,
        23038576352319597e-20,
        -2519631889427101e-19,
        393473203162716e-19
      ];
      var Daub10 = [
        0.026670057900555554,
        0.1881768000776915,
        0.5272011889317256,
        0.6884590394536035,
        0.2811723436605775,
        -0.24984642432731538,
        -0.19594627437737705,
        0.12736934033579325,
        0.09305736460357235,
        -0.07139414716639708,
        -0.029457536821875813,
        0.033212674059341,
        0.0036065535669561697,
        -0.010733175483330575,
        0.001395351747052901,
        0.001992405295185056,
        -6858566949597116e-19,
        -11646685512928545e-20,
        9358867032006959e-20,
        -13264202894521244e-21
      ];
      var Daub11 = [
        0.018694297761471083,
        0.1440670211506245,
        0.44989976435604534,
        0.6856867749162006,
        0.41196436894790744,
        -0.16227524502749036,
        -0.27423084681794696,
        0.0660435881966832,
        0.14981201246637849,
        -0.046479955116684187,
        -0.0664387856950252,
        0.031335090219046076,
        0.020840904360181062,
        -0.0153648209062016,
        -0.0033408588730144454,
        0.004928417656059041,
        -3085928588151432e-19,
        -8930232506662646e-19,
        2491525235528235e-19,
        54439074699368475e-21,
        -34634984186984996e-21,
        449427427723651e-20
      ];
      var Daub12 = [
        0.013112257957229518,
        0.10956627282118515,
        0.37735513521421266,
        0.6571987225793071,
        0.5158864784278157,
        -0.04476388565377463,
        -0.3161784537527855,
        -0.023779257256069726,
        0.18247860592757967,
        0.00535956967435215,
        -0.09643212009650708,
        0.010849130255822185,
        0.04154627749508444,
        -0.01221864906974828,
        -0.012840825198300683,
        0.00671149900879551,
        0.0022486072409952378,
        -0.0021795036186277603,
        6545128212509596e-21,
        38865306282093143e-20,
        -8850410920820432e-20,
        -24241545757030785e-21,
        12776952219379767e-21,
        -1529071758068511e-21
      ];
      var Daub13 = [
        0.009202133538962367,
        0.08286124387290278,
        0.31199632216043804,
        0.6110558511587877,
        0.5888895704312189,
        0.08698572617964724,
        -0.31497290771138864,
        -0.12457673075081525,
        0.17947607942933985,
        0.07294893365677717,
        -0.10580761818793433,
        -0.026488406475343694,
        0.05613947710028343,
        0.0023799722540590786,
        -0.02383142071032365,
        0.003923941448797416,
        0.007255589401617566,
        -0.0027619112346568622,
        -0.001315673911892299,
        9323261308672633e-19,
        49251525126289464e-21,
        -1651289885565055e-19,
        30678537579325496e-21,
        10441930571408138e-21,
        -4700416479360868e-21,
        5220035098454864e-22
      ];
      var Daub14 = [
        0.006461153460087948,
        0.0623647588493989,
        0.2548502677926214,
        0.5543056179408938,
        0.6311878491048568,
        0.21867068775890652,
        -0.27168855227874805,
        -0.21803352999327605,
        0.1383952138648066,
        0.1399890165844607,
        -0.08674841156816969,
        -0.07154895550404614,
        0.05523712625921604,
        0.026981408307912916,
        -0.030185351540390634,
        -0.005615049530356959,
        0.01278949326633341,
        -746218989268385e-18,
        -0.0038496388680221874,
        0.001061691085606762,
        7080211542355279e-19,
        -3868319473129545e-19,
        -41777245770372596e-21,
        687550425269751e-19,
        -10337209184570774e-21,
        -4389704901781394e-21,
        17249946753678127e-22,
        -17871399683113592e-23
      ];
      var Daub15 = [
        0.004538537361578899,
        0.04674339489276627,
        0.20602386398699574,
        0.4926317717081396,
        0.6458131403574243,
        0.3390025354547315,
        -0.19320413960914543,
        -0.28888259656696563,
        0.06528295284877282,
        0.190146714007123,
        -0.039666176555790945,
        -0.1111209360372317,
        0.033877143923507685,
        0.05478055058450761,
        -0.025767007328439964,
        -0.020810050169693083,
        0.015083918027835902,
        0.005101000360407543,
        -0.006487734560315745,
        -24175649076162427e-20,
        0.0019433239803822114,
        -373482354137617e-18,
        -3595652443624688e-19,
        15589648992059973e-20,
        25792699155318936e-21,
        -28133296266047814e-21,
        336298718173758e-20,
        18112704079405772e-22,
        -6316882325881664e-22,
        6133359913305752e-23
      ];
      var Daub16 = [
        0.003189220925347738,
        0.034907714323673344,
        0.16506428348885313,
        0.4303127228460038,
        0.637356332083789,
        0.4402902568863569,
        -0.08975108940248964,
        -0.3270633105279177,
        -0.027918208133028276,
        0.2111906939471043,
        0.027340263752716042,
        -0.1323883055638104,
        -0.006239722752474872,
        0.07592423604427631,
        -0.007588974368857738,
        -0.03688839769173014,
        0.01029765964095597,
        0.013993768859828731,
        -0.006990014563413916,
        -0.00364427962149839,
        0.003128023381206269,
        40789698084971285e-20,
        -9410217493595676e-19,
        11424152003872239e-20,
        17478724522533817e-20,
        -6103596621410936e-20,
        -13945668988208893e-21,
        11336608661276258e-21,
        -10435713423116066e-22,
        -7363656785451205e-22,
        23087840868575457e-23,
        -2109339630100743e-23
      ];
      var Daub17 = [
        0.0022418070010373128,
        0.025985393703606044,
        0.1312149033078244,
        0.37035072415264114,
        0.6109966156846228,
        0.5183157640569378,
        0.027314970403293636,
        -0.32832074836396175,
        -0.1265997522158827,
        0.197310589565011,
        0.10113548917747027,
        -0.1268156917782863,
        -0.05709141963167693,
        0.08110598665416088,
        0.022312336178103798,
        -0.04692243838926974,
        -0.0032709555358192938,
        0.02273367658394627,
        -0.003042989981354637,
        -0.008602921520322855,
        0.0029679966915260947,
        0.0023012052421535457,
        -0.0014368453048029762,
        -32813251940983797e-20,
        4394654277686437e-19,
        -25610109566548458e-21,
        -8204803202453391e-20,
        23186813798745952e-21,
        69906009850767515e-22,
        -4505942477222988e-21,
        30165496099945573e-23,
        2957700933316857e-22,
        -842394844600268e-22,
        72674929685616085e-25
      ];
      var Daub18 = [
        0.0015763102184407605,
        0.019288531724146376,
        0.10358846582242359,
        0.3146789413370317,
        0.5718268077666072,
        0.5718016548886513,
        0.14722311196992816,
        -0.29365404073655876,
        -0.21648093400514298,
        0.14953397556537779,
        0.1670813127632574,
        -0.09233188415084628,
        -0.10675224665982849,
        0.06488721621190545,
        0.057051247738536884,
        -0.044526141902982326,
        -0.023733210395860002,
        0.02667070592647059,
        0.006262167954305707,
        -0.013051480946612001,
        11863003385811746e-20,
        0.004943343605466738,
        -0.0011187326669924971,
        -0.0013405962983361066,
        6284656829651457e-19,
        2135815619103407e-19,
        -19864855231174796e-20,
        -15359171235347246e-23,
        37412378807400385e-21,
        -8520602537446696e-21,
        -3332634478885822e-21,
        17687129836276155e-22,
        -7691632689885177e-23,
        -11760987670282317e-23,
        3068835863045175e-23,
        -25079344549485983e-25
      ];
      var Daub19 = [
        0.0011086697631817106,
        0.014281098450764397,
        0.08127811326545956,
        0.26438843174089677,
        0.5244363774646549,
        0.6017045491275379,
        0.26089495265103885,
        -0.22809139421548263,
        -0.28583863175582624,
        0.07465226970810326,
        0.21234974330627848,
        -0.03351854190230288,
        -0.1427856950387366,
        0.027584350625628667,
        0.08690675555581223,
        -0.02650123625012304,
        -0.04567422627723091,
        0.02162376740958505,
        0.019375549889176127,
        -0.013988388678535142,
        -0.005866922281012175,
        0.007040747367105243,
        7689543592575484e-19,
        -0.002687551800701582,
        34180865345859575e-20,
        7358025205054352e-19,
        -260676135678628e-18,
        -12460079173415878e-20,
        8711270467219923e-20,
        5105950487073886e-21,
        -16640176297154945e-21,
        30109643162965265e-22,
        1531931476691193e-21,
        -6862755657769143e-22,
        14470882987978445e-24,
        46369377757826045e-24,
        -11164020670358259e-24,
        8666848838997619e-25
      ];
      var Daub20 = [
        7799536136668463e-19,
        0.010549394624950399,
        0.06342378045908152,
        0.21994211355139703,
        0.4726961853109017,
        0.6104932389385939,
        0.36150229873933104,
        -0.13921208801148388,
        -0.32678680043403496,
        -0.016727088309077008,
        0.22829105081991632,
        0.0398502464577712,
        -0.15545875070726795,
        -0.024716827338613585,
        0.10229171917444256,
        0.005632246857307436,
        -0.06172289962468046,
        0.005874681811811827,
        0.03229429953076958,
        -0.00878932492390156,
        -0.01381052613715192,
        0.006721627302259457,
        0.004420542387045791,
        -0.0035814942596096226,
        -8315621728225569e-19,
        0.0013925596193231364,
        -5349759843997695e-20,
        -38510474869921763e-20,
        10153288973670291e-20,
        677428082837773e-19,
        -3710586183394713e-20,
        -4376143862183997e-21,
        72412482876736205e-22,
        -10119940100188862e-22,
        -6847079597000557e-22,
        26339242262700013e-23,
        20143220235505126e-26,
        -1814843248299696e-23,
        4056127055551833e-24,
        -29988364896193194e-26
      ];
      var Daub21 = [
        5488225098526838e-19,
        0.007776639052354784,
        0.049247771538177276,
        0.1813596254403815,
        0.4196879449393628,
        0.6015060949350038,
        0.4445904519276003,
        -0.03572291961725529,
        -0.3356640895305295,
        -0.11239707156845098,
        0.2115645276808724,
        0.1152332984396871,
        -0.1399404249325472,
        -0.08177594298086382,
        0.09660039032372422,
        0.04572340574922879,
        -0.06497750489373232,
        -0.018653859202118515,
        0.039726835427850445,
        0.0033577563903381107,
        -0.02089205367797908,
        0.002403470920805435,
        0.008988824381971912,
        -0.0028913343485889014,
        -0.002958374038932831,
        0.001716607040630624,
        6394185005120303e-19,
        -6906711170821016e-19,
        -3196406277680437e-20,
        19366465041650805e-20,
        -3635520250086338e-20,
        -34996659849874476e-21,
        1535482509276049e-20,
        2790330539814487e-21,
        -30900171645456993e-22,
        31660954423670305e-23,
        29921366304648526e-23,
        -10004008790305973e-23,
        -22540149746733303e-25,
        7058033541231122e-24,
        -14719541976503653e-25,
        10388055710237066e-26
      ];
      var Daub22 = [
        38626323149109823e-20,
        0.0057218546313345395,
        0.03806993723641108,
        0.14836754089011142,
        0.3677286834460375,
        0.5784327310095244,
        0.5079010906221639,
        0.07372450118363015,
        -0.3127265804282962,
        -0.2005684061048871,
        0.16409318810676649,
        0.1799731879928913,
        -0.09711079840911471,
        -0.1317681376866834,
        0.06807631439273222,
        0.08455737636682607,
        -0.05136425429744413,
        -0.046530811827506714,
        0.03697084662069802,
        0.02058670762756536,
        -0.023480001344493188,
        -0.006213782849364659,
        0.012564725218343373,
        3001373985076436e-19,
        -0.005455691986156717,
        0.0010442607391860253,
        0.0018270104956572791,
        -7706909881231197e-19,
        -42378739983918006e-20,
        3286094142136787e-19,
        4345899904532003e-20,
        -940522363481576e-19,
        11374349662125932e-21,
        17373756957561893e-21,
        -6166729316467578e-21,
        -15651791319951602e-22,
        12951820573188775e-22,
        -8779879873361287e-23,
        -12833362287517545e-23,
        37612287493373625e-24,
        16801714049229888e-25,
        -2729623146632976e-24,
        533593882166749e-24,
        -3602113484339555e-26
      ];
      var Daub23 = [
        27190419412828886e-20,
        0.004202748893183833,
        0.029310003657884116,
        0.12051553178397194,
        0.3184508138528652,
        0.5449311478735205,
        0.5510185172419194,
        0.18139262536384002,
        -0.2613921480306441,
        -0.27140209860784303,
        0.09212540708241805,
        0.22357365824204023,
        -0.03303744709428938,
        -0.16401132153187592,
        0.0202830745756493,
        0.11229704361810729,
        -0.02112621235622724,
        -0.0702073915749011,
        0.021765856834499976,
        0.038495332522569196,
        -0.01852351365015616,
        -0.017537101003035845,
        0.012751943931528287,
        0.006031840650024163,
        -0.007075319273706152,
        -0.0011348654733562516,
        0.003122876449818145,
        -2465014005163512e-19,
        -0.0010612312288866513,
        31942049270990115e-20,
        25676245200787374e-20,
        -1500218503490341e-19,
        -3378894834120904e-20,
        4426071203109246e-20,
        -26352078892491864e-22,
        -8347875567854625e-21,
        239756954684024e-20,
        8147574834779447e-22,
        -5339005405209421e-22,
        1853091785633965e-23,
        54175491795392784e-24,
        -13999354954379989e-24,
        -9472885901812052e-25,
        10504464536965433e-25,
        -19324051113134174e-26,
        1250203302351041e-26
      ];
      var Daub24 = [
        19143580094755136e-20,
        0.0030820817149054946,
        0.02248233994971641,
        0.0972622358336252,
        0.2729089160677263,
        0.504371040839925,
        0.574939221095542,
        0.2809855532337119,
        -0.18727140688515623,
        -0.31794307899936275,
        0.004776613684344728,
        0.23923738878031087,
        0.04252872964148383,
        -0.1711753513703469,
        -0.038777173577920016,
        0.12101630346922423,
        0.020980113709144814,
        -0.08216165420800167,
        -0.004578436241819222,
        0.05130162003998088,
        -0.004944709428125628,
        -0.02821310709490189,
        0.007661721881646586,
        0.013049970871085736,
        -0.006291435370018188,
        -0.004746568786323114,
        0.0037360461782825235,
        0.0011537649368394815,
        -0.0016964568189748244,
        -441618485614152e-19,
        586127059318311e-18,
        -11812332379695547e-20,
        -1460079817762617e-19,
        6559388639305635e-20,
        21832414604665582e-21,
        -20228882926126976e-21,
        13411577508091147e-24,
        3901100338597703e-21,
        -8980253143938407e-22,
        -4032507756879972e-22,
        21663396532785745e-23,
        -50576454197925e-23,
        -22557403881760862e-24,
        5157776789672e-21,
        4748375824256231e-25,
        -40246586445843797e-26,
        699180115763823e-25,
        -434278250380371e-26
      ];
      var Daub25 = [
        1348029793470189e-19,
        0.0022569595918547794,
        0.017186741254040155,
        0.07803586287213267,
        0.23169350788602183,
        0.4596834151460946,
        0.5816368967460578,
        0.3678850748029467,
        -0.09717464096463814,
        -0.3364730796417461,
        -0.08758761458765466,
        0.2245378197451017,
        0.11815528671995985,
        -0.15056021375057962,
        -0.09850861528996022,
        0.10663380501847795,
        0.0667521644940186,
        -0.0770841110565742,
        -0.03717396286112251,
        0.0536179093987795,
        0.015542605929102291,
        -0.03404232046065334,
        -0.0030798367948470366,
        0.018922804476627628,
        -0.0019894257822027366,
        -0.008860702618046369,
        0.0027269362587384956,
        0.003322707773973192,
        -0.0018424842902033313,
        -899977423746295e-18,
        8772581936748275e-19,
        11532124404663005e-20,
        -3098800990984698e-19,
        3543714523276059e-20,
        7904640003965528e-20,
        -27330481199600417e-21,
        -12771952931997837e-21,
        8990661393062588e-21,
        5232827708153076e-22,
        -17792013326536346e-22,
        3212037518862519e-22,
        19228067901423717e-23,
        -8656941732278507e-23,
        -26115985561117707e-25,
        9279224480081372e-24,
        -18804157550621554e-25,
        -2228474910228169e-25,
        15359015701626572e-26,
        -25276251634656447e-27,
        15096920828239108e-28
      ];
      var Daub26 = [
        9493795750710593e-20,
        0.0016505202335329882,
        0.0130975542925585,
        0.062274744025149605,
        0.1950394387167701,
        0.4132929622783564,
        0.5736690430342223,
        0.43915831178916626,
        0.0017740767809866858,
        -0.32638459369178,
        -0.1748399612893925,
        0.1812918323111227,
        0.18275540958967237,
        -0.10432390028592704,
        -0.1479771932752545,
        0.06982318611329237,
        0.10648240524980863,
        -0.053448561681483195,
        -0.06865475960403591,
        0.042232185796372036,
        0.03853571597111186,
        -0.03137811036306776,
        -0.017760903568358185,
        0.020734920179963826,
        0.005829580555318888,
        -0.01178549790619303,
        -5287383992626815e-19,
        0.005601947239423805,
        -939058250473829e-18,
        -0.002145530281567621,
        8383488056543616e-19,
        6161382204574344e-19,
        -43195570742618077e-20,
        -1060574748283804e-19,
        15747952386074935e-20,
        -5277795493037869e-21,
        -41096739963914775e-21,
        1074221540872195e-20,
        7000078682964987e-21,
        -3887400161856795e-21,
        -46504632206402627e-23,
        7939210633709952e-22,
        -10790042375786714e-23,
        -890446637016859e-22,
        340779562129073e-22,
        2169328259850323e-24,
        -3776010478532324e-24,
        6780047245828637e-25,
        10023031910465269e-26,
        -5840408185341171e-26,
        9130510016371797e-27,
        -5251871224244435e-28
      ];
      var Daub27 = [
        6687131385431931e-20,
        0.0012055312316732133,
        0.00995258878087662,
        0.04945259998290488,
        0.16292202750239332,
        0.3671102141253898,
        0.5538498609904801,
        0.493406122677999,
        0.10284085506182292,
        -0.2897168033145949,
        -0.24826458190326056,
        0.11482301951778535,
        0.22727328841417083,
        -0.03878641863180231,
        -0.1780317409590086,
        0.015799397460240484,
        0.13119797171715533,
        -0.014062751555808765,
        -0.09102290652956592,
        0.01731101826549371,
        0.05796940573471799,
        -0.018512493561998078,
        -0.03273906663102087,
        0.016146966922395666,
        0.015665595648924578,
        -0.011577186458976282,
        -0.005862096345462926,
        0.0068566356096848805,
        0.0013426268773036795,
        -0.0033328544695200063,
        14575296259317286e-20,
        0.001301177450244135,
        -34183512269154277e-20,
        -38790185741013276e-20,
        20197198796903268e-20,
        7660058387068577e-20,
        -7711145517797584e-20,
        -35174836149074453e-22,
        20634426477368854e-21,
        -3901164070638425e-21,
        -3657500908187105e-21,
        16343696247256378e-22,
        3050880686251999e-22,
        -34724681473943893e-23,
        32865589680551595e-24,
        40262550528669086e-24,
        -13213322739900565e-24,
        -13094656068569551e-25,
        15216149847785218e-25,
        -2415526928011131e-25,
        -43749862242936544e-27,
        22136620880676626e-27,
        -3295790122476586e-27,
        1828188352882425e-28
      ];
      var Daub28 = [
        4710807775014051e-20,
        879498515984387e-18,
        0.007542650377646859,
        0.039092608115405346,
        0.13513791425364105,
        0.32256336128552243,
        0.5249982316303355,
        0.5305162934414858,
        0.20017614404598444,
        -0.23049895404758253,
        -0.30132780953264177,
        0.0328578791633871,
        0.24580815137375955,
        0.03690688531571127,
        -0.18287733073298493,
        -0.04683823374455168,
        0.1346275679102261,
        0.0344786312750997,
        -0.09768535580565244,
        -0.0173419228313059,
        0.06774789550190934,
        0.0034480189555409512,
        -0.04333336861608628,
        0.004431732910062988,
        0.024688060010151867,
        -0.006815549764552309,
        -0.01206359196821849,
        0.005838816627748945,
        0.0047848631124542415,
        -0.003725461247074255,
        -0.0013603738456396924,
        0.0018759986682027956,
        14156723931404644e-20,
        -748674955911463e-18,
        11546560636589213e-20,
        22957909822334563e-20,
        -8903901490044488e-20,
        -49077134161902505e-21,
        36414012110508025e-21,
        4638664981394295e-21,
        -10043260413334226e-21,
        12479003175748342e-22,
        18403637345177692e-22,
        -6670215479954893e-22,
        -17574611732098427e-23,
        14906600135353622e-23,
        -8262387315626558e-24,
        -178413869087571e-22,
        5044047056383437e-24,
        6944540328946227e-25,
        -6077041247229011e-25,
        8492220011056382e-26,
        18673672637833906e-27,
        -83654904712588e-25,
        11888505334059015e-28,
        -6367772354714857e-29
      ];
      var Daub29 = [
        3318966279841525e-20,
        6409516803044435e-19,
        0.0057021265177733755,
        0.030773580221408376,
        0.11137011695174052,
        0.28065345597098296,
        0.4897588047621993,
        0.5513744327583752,
        0.2891052383358292,
        -0.15402873445990006,
        -0.33004094891758806,
        -0.055706800072940856,
        0.23610523615302595,
        0.11241917487318838,
        -0.16087798859418773,
        -0.10784594993872142,
        0.11447229589381826,
        0.08322074716244976,
        -0.0851254926156355,
        -0.055027489525325726,
        0.06347916458421186,
        0.030531543272704135,
        -0.04518798127778834,
        -0.012917142554266795,
        0.02947043187174764,
        0.002648327307678168,
        -0.01704122457360669,
        0.001737880332720511,
        0.008469725493560752,
        -0.0025508071277894726,
        -0.0034737989896811007,
        0.0018771209257236502,
        0.001087053942226063,
        -0.0010007783270856805,
        -20007113630767797e-20,
        4111283454742767e-19,
        -22920180412145e-18,
        -12930448400807207e-20,
        3645026068562775e-20,
        2913344750169041e-20,
        -16573283953066164e-21,
        -35936448040251875e-22,
        47506092464525525e-22,
        -3029054592052818e-22,
        -8975701750636281e-22,
        2633898386997697e-22,
        9387197411095864e-23,
        -6286156922010786e-23,
        10765919066191961e-25,
        7768978854770062e-24,
        -1893995386171984e-24,
        -3426800863263089e-25,
        24070994535093427e-26,
        -2940589250764533e-26,
        -7832509733627818e-27,
        31527624133703105e-28,
        -42856548700683443e-29,
        2219191311588303e-29
      ];
      var Daub30 = [
        23386161727314215e-21,
        4666379504285509e-19,
        0.004300797165048069,
        0.02413083267158838,
        0.0912383040670157,
        0.2420206709402141,
        0.4504878218533178,
        0.5575722329128364,
        0.36624268337162796,
        -0.06618367077593731,
        -0.3329669750208556,
        -0.14196851333008292,
        0.19946212158066431,
        0.17782987324483673,
        -0.11455821943270778,
        -0.1572368179599938,
        0.07277865897036442,
        0.12274774604500938,
        -0.053806465458257076,
        -0.08765869003638366,
        0.04380166467141773,
        0.0567123657447357,
        -0.03567339749675961,
        -0.03226375891935221,
        0.027078619595294184,
        0.015287960769857396,
        -0.01839974386811734,
        -0.005296859666131087,
        0.01091563165830489,
        6196717564977244e-19,
        -0.005530730148192003,
        8433845866620934e-19,
        0.002324520094060099,
        -8609276968110424e-19,
        -7678782504380919e-19,
        5050948239033468e-19,
        17248258423517096e-20,
        -21617183011696337e-20,
        -854830546758407e-20,
        6982008370808328e-20,
        -13397168632939717e-21,
        -16361524787254266e-21,
        7252145535890469e-21,
        23275490984936866e-22,
        -21872676769961665e-22,
        10994743385262033e-24,
        42616623260115723e-23,
        -10004146823545009e-23,
        -47643799651394533e-24,
        26054427549776254e-24,
        5553397861397054e-25,
        -3331105680467578e-24,
        6984862691832183e-25,
        16136229782709042e-26,
        -9461387997276803e-26,
        10001051313931712e-27,
        3239428638532286e-27,
        -11852375921015822e-28,
        154399757084762e-27,
        -7737942630954405e-30
      ];
      var Daub31 = [
        1648013386456141e-20,
        3394122037769957e-19,
        0.0032368840686277213,
        0.018853691612985914,
        0.07433609301164788,
        0.20701287448523534,
        0.40919220003742784,
        0.5511398409142755,
        0.4294688082061373,
        0.027169212497369463,
        -0.3109551183195075,
        -0.21797848552356336,
        0.14017828876527327,
        0.2249667114737371,
        -0.04992634916046824,
        -0.18696236089571544,
        0.015436988429488934,
        0.1450895009319932,
        -0.008139832273469236,
        -0.10761277332349563,
        0.01094129745236497,
        0.07535361174328141,
        -0.014880026618104822,
        -0.04861907546485433,
        0.016154171565985913,
        0.02804761936675617,
        -0.01427627527776352,
        -0.01390055293926653,
        0.010517639487371841,
        0.005516163573310993,
        -0.006520852375874612,
        -0.00142826422321891,
        0.0033930667767159317,
        -6397901106014601e-20,
        -0.001459041741985161,
        34313982969047345e-20,
        4998816175637223e-19,
        -23965834694029495e-20,
        -12434116172502287e-20,
        10895843504167668e-20,
        1501335727444533e-20,
        -3631255157860086e-20,
        4034520235184279e-21,
        8795301342692988e-21,
        -30351423658915096e-22,
        -13690602309429407e-22,
        9810015422044372e-22,
        5327250656974915e-23,
        -19759251291702062e-23,
        36168265173310047e-24,
        23283097138214097e-24,
        -10615296021502523e-24,
        -6474311687959861e-25,
        14085681510251775e-25,
        -2524043954153353e-25,
        -7348930032486264e-26,
        36921088088711296e-27,
        -332700896712598e-26,
        -1324334917243963e-27,
        44454670962919323e-29,
        -55594420505790146e-30,
        26993828797626656e-31
      ];
      var Daub32 = [
        11614633021350149e-21,
        24665669063809033e-20,
        0.002431261919572266,
        0.014681046381419136,
        0.06025749912033537,
        0.1757507836394389,
        0.36750962859734965,
        0.5343179193409539,
        0.4778091637339484,
        0.12063053826561783,
        -0.26669818147667557,
        -0.2774215815584272,
        0.06471335480551624,
        0.24831064235688016,
        0.024662444839697404,
        -0.1921023447085469,
        -0.04899511718467174,
        0.14523207947528666,
        0.04440490819993974,
        -0.10945611311608938,
        -0.029627872508447704,
        0.08087414063848396,
        0.014106151516106608,
        -0.05692631406247844,
        -0.0023802644649325738,
        0.03705145792354468,
        -0.004145907660827218,
        -0.021662822836391194,
        0.006167527310685675,
        0.011017400715406881,
        -0.005411568257275791,
        -0.004649216751184412,
        0.003627224640687865,
        0.0014689551004684678,
        -0.0019647405558217783,
        -2211678729579098e-19,
        8673058518450555e-19,
        -10245373106073962e-20,
        -3059654423826912e-19,
        10539154617398281e-20,
        8103678329134838e-20,
        -5259809282684323e-20,
        -12940457794055127e-21,
        18242684019806914e-21,
        -6361781532260255e-22,
        -4558309576264423e-21,
        1202889036321621e-21,
        7560047625595948e-22,
        -4285970693151457e-22,
        -500336186874823e-22,
        8965966311957729e-23,
        -12199243594833731e-24,
        -1104383021722649e-23,
        4250422311980593e-24,
        43843877999404743e-26,
        -5881091462634606e-25,
        8904723796221606e-26,
        3263270741332908e-26,
        -14309187651692024e-27,
        10756106535010622e-28,
        5361482229611802e-28,
        -16638004894334023e-29,
        2000715303810525e-29,
        -9421019139535079e-31
      ];
      var Daub33 = [
        8186358314175091e-21,
        17910161537027915e-20,
        0.0018227094351640843,
        0.01139594337458161,
        0.04861466653171619,
        0.14818631318005282,
        0.32671813011770756,
        0.5093761725149396,
        0.5112547705832675,
        0.20958235071305542,
        -0.20420262239854212,
        -0.31599741076656024,
        -0.01927833943695276,
        0.24542061211927912,
        0.09985155868033815,
        -0.17142809905185932,
        -0.11084413311671079,
        0.12196785640373461,
        0.09478808805061596,
        -0.09114696835133149,
        -0.07030248505405616,
        0.07019114394099653,
        0.04573456189389668,
        -0.05347125133582229,
        -0.025248582977476498,
        0.038687060760244966,
        0.010703265820019549,
        -0.025728761754732973,
        -0.002167758617353607,
        0.015316954115857666,
        -0.0015942887824146048,
        -0.00795354038705794,
        0.0023890624081659086,
        0.003480800953405712,
        -0.001860718214455796,
        -0.001204309257604659,
        0.0010743806963512913,
        2727305847336937e-19,
        -4908329007590351e-19,
        43931662517661856e-22,
        17804318982512455e-20,
        -41604385162737096e-21,
        -49295644234173015e-21,
        24233353988168903e-21,
        9070805757828453e-21,
        -8866121366757737e-21,
        -3607516102879772e-22,
        22883712761415273e-22,
        -44269234079528704e-23,
        -3985791291985944e-22,
        18224433325710535e-23,
        3377972703730854e-23,
        -39878381985188806e-24,
        36728635768381814e-25,
        5111211857347454e-24,
        -16713926772519324e-25,
        -2496402105246194e-25,
        2426833102305682e-25,
        -30495744539458635e-27,
        -14202368598899367e-27,
        5509414720765525e-27,
        -3343481218953279e-28,
        -21524883868333026e-29,
        6214740247174398e-29,
        -7196510545363322e-30,
        3289373678416306e-31
      ];
      var Daub34 = [
        5770510632730285e-21,
        129947620067953e-18,
        0.00136406139005905,
        0.008819889403884978,
        0.03904884135178594,
        0.1241524821113768,
        0.28776505923371454,
        0.47847874627937104,
        0.5305550996564632,
        0.290366329507275,
        -0.12824684217443716,
        -0.33152530150838694,
        -0.10389191551564048,
        0.21690722018742759,
        0.16660175041220746,
        -0.12733735822380116,
        -0.1609249271778668,
        0.07799184693794811,
        0.13412596027113613,
        -0.05448296806413905,
        -0.10294759699281408,
        0.043576094649631296,
        0.0731852354367956,
        -0.03701283841786245,
        -0.04743855964527776,
        0.030739746573959344,
        0.027228350756354196,
        -0.023671737922826366,
        -0.013143980016657161,
        0.01640937419986519,
        0.00471364926099981,
        -0.01004550670836152,
        -6194748845153873e-19,
        0.005334950768759936,
        -7692127975067837e-19,
        -0.002399453943537056,
        8589959874363662e-19,
        8751999064078689e-19,
        -5527355762144198e-19,
        -23267321402335316e-20,
        26507723975580577e-20,
        2660050018453442e-20,
        -9914697770780135e-20,
        13531172272496496e-21,
        28449514196978075e-21,
        -10576574942579506e-21,
        -5710826510998304e-21,
        4169871758547028e-21,
        4979718101421308e-22,
        -11163065348170084e-22,
        1448195708333185e-22,
        20259906666678593e-23,
        -752670174041259e-22,
        -1990346501531737e-23,
        1740423332936068e-23,
        -8665744261368722e-25,
        -2316501946995483e-24,
        6446378210323402e-25,
        13004103186094153e-26,
        -990477453763241e-25,
        10042087354617698e-27,
        60801253540001675e-28,
        -21078791089153017e-28,
        9799451158211598e-29,
        8579194051799733e-29,
        -23170837039064084e-30,
        25873383819356996e-31,
        -114894475448059e-30
      ];
      var Daub35 = [
        4067934061148559e-21,
        942146947557674e-19,
        0.0010191226803750982,
        0.006807292884319132,
        0.031236288511490715,
        0.10340445586147838,
        0.2513073789944933,
        0.4435927392240354,
        0.5370084275091661,
        0.36034564051804735,
        -0.04388388187393404,
        -0.32382286491211615,
        -0.18178697676672784,
        0.16604135749078092,
        0.2172992893210893,
        -0.06526287131067754,
        -0.19191958929859396,
        0.01930954466601835,
        0.1552924803962371,
        -0.004752680834111351,
        -0.12058552264339356,
        0.004734229172641949,
        0.08991354757072954,
        -0.009318558949903924,
        -0.06335603744044346,
        0.013228549585036555,
        0.04125469306470509,
        -0.014366839784220072,
        -0.024169497801660268,
        0.012766456715656745,
        0.012289436008118711,
        -0.00957779789923571,
        -0.00508599164923343,
        0.006137754586740521,
        0.0014280887940707622,
        -0.0033576443809223834,
        7615969435172737e-21,
        0.001549637469702363,
        -3346692164250855e-19,
        -5864810318991818e-19,
        2648328819961289e-19,
        1700012283661249e-19,
        -13658830722611617e-20,
        -29769959628485097e-21,
        530414312291331e-19,
        -243700152682779e-20,
        -15724420772702817e-21,
        4308047861716731e-21,
        335334586287131e-20,
        -18959296176931532e-22,
        -39039317332873064e-23,
        5302368616904761e-22,
        -3700308378205125e-23,
        -9990396944534901e-23,
        3008188650719067e-23,
        10849027337899348e-24,
        -7458116552893037e-24,
        5897951310384362e-26,
        10308233454854333e-25,
        -2433545573751673e-25,
        -6407938256501889e-26,
        40005366272537445e-27,
        -31256393571085576e-28,
        -25670654761550815e-28,
        8015088533687901e-28,
        -25979543288938482e-30,
        -33977208567962675e-30,
        8624037434720089e-30,
        -9298012529324185e-31,
        40146287123334886e-33
      ];
      var Daub36 = [
        2867925182755946e-21,
        6826028678546358e-20,
        7602151099668488e-19,
        0.005240297377409884,
        0.024890565644827965,
        0.08565209259526409,
        0.2177569530979008,
        0.4064336977082553,
        0.5322668952607287,
        0.4178753356009698,
        0.04397519752934863,
        -0.2944210395891146,
        -0.24680703697812553,
        0.09811420416311477,
        0.2465372776089742,
        0.007278515095792229,
        -0.19933720560864962,
        -0.045861400746392715,
        0.1541062366276429,
        0.05027618007353843,
        -0.11880375431013564,
        -0.03988085357551317,
        0.09115678225801654,
        0.02503872144956849,
        -0.06820901663681751,
        -0.011319100316817429,
        0.04851308354780909,
        0.0014249726617653917,
        -0.0319807206776397,
        0.003984040198717005,
        0.01906359478062536,
        -0.005657813245058818,
        -0.009990263473281372,
        0.005022989106665829,
        0.004413484835350576,
        -0.0034845414454048834,
        -0.0015030740662966438,
        0.0019907937718517373,
        2776812795712026e-19,
        -9463403823261102e-19,
        8614565758992702e-20,
        36935072849675105e-20,
        -11551188958435271e-20,
        -11318994680846657e-20,
        669474119693059e-19,
        23751066836608608e-21,
        -27313908246543378e-21,
        -1183471059985616e-21,
        8372218198160788e-21,
        -15861457824345775e-22,
        -18708116028591808e-22,
        8311421279707779e-22,
        25484235225565776e-23,
        -24553776584342327e-23,
        2753249073339512e-24,
        4799043465450992e-23,
        -11560936888170085e-24,
        -5612784343327791e-24,
        3138841695782424e-24,
        10908155537137518e-26,
        -45125457785632494e-26,
        8962418203859612e-26,
        3037429098112535e-26,
        -1599716689261357e-26,
        8876846287217375e-28,
        1070969357114017e-27,
        -3029285026974877e-28,
        5542263182639804e-30,
        13380713862991059e-30,
        -32046285434017497e-31,
        3339971984818693e-31,
        -14032741753731907e-33
      ];
      var Daub37 = [
        20220608624983923e-22,
        4942343750628132e-20,
        5662418377066724e-19,
        0.0040241403682572865,
        0.01976228615387959,
        0.0705848259771816,
        0.18732633186206493,
        0.36844097240030615,
        0.5181670408556229,
        0.4622075536616057,
        0.13087896323302017,
        -0.24618042976108342,
        -0.29437591526266177,
        0.01967150045235939,
        0.2515232543602687,
        0.08180602838721862,
        -0.181962291778608,
        -0.10845171382330178,
        0.12992964695985376,
        0.10178029683881418,
        -0.09660754061668439,
        -0.08233021190655741,
        0.07504761994836018,
        0.059567410871529954,
        -0.05925681563265897,
        -0.03825382947938425,
        0.045807944151268334,
        0.020972800592597547,
        -0.03352358406410097,
        -0.008833493890410233,
        0.022618651544599473,
        0.0016904723834844238,
        -0.013763981962894785,
        0.0015193057788333991,
        0.007387757452855584,
        -0.0022480531870038246,
        -0.0033945232764083988,
        0.0018168713438014236,
        0.0012639342581174772,
        -0.0011114848653186302,
        -32807884708801983e-20,
        5490532773373631e-19,
        15344390231955034e-21,
        -22089440324554938e-20,
        4336726125945695e-20,
        7055138782065466e-20,
        -309866292761993e-19,
        -16391624961605832e-21,
        13543277184167817e-21,
        18499450031155903e-22,
        -43099415565970926e-22,
        4854731396996412e-22,
        10021213992971776e-22,
        -3494948603445728e-22,
        -15098853886715837e-23,
        11090312322164394e-23,
        53506575154614344e-25,
        -22521938367248057e-24,
        4224485706362419e-24,
        2793974465953983e-24,
        -1297205001469435e-24,
        -1031411129096975e-25,
        1946164894082315e-25,
        -3203398244123242e-26,
        -13984157155376414e-27,
        63349554409739135e-28,
        -20963631942348006e-29,
        -44216124098721056e-29,
        11380528309214397e-29,
        -4518889607463727e-31,
        -5243025691884206e-30,
        11890123875082528e-31,
        -11992803358528796e-32,
        49066150649352034e-34
      ];
      var Daub38 = [
        14257766416741318e-22,
        3576251994264023e-20,
        42117026647271163e-20,
        0.0030830881192537517,
        0.015637249347572157,
        0.057889943612859256,
        0.1600719935641107,
        0.33077578141101466,
        0.4965911753117181,
        0.4933560785171008,
        0.2130505713555785,
        -0.1828676677083359,
        -0.3216756378089979,
        -0.06226650604782432,
        0.2321259638353531,
        0.14998511961871702,
        -0.1417956859730596,
        -0.15991256515824437,
        0.08563812155615105,
        0.14141473407338268,
        -0.05658645863072738,
        -0.11473117071074437,
        0.04309589543304764,
        0.08720439826203975,
        -0.036605103402874296,
        -0.06176620870841316,
        0.03198987753153781,
        0.04005498110511595,
        -0.026891493880894516,
        -0.023114134020549317,
        0.020904645255655243,
        0.011290497278685965,
        -0.014701882065398682,
        -0.004131306656031089,
        0.00921478503219718,
        5625715748403532e-19,
        -0.005071314509218348,
        7169821821064019e-19,
        0.0024006977818909732,
        -8448626665537775e-19,
        -9424614077227377e-19,
        5810759750532864e-19,
        28176392503806707e-20,
        -3031020460726612e-19,
        -455568269666842e-19,
        12620433501661708e-20,
        -11554091038337172e-21,
        -4175141648540398e-20,
        13341761499213504e-21,
        10373591840455998e-21,
        -6456730428469619e-21,
        -15508443501186026e-22,
        21499602699396653e-22,
        -8487087586072593e-23,
        -5187733738874145e-22,
        13963775455083553e-23,
        8400351046895966e-23,
        -48847579374592866e-24,
        -5424274800287298e-24,
        10347045392748585e-24,
        -14363294877951358e-25,
        -13491977539834489e-25,
        5261132557357599e-25,
        6732336490189309e-26,
        -8278256522538134e-26,
        11016929345994545e-27,
        6291537317039508e-27,
        -24847892375636427e-28,
        2626496504065252e-29,
        18086612362745306e-29,
        -4249817819571463e-29,
        -4563397162127374e-31,
        20450996767889887e-31,
        -4405307042483461e-31,
        43045968395587903e-33,
        -17161524510887442e-34
      ];
      var daubCoeff = {
        D2: Daub1,
        D4: Daub2,
        D6: Daub3,
        D8: Daub4,
        D10: Daub5,
        D12: Daub6,
        D14: Daub7,
        D16: Daub8,
        D18: Daub9,
        D20: Daub10,
        D22: Daub11,
        D24: Daub12,
        D26: Daub13,
        D28: Daub14,
        D30: Daub15,
        D32: Daub16,
        D34: Daub17,
        D36: Daub18,
        D38: Daub19,
        D40: Daub20,
        D42: Daub21,
        D44: Daub22,
        D46: Daub23,
        D48: Daub24,
        D50: Daub25,
        D52: Daub26,
        D54: Daub27,
        D56: Daub28,
        D58: Daub29,
        D60: Daub30,
        D62: Daub31,
        D64: Daub32,
        D66: Daub33,
        D68: Daub34,
        D70: Daub35,
        D72: Daub36,
        D74: Daub37,
        D76: Daub38
      };
      module.exports = daubCoeff;
    }
  });

  // node_modules/frequencyjs/lib/transforms/wavelets/daubechies.js
  var require_daubechies = __commonJS({
    "node_modules/frequencyjs/lib/transforms/wavelets/daubechies.js"(exports, module) {
      var daubCoeffs = require_daubechiesCoefficients();
      var daubechiesPeriodic = function(signal2, options) {
        var coeffs = daubCoeffs["D" + options.taps];
        var input = signal2.values();
        var copy = [];
        var res = [];
        var len = Math.floor(signal2.length / 2);
        while (len > 0) {
          for (var i2 = 0; i2 < len; i2++) {
            var scaling = 0;
            var wavelet = 0;
            var fac = 1;
            for (var j2 = 0; j2 < coeffs.length; j2++) {
              var idx = (2 * i2 + j2) % len;
              scaling += coeffs[j2] * input[2 * i2 + j2] * 0.5;
              wavelet += fac * coeffs[j2] * input[2 * i2 + j2] * 0.5;
              fac = fac * -1;
            }
            copy[i2] = scaling;
            res[len + i2] = wavelet;
          }
          var tmp = copy;
          copy = input;
          input = tmp;
          len = Math.floor(len / 2);
        }
        res[0] = input[0];
        return res;
      };
      module.exports = {
        name: "DWT Daubechies",
        register: function(Transform) {
          Transform.register({
            name: "daubechies",
            forward: function(signal2, options) {
              var trans = daubechiesPeriodic(signal2, options);
              trans.timeDependent = true;
              return trans;
            },
            backward: function(spectrum, options) {
              options.length = spectrum.length;
              var dft = prepare(options);
              dft.backward(signal);
              throw new Error("?? what to return ??");
            }
          });
        }
      };
    }
  });

  // node_modules/frequencyjs/lib/transforms/base.js
  var require_base = __commonJS({
    "node_modules/frequencyjs/lib/transforms/base.js"(exports, module) {
      var Spectrum = require_spectrum();
      var Signal = require_signal();
      var generator = require_generator();
      var Transform = {
        methods: {},
        /** `register` takes an object that contains a name and three functions.
          *  - `forward` and `backward` which applied to a signal/spectrum calculate the
          *   transformation into the corresponding domain
          *  - `prepare` which calls mechanims to speed up calculation like caching
          *   etc.
          */
        register: function(method2) {
          Transform.methods[method2.name] = method2;
        },
        toSpectrum: function(signal2, options) {
          method = Transform.methods[options.method];
          options.signalLength = signal2.length;
          options.sampling = options.sampling || signal2.sampling || 440;
          return Spectrum(method.forward(signal2, options), options);
        },
        toSignal: function(spectrum, options) {
          var spec = Spectrum(spectrum, options);
          return generator.sines(spec);
        }
      };
      require_dft().register(Transform);
      require_fft().register(Transform);
      require_haar().register(Transform);
      require_daubechies().register(Transform);
      module.exports = Transform;
    }
  });

  // node_modules/frequencyjs/lib/transform.js
  var require_transform = __commonJS({
    "node_modules/frequencyjs/lib/transform.js"(exports, module) {
      var Signal = require_signal();
      var Transform = require_base();
      module.exports = {
        toSignal: function(spectrum, options) {
          options = options || {};
          return Transform.toSignal(spectrum, options);
        },
        toSpectrum: function(signal2, options) {
          options = options || {};
          options.method = options.method || "dft";
          options.signalLength = signal2.length;
          return Transform.toSpectrum(Signal(signal2), options);
        }
      };
    }
  });

  // node_modules/frequencyjs/lib/convolution/cauchy.js
  var require_cauchy = __commonJS({
    "node_modules/frequencyjs/lib/convolution/cauchy.js"(exports, module) {
      var _2 = require_lodash2();
      var mod = function(m, n2) {
        return (m % n2 + n2) % n2;
      };
      var nonCircular = function(signal1, signal2) {
        var len1 = signal1.length;
        var len2 = signal2.length;
        var half = Math.floor(len2 / 2);
        var convolved = _2.map(_2.range(len1), function(idx1) {
          var cVal = _2.reduce(_2.range(len2), function(acc, idx2) {
            var curIdx = idx1 - idx2;
            if (0 <= curIdx && curIdx < len1) {
              return acc + signal1[curIdx] * signal2[idx2];
            }
            return acc;
          }, 0);
          return cVal;
        });
        return convolved;
      };
      var circular = function(signal1, signal2) {
        var len1 = signal1.length;
        var len2 = signal2.length;
        var half = Math.floor(len2 / 2);
        var convolved = _2.map(_2.range(len1), function(idx1) {
          var cVal = _2.reduce(_2.range(len1), function(acc, idx2) {
            var curIdx = idx1 - idx2;
            return acc + signal1[idx2] * signal2[mod(curIdx, len2)];
          }, 0);
          return cVal;
        });
        return convolved;
      };
      var methodForType = { "non-circular": nonCircular, "circular": circular };
      module.exports = function(signal1, signal2, options) {
        var convMethod = methodForType[options.type];
        return convMethod(signal1, signal2);
      };
    }
  });

  // node_modules/frequencyjs/lib/convolution/spectrum.js
  var require_spectrum2 = __commonJS({
    "node_modules/frequencyjs/lib/convolution/spectrum.js"(exports, module) {
      var transform2 = require_transform();
      var _2 = require_lodash2();
      module.exports = function(signal1, signal2, options) {
        var spec1 = transform2.toSpectrum(signal1, options.spectrum);
        var spec2 = transform2.toSpectrum(signal2, options.spectrum);
        var idxDist = spec1.length / spec2.length;
        var convSpec = _2.map(_2.range(spec2.legnth), function(idx) {
          return spec1[idx * idxDist] * spec2[idx];
        });
        convSpec.sampling = 1;
        return transform2.toSignal(convSpec, options.spectrum).create({
          length: signal1.length,
          sampling: signal1.sampling
        });
      };
    }
  });

  // node_modules/frequencyjs/lib/processing.js
  var require_processing = __commonJS({
    "node_modules/frequencyjs/lib/processing.js"(exports, module) {
      var cauchy = require_cauchy();
      var specConvolution = require_spectrum2();
      var _2 = require_lodash2();
      var Signal = require_signal();
      var defaultOptions = {
        method: "cauchy",
        type: "non-circular",
        spectrum: {
          method: "dft"
          // sampling is not relevant as it gets transformed back again with the same
          // sampling rate
        }
      };
      module.exports = {
        /** the convolution function assumes two discrete signals
          * that have the same spacing
          */
        convolve: function(signal1, signal2, options) {
          options = options || {};
          options = _2.defaults(options, defaultOptions);
          if (signal1.length < signal2.length) {
            var tmp = signal1;
            signal1 = signal2;
            signal2 = tmp;
          }
          if (options.method == "cauchy") {
            return cauchy(signal1, signal2, options);
          } else {
            return specConvolution(signal1, signal2, options);
          }
        },
        /** determines if two signals can be considered equal.
          */
        equal: function(signal1, signal2, options) {
          options = options || {};
          options.epsilon = options.epsilon || 1e-8;
          var sig1 = Signal(signal1);
          var sig2 = Signal(signal2);
          if (signal1.length != signal2.length)
            return false;
          var diffSQ = _2.reduce(_2.range(signal1.length), function(d2, idx) {
            var diff = sig1[idx].value - sig2[idx].value;
            return d2 + diff * diff;
          }, 0);
          return diffSQ / signal1.length < options.epsilon;
        }
      };
    }
  });

  // node_modules/frequencyjs/index.js
  var require_frequencyjs = __commonJS({
    "node_modules/frequencyjs/index.js"(exports, module) {
      var Generators = require_generator();
      var Transform = require_transform();
      var Signal = require_signal();
      var Processing = require_processing();
      module.exports = {
        Processing,
        Generators,
        Transform,
        toSpectrum: Transform.toSpectrum,
        toSignal: Transform.toSignal,
        signal: Signal,
        sine: Generators.sine,
        sines: Generators.sines,
        convolve: Processing.convolve,
        version: "0.0.3"
      };
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/shallowequal/index.js
  var require_shallowequal = __commonJS({
    "node_modules/shallowequal/index.js"(exports, module) {
      module.exports = function shallowEqual(objA, objB, compare, compareContext) {
        var ret2 = compare ? compare.call(compareContext, objA, objB) : void 0;
        if (ret2 !== void 0) {
          return !!ret2;
        }
        if (objA === objB) {
          return true;
        }
        if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
        for (var idx = 0; idx < keysA.length; idx++) {
          var key = keysA[idx];
          if (!bHasOwnProperty(key)) {
            return false;
          }
          var valueA = objA[key];
          var valueB = objB[key];
          ret2 = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
          if (ret2 === false || ret2 === void 0 && valueA !== valueB) {
            return false;
          }
        }
        return true;
      };
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i2 = 0; i2 < keys.length; ++i2) {
            var key = keys[i2];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e2) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/react-loading/dist/react-loading.js
  var require_react_loading = __commonJS({
    "node_modules/react-loading/dist/react-loading.js"(exports, module) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define([], factory);
        else if (typeof exports === "object")
          exports["Loading"] = factory();
        else
          root["Loading"] = factory();
      })(typeof self !== "undefined" ? self : exports, function() {
        return (
          /******/
          function(modules) {
            var installedModules = {};
            function __webpack_require__(moduleId) {
              if (installedModules[moduleId]) {
                return installedModules[moduleId].exports;
              }
              var module2 = installedModules[moduleId] = {
                /******/
                i: moduleId,
                /******/
                l: false,
                /******/
                exports: {}
                /******/
              };
              modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
              module2.l = true;
              return module2.exports;
            }
            __webpack_require__.m = modules;
            __webpack_require__.c = installedModules;
            __webpack_require__.d = function(exports2, name, getter) {
              if (!__webpack_require__.o(exports2, name)) {
                Object.defineProperty(exports2, name, {
                  /******/
                  configurable: false,
                  /******/
                  enumerable: true,
                  /******/
                  get: getter
                  /******/
                });
              }
            };
            __webpack_require__.n = function(module2) {
              var getter = module2 && module2.__esModule ? (
                /******/
                function getDefault() {
                  return module2["default"];
                }
              ) : (
                /******/
                function getModuleExports() {
                  return module2;
                }
              );
              __webpack_require__.d(getter, "a", getter);
              return getter;
            };
            __webpack_require__.o = function(object, property) {
              return Object.prototype.hasOwnProperty.call(object, property);
            };
            __webpack_require__.p = "/";
            return __webpack_require__(__webpack_require__.s = 7);
          }([
            /* 0 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var validateFormat = function validateFormat2(format) {
              };
              if (true) {
                validateFormat = function validateFormat2(format) {
                  if (format === void 0) {
                    throw new Error("invariant requires an error message argument");
                  }
                };
              }
              function invariant(condition, format, a2, b2, c2, d2, e2, f) {
                validateFormat(format);
                if (!condition) {
                  var error;
                  if (format === void 0) {
                    error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
                  } else {
                    var args = [a2, b2, c2, d2, e2, f];
                    var argIndex = 0;
                    error = new Error(format.replace(/%s/g, function() {
                      return args[argIndex++];
                    }));
                    error.name = "Invariant Violation";
                  }
                  error.framesToPop = 1;
                  throw error;
                }
              }
              module2.exports = invariant;
            },
            /* 1 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              function makeEmptyFunction(arg) {
                return function() {
                  return arg;
                };
              }
              var emptyFunction = function emptyFunction2() {
              };
              emptyFunction.thatReturns = makeEmptyFunction;
              emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
              emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
              emptyFunction.thatReturnsNull = makeEmptyFunction(null);
              emptyFunction.thatReturnsThis = function() {
                return this;
              };
              emptyFunction.thatReturnsArgument = function(arg) {
                return arg;
              };
              module2.exports = emptyFunction;
            },
            /* 2 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var getOwnPropertySymbols = Object.getOwnPropertySymbols;
              var hasOwnProperty2 = Object.prototype.hasOwnProperty;
              var propIsEnumerable = Object.prototype.propertyIsEnumerable;
              function toObject(val) {
                if (val === null || val === void 0) {
                  throw new TypeError("Object.assign cannot be called with null or undefined");
                }
                return Object(val);
              }
              function shouldUseNative() {
                try {
                  if (!Object.assign) {
                    return false;
                  }
                  var test1 = new String("abc");
                  test1[5] = "de";
                  if (Object.getOwnPropertyNames(test1)[0] === "5") {
                    return false;
                  }
                  var test2 = {};
                  for (var i2 = 0; i2 < 10; i2++) {
                    test2["_" + String.fromCharCode(i2)] = i2;
                  }
                  var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
                    return test2[n2];
                  });
                  if (order2.join("") !== "0123456789") {
                    return false;
                  }
                  var test3 = {};
                  "abcdefghijklmnopqrst".split("").forEach(function(letter) {
                    test3[letter] = letter;
                  });
                  if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
                    return false;
                  }
                  return true;
                } catch (err) {
                  return false;
                }
              }
              module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
                var from;
                var to = toObject(target);
                var symbols;
                for (var s2 = 1; s2 < arguments.length; s2++) {
                  from = Object(arguments[s2]);
                  for (var key in from) {
                    if (hasOwnProperty2.call(from, key)) {
                      to[key] = from[key];
                    }
                  }
                  if (getOwnPropertySymbols) {
                    symbols = getOwnPropertySymbols(from);
                    for (var i2 = 0; i2 < symbols.length; i2++) {
                      if (propIsEnumerable.call(from, symbols[i2])) {
                        to[symbols[i2]] = from[symbols[i2]];
                      }
                    }
                  }
                }
                return to;
              };
            },
            /* 3 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var emptyFunction = __webpack_require__(1);
              var warning = emptyFunction;
              if (true) {
                var printWarning = function printWarning2(format) {
                  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                  }
                  var argIndex = 0;
                  var message = "Warning: " + format.replace(/%s/g, function() {
                    return args[argIndex++];
                  });
                  if (typeof console !== "undefined") {
                    console.error(message);
                  }
                  try {
                    throw new Error(message);
                  } catch (x2) {
                  }
                };
                warning = function warning2(condition, format) {
                  if (format === void 0) {
                    throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
                  }
                  if (format.indexOf("Failed Composite propType: ") === 0) {
                    return;
                  }
                  if (!condition) {
                    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                      args[_key2 - 2] = arguments[_key2];
                    }
                    printWarning.apply(void 0, [format].concat(args));
                  }
                };
              }
              module2.exports = warning;
            },
            /* 4 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
              module2.exports = ReactPropTypesSecret;
            },
            /* 5 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var emptyObject = {};
              if (true) {
                Object.freeze(emptyObject);
              }
              module2.exports = emptyObject;
            },
            /* 6 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              if (true) {
                var invariant = __webpack_require__(0);
                var warning = __webpack_require__(3);
                var ReactPropTypesSecret = __webpack_require__(4);
                var loggedTypeFailures = {};
              }
              function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
                if (true) {
                  for (var typeSpecName in typeSpecs) {
                    if (typeSpecs.hasOwnProperty(typeSpecName)) {
                      var error;
                      try {
                        invariant(typeof typeSpecs[typeSpecName] === "function", "%s: %s type `%s` is invalid; it must be a function, usually from the `prop-types` package, but received `%s`.", componentName || "React class", location2, typeSpecName, typeof typeSpecs[typeSpecName]);
                        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
                      } catch (ex) {
                        error = ex;
                      }
                      warning(!error || error instanceof Error, "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error);
                      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                        loggedTypeFailures[error.message] = true;
                        var stack = getStack ? getStack() : "";
                        warning(false, "Failed %s type: %s%s", location2, error.message, stack != null ? stack : "");
                      }
                    }
                  }
                }
              }
              module2.exports = checkPropTypes;
            },
            /* 7 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              var _extends2 = Object.assign || function(target) {
                for (var i2 = 1; i2 < arguments.length; i2++) {
                  var source = arguments[i2];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              var _createClass3 = /* @__PURE__ */ function() {
                function defineProperties(target, props) {
                  for (var i2 = 0; i2 < props.length; i2++) {
                    var descriptor = props[i2];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor)
                      descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function(Constructor, protoProps, staticProps) {
                  if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                  if (staticProps)
                    defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();
              var _react = __webpack_require__(8);
              var _react2 = _interopRequireDefault(_react);
              var _propTypes = __webpack_require__(11);
              var _propTypes2 = _interopRequireDefault(_propTypes);
              var _svg = __webpack_require__(14);
              var svgSources = _interopRequireWildcard(_svg);
              function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                  return obj;
                } else {
                  var newObj = {};
                  if (obj != null) {
                    for (var key in obj) {
                      if (Object.prototype.hasOwnProperty.call(obj, key))
                        newObj[key] = obj[key];
                    }
                  }
                  newObj.default = obj;
                  return newObj;
                }
              }
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
              }
              function _objectWithoutProperties2(obj, keys) {
                var target = {};
                for (var i2 in obj) {
                  if (keys.indexOf(i2) >= 0)
                    continue;
                  if (!Object.prototype.hasOwnProperty.call(obj, i2))
                    continue;
                  target[i2] = obj[i2];
                }
                return target;
              }
              function _classCallCheck3(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _possibleConstructorReturn2(self2, call) {
                if (!self2) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self2;
              }
              function _inherits2(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass)
                  Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }
              var Loading = function(_Component) {
                _inherits2(Loading2, _Component);
                function Loading2() {
                  var _ref2;
                  var _temp2, _this, _ret;
                  _classCallCheck3(this, Loading2);
                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }
                  return _ret = (_temp2 = (_this = _possibleConstructorReturn2(this, (_ref2 = Loading2.__proto__ || Object.getPrototypeOf(Loading2)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
                    delayed: _this.props.delay > 0
                  }, _temp2), _possibleConstructorReturn2(_this, _ret);
                }
                _createClass3(Loading2, [{
                  key: "componentDidMount",
                  value: function componentDidMount() {
                    var _this2 = this;
                    var delay = this.props.delay;
                    var delayed = this.state.delayed;
                    if (delayed) {
                      this.timeout = setTimeout(function() {
                        _this2.setState({
                          delayed: false
                        });
                      }, delay);
                    }
                  }
                }, {
                  key: "componentWillUnmount",
                  value: function componentWillUnmount() {
                    var timeout = this.timeout;
                    if (timeout) {
                      clearTimeout(timeout);
                    }
                  }
                }, {
                  key: "render",
                  value: function render() {
                    var _props = this.props, color = _props.color, delay = _props.delay, type = _props.type, height = _props.height, width = _props.width, restProps = _objectWithoutProperties2(_props, ["color", "delay", "type", "height", "width"]);
                    var selectedType = this.state.delayed ? "blank" : type;
                    var svg = svgSources[selectedType];
                    var style = {
                      fill: color,
                      height,
                      width
                    };
                    return _react2.default.createElement("div", _extends2({
                      style,
                      dangerouslySetInnerHTML: { __html: svg }
                    }, restProps));
                  }
                }]);
                return Loading2;
              }(_react.Component);
              Loading.propTypes = {
                color: _propTypes2.default.string,
                delay: _propTypes2.default.number,
                type: _propTypes2.default.string,
                height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
                width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
              };
              Loading.defaultProps = {
                color: "#fff",
                delay: 0,
                type: "balls",
                height: 64,
                width: 64
              };
              exports2.default = Loading;
            },
            /* 8 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              if (false) {
                module2.exports = __webpack_require__(9);
              } else {
                module2.exports = __webpack_require__(10);
              }
            },
            /* 9 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var m = __webpack_require__(2), n2 = __webpack_require__(0), p2 = __webpack_require__(5), q2 = __webpack_require__(1), r2 = "function" === typeof Symbol && Symbol["for"], t2 = r2 ? Symbol["for"]("react.element") : 60103, u2 = r2 ? Symbol["for"]("react.portal") : 60106, v2 = r2 ? Symbol["for"]("react.fragment") : 60107, w3 = r2 ? Symbol["for"]("react.strict_mode") : 60108, x2 = r2 ? Symbol["for"]("react.provider") : 60109, y2 = r2 ? Symbol["for"]("react.context") : 60110, z2 = r2 ? Symbol["for"]("react.async_mode") : 60111, A2 = r2 ? Symbol["for"]("react.forward_ref") : 60112, B2 = "function" === typeof Symbol && Symbol.iterator;
              function C(a2) {
                for (var b2 = arguments.length - 1, e2 = "http://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 0; c2 < b2; c2++)
                  e2 += "&args[]=" + encodeURIComponent(arguments[c2 + 1]);
                n2(false, "Minified React error #" + a2 + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", e2);
              }
              var D2 = { isMounted: function() {
                return false;
              }, enqueueForceUpdate: function() {
              }, enqueueReplaceState: function() {
              }, enqueueSetState: function() {
              } };
              function E2(a2, b2, e2) {
                this.props = a2;
                this.context = b2;
                this.refs = p2;
                this.updater = e2 || D2;
              }
              E2.prototype.isReactComponent = {};
              E2.prototype.setState = function(a2, b2) {
                "object" !== typeof a2 && "function" !== typeof a2 && null != a2 ? C("85") : void 0;
                this.updater.enqueueSetState(this, a2, b2, "setState");
              };
              E2.prototype.forceUpdate = function(a2) {
                this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
              };
              function F2() {
              }
              F2.prototype = E2.prototype;
              function G2(a2, b2, e2) {
                this.props = a2;
                this.context = b2;
                this.refs = p2;
                this.updater = e2 || D2;
              }
              var H2 = G2.prototype = new F2();
              H2.constructor = G2;
              m(H2, E2.prototype);
              H2.isPureReactComponent = true;
              var I2 = { current: null }, J2 = Object.prototype.hasOwnProperty, K2 = { key: true, ref: true, __self: true, __source: true };
              function L2(a2, b2, e2) {
                var c2 = void 0, d2 = {}, g2 = null, h2 = null;
                if (null != b2)
                  for (c2 in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (g2 = "" + b2.key), b2)
                    J2.call(b2, c2) && !K2.hasOwnProperty(c2) && (d2[c2] = b2[c2]);
                var f = arguments.length - 2;
                if (1 === f)
                  d2.children = e2;
                else if (1 < f) {
                  for (var k2 = Array(f), l2 = 0; l2 < f; l2++)
                    k2[l2] = arguments[l2 + 2];
                  d2.children = k2;
                }
                if (a2 && a2.defaultProps)
                  for (c2 in f = a2.defaultProps, f)
                    void 0 === d2[c2] && (d2[c2] = f[c2]);
                return { $$typeof: t2, type: a2, key: g2, ref: h2, props: d2, _owner: I2.current };
              }
              function M2(a2) {
                return "object" === typeof a2 && null !== a2 && a2.$$typeof === t2;
              }
              function escape(a2) {
                var b2 = { "=": "=0", ":": "=2" };
                return "$" + ("" + a2).replace(/[=:]/g, function(a3) {
                  return b2[a3];
                });
              }
              var N2 = /\/+/g, O = [];
              function P3(a2, b2, e2, c2) {
                if (O.length) {
                  var d2 = O.pop();
                  d2.result = a2;
                  d2.keyPrefix = b2;
                  d2.func = e2;
                  d2.context = c2;
                  d2.count = 0;
                  return d2;
                }
                return { result: a2, keyPrefix: b2, func: e2, context: c2, count: 0 };
              }
              function Q2(a2) {
                a2.result = null;
                a2.keyPrefix = null;
                a2.func = null;
                a2.context = null;
                a2.count = 0;
                10 > O.length && O.push(a2);
              }
              function R2(a2, b2, e2, c2) {
                var d2 = typeof a2;
                if ("undefined" === d2 || "boolean" === d2)
                  a2 = null;
                var g2 = false;
                if (null === a2)
                  g2 = true;
                else
                  switch (d2) {
                    case "string":
                    case "number":
                      g2 = true;
                      break;
                    case "object":
                      switch (a2.$$typeof) {
                        case t2:
                        case u2:
                          g2 = true;
                      }
                  }
                if (g2)
                  return e2(c2, a2, "" === b2 ? "." + S2(a2, 0) : b2), 1;
                g2 = 0;
                b2 = "" === b2 ? "." : b2 + ":";
                if (Array.isArray(a2))
                  for (var h2 = 0; h2 < a2.length; h2++) {
                    d2 = a2[h2];
                    var f = b2 + S2(d2, h2);
                    g2 += R2(d2, f, e2, c2);
                  }
                else if (null === a2 || "undefined" === typeof a2 ? f = null : (f = B2 && a2[B2] || a2["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f)
                  for (a2 = f.call(a2), h2 = 0; !(d2 = a2.next()).done; )
                    d2 = d2.value, f = b2 + S2(d2, h2++), g2 += R2(d2, f, e2, c2);
                else
                  "object" === d2 && (e2 = "" + a2, C("31", "[object Object]" === e2 ? "object with keys {" + Object.keys(a2).join(", ") + "}" : e2, ""));
                return g2;
              }
              function S2(a2, b2) {
                return "object" === typeof a2 && null !== a2 && null != a2.key ? escape(a2.key) : b2.toString(36);
              }
              function T2(a2, b2) {
                a2.func.call(a2.context, b2, a2.count++);
              }
              function U2(a2, b2, e2) {
                var c2 = a2.result, d2 = a2.keyPrefix;
                a2 = a2.func.call(a2.context, b2, a2.count++);
                Array.isArray(a2) ? V2(a2, c2, e2, q2.thatReturnsArgument) : null != a2 && (M2(a2) && (b2 = d2 + (!a2.key || b2 && b2.key === a2.key ? "" : ("" + a2.key).replace(N2, "$&/") + "/") + e2, a2 = { $$typeof: t2, type: a2.type, key: b2, ref: a2.ref, props: a2.props, _owner: a2._owner }), c2.push(a2));
              }
              function V2(a2, b2, e2, c2, d2) {
                var g2 = "";
                null != e2 && (g2 = ("" + e2).replace(N2, "$&/") + "/");
                b2 = P3(b2, g2, c2, d2);
                null == a2 || R2(a2, "", U2, b2);
                Q2(b2);
              }
              var W2 = { Children: { map: function(a2, b2, e2) {
                if (null == a2)
                  return a2;
                var c2 = [];
                V2(a2, c2, null, b2, e2);
                return c2;
              }, forEach: function(a2, b2, e2) {
                if (null == a2)
                  return a2;
                b2 = P3(null, null, b2, e2);
                null == a2 || R2(a2, "", T2, b2);
                Q2(b2);
              }, count: function(a2) {
                return null == a2 ? 0 : R2(a2, "", q2.thatReturnsNull, null);
              }, toArray: function(a2) {
                var b2 = [];
                V2(a2, b2, null, q2.thatReturnsArgument);
                return b2;
              }, only: function(a2) {
                M2(a2) ? void 0 : C("143");
                return a2;
              } }, createRef: function() {
                return { current: null };
              }, Component: E2, PureComponent: G2, createContext: function(a2, b2) {
                void 0 === b2 && (b2 = null);
                a2 = {
                  $$typeof: y2,
                  _calculateChangedBits: b2,
                  _defaultValue: a2,
                  _currentValue: a2,
                  _changedBits: 0,
                  Provider: null,
                  Consumer: null
                };
                a2.Provider = { $$typeof: x2, _context: a2 };
                return a2.Consumer = a2;
              }, forwardRef: function(a2) {
                return { $$typeof: A2, render: a2 };
              }, Fragment: v2, StrictMode: w3, unstable_AsyncMode: z2, createElement: L2, cloneElement: function(a2, b2, e2) {
                null === a2 || void 0 === a2 ? C("267", a2) : void 0;
                var c2 = void 0, d2 = m({}, a2.props), g2 = a2.key, h2 = a2.ref, f = a2._owner;
                if (null != b2) {
                  void 0 !== b2.ref && (h2 = b2.ref, f = I2.current);
                  void 0 !== b2.key && (g2 = "" + b2.key);
                  var k2 = void 0;
                  a2.type && a2.type.defaultProps && (k2 = a2.type.defaultProps);
                  for (c2 in b2)
                    J2.call(b2, c2) && !K2.hasOwnProperty(c2) && (d2[c2] = void 0 === b2[c2] && void 0 !== k2 ? k2[c2] : b2[c2]);
                }
                c2 = arguments.length - 2;
                if (1 === c2)
                  d2.children = e2;
                else if (1 < c2) {
                  k2 = Array(c2);
                  for (var l2 = 0; l2 < c2; l2++)
                    k2[l2] = arguments[l2 + 2];
                  d2.children = k2;
                }
                return { $$typeof: t2, type: a2.type, key: g2, ref: h2, props: d2, _owner: f };
              }, createFactory: function(a2) {
                var b2 = L2.bind(null, a2);
                b2.type = a2;
                return b2;
              }, isValidElement: M2, version: "16.3.2", __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { ReactCurrentOwner: I2, assign: m } }, X2 = Object.freeze({ default: W2 }), Y2 = X2 && W2 || X2;
              module2.exports = Y2["default"] ? Y2["default"] : Y2;
            },
            /* 10 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              if (true) {
                (function() {
                  "use strict";
                  var _assign = __webpack_require__(2);
                  var invariant = __webpack_require__(0);
                  var emptyObject = __webpack_require__(5);
                  var warning = __webpack_require__(3);
                  var emptyFunction = __webpack_require__(1);
                  var checkPropTypes = __webpack_require__(6);
                  var ReactVersion = "16.3.2";
                  var hasSymbol = typeof Symbol === "function" && Symbol["for"];
                  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 60103;
                  var REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 60104;
                  var REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 60105;
                  var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 60106;
                  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 60107;
                  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]("react.strict_mode") : 60108;
                  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]("react.provider") : 60109;
                  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]("react.context") : 60110;
                  var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]("react.async_mode") : 60111;
                  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]("react.forward_ref") : 60112;
                  var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
                  var FAUX_ITERATOR_SYMBOL = "@@iterator";
                  function getIteratorFn(maybeIterable) {
                    if (maybeIterable === null || typeof maybeIterable === "undefined") {
                      return null;
                    }
                    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
                    if (typeof maybeIterator === "function") {
                      return maybeIterator;
                    }
                    return null;
                  }
                  var lowPriorityWarning = function() {
                  };
                  {
                    var printWarning = function(format) {
                      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                      }
                      var argIndex = 0;
                      var message = "Warning: " + format.replace(/%s/g, function() {
                        return args[argIndex++];
                      });
                      if (typeof console !== "undefined") {
                        console.warn(message);
                      }
                      try {
                        throw new Error(message);
                      } catch (x2) {
                      }
                    };
                    lowPriorityWarning = function(condition, format) {
                      if (format === void 0) {
                        throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
                      }
                      if (!condition) {
                        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                          args[_key2 - 2] = arguments[_key2];
                        }
                        printWarning.apply(void 0, [format].concat(args));
                      }
                    };
                  }
                  var lowPriorityWarning$1 = lowPriorityWarning;
                  var didWarnStateUpdateForUnmountedComponent = {};
                  function warnNoop(publicInstance, callerName) {
                    {
                      var _constructor = publicInstance.constructor;
                      var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
                      var warningKey = componentName + "." + callerName;
                      if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                        return;
                      }
                      warning(false, "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
                      didWarnStateUpdateForUnmountedComponent[warningKey] = true;
                    }
                  }
                  var ReactNoopUpdateQueue = {
                    /**
                     * Checks whether or not this composite component is mounted.
                     * @param {ReactClass} publicInstance The instance we want to test.
                     * @return {boolean} True if mounted, false otherwise.
                     * @protected
                     * @final
                     */
                    isMounted: function(publicInstance) {
                      return false;
                    },
                    /**
                     * Forces an update. This should only be invoked when it is known with
                     * certainty that we are **not** in a DOM transaction.
                     *
                     * You may want to call this when you know that some deeper aspect of the
                     * component's state has changed but `setState` was not called.
                     *
                     * This will not invoke `shouldComponentUpdate`, but it will invoke
                     * `componentWillUpdate` and `componentDidUpdate`.
                     *
                     * @param {ReactClass} publicInstance The instance that should rerender.
                     * @param {?function} callback Called after component is updated.
                     * @param {?string} callerName name of the calling function in the public API.
                     * @internal
                     */
                    enqueueForceUpdate: function(publicInstance, callback, callerName) {
                      warnNoop(publicInstance, "forceUpdate");
                    },
                    /**
                     * Replaces all of the state. Always use this or `setState` to mutate state.
                     * You should treat `this.state` as immutable.
                     *
                     * There is no guarantee that `this.state` will be immediately updated, so
                     * accessing `this.state` after calling this method may return the old value.
                     *
                     * @param {ReactClass} publicInstance The instance that should rerender.
                     * @param {object} completeState Next state.
                     * @param {?function} callback Called after component is updated.
                     * @param {?string} callerName name of the calling function in the public API.
                     * @internal
                     */
                    enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
                      warnNoop(publicInstance, "replaceState");
                    },
                    /**
                     * Sets a subset of the state. This only exists because _pendingState is
                     * internal. This provides a merging strategy that is not available to deep
                     * properties which is confusing. TODO: Expose pendingState or don't use it
                     * during the merge.
                     *
                     * @param {ReactClass} publicInstance The instance that should rerender.
                     * @param {object} partialState Next partial state to be merged with state.
                     * @param {?function} callback Called after component is updated.
                     * @param {?string} Name of the calling function in the public API.
                     * @internal
                     */
                    enqueueSetState: function(publicInstance, partialState, callback, callerName) {
                      warnNoop(publicInstance, "setState");
                    }
                  };
                  function Component(props, context, updater) {
                    this.props = props;
                    this.context = context;
                    this.refs = emptyObject;
                    this.updater = updater || ReactNoopUpdateQueue;
                  }
                  Component.prototype.isReactComponent = {};
                  Component.prototype.setState = function(partialState, callback) {
                    !(typeof partialState === "object" || typeof partialState === "function" || partialState == null) ? invariant(false, "setState(...): takes an object of state variables to update or a function which returns an object of state variables.") : void 0;
                    this.updater.enqueueSetState(this, partialState, callback, "setState");
                  };
                  Component.prototype.forceUpdate = function(callback) {
                    this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
                  };
                  {
                    var deprecatedAPIs = {
                      isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
                      replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
                    };
                    var defineDeprecationWarning = function(methodName, info) {
                      Object.defineProperty(Component.prototype, methodName, {
                        get: function() {
                          lowPriorityWarning$1(false, "%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                          return void 0;
                        }
                      });
                    };
                    for (var fnName in deprecatedAPIs) {
                      if (deprecatedAPIs.hasOwnProperty(fnName)) {
                        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                      }
                    }
                  }
                  function ComponentDummy() {
                  }
                  ComponentDummy.prototype = Component.prototype;
                  function PureComponent(props, context, updater) {
                    this.props = props;
                    this.context = context;
                    this.refs = emptyObject;
                    this.updater = updater || ReactNoopUpdateQueue;
                  }
                  var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
                  pureComponentPrototype.constructor = PureComponent;
                  _assign(pureComponentPrototype, Component.prototype);
                  pureComponentPrototype.isPureReactComponent = true;
                  function createRef() {
                    var refObject = {
                      current: null
                    };
                    {
                      Object.seal(refObject);
                    }
                    return refObject;
                  }
                  var ReactCurrentOwner = {
                    /**
                     * @internal
                     * @type {ReactComponent}
                     */
                    current: null
                  };
                  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
                  var RESERVED_PROPS = {
                    key: true,
                    ref: true,
                    __self: true,
                    __source: true
                  };
                  var specialPropKeyWarningShown = void 0;
                  var specialPropRefWarningShown = void 0;
                  function hasValidRef(config2) {
                    {
                      if (hasOwnProperty2.call(config2, "ref")) {
                        var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                        if (getter && getter.isReactWarning) {
                          return false;
                        }
                      }
                    }
                    return config2.ref !== void 0;
                  }
                  function hasValidKey(config2) {
                    {
                      if (hasOwnProperty2.call(config2, "key")) {
                        var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                        if (getter && getter.isReactWarning) {
                          return false;
                        }
                      }
                    }
                    return config2.key !== void 0;
                  }
                  function defineKeyPropWarningGetter(props, displayName) {
                    var warnAboutAccessingKey = function() {
                      if (!specialPropKeyWarningShown) {
                        specialPropKeyWarningShown = true;
                        warning(false, "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
                      }
                    };
                    warnAboutAccessingKey.isReactWarning = true;
                    Object.defineProperty(props, "key", {
                      get: warnAboutAccessingKey,
                      configurable: true
                    });
                  }
                  function defineRefPropWarningGetter(props, displayName) {
                    var warnAboutAccessingRef = function() {
                      if (!specialPropRefWarningShown) {
                        specialPropRefWarningShown = true;
                        warning(false, "%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
                      }
                    };
                    warnAboutAccessingRef.isReactWarning = true;
                    Object.defineProperty(props, "ref", {
                      get: warnAboutAccessingRef,
                      configurable: true
                    });
                  }
                  var ReactElement = function(type, key, ref, self2, source, owner, props) {
                    var element = {
                      // This tag allows us to uniquely identify this as a React Element
                      $$typeof: REACT_ELEMENT_TYPE,
                      // Built-in properties that belong on the element
                      type,
                      key,
                      ref,
                      props,
                      // Record the component responsible for creating this element.
                      _owner: owner
                    };
                    {
                      element._store = {};
                      Object.defineProperty(element._store, "validated", {
                        configurable: false,
                        enumerable: false,
                        writable: true,
                        value: false
                      });
                      Object.defineProperty(element, "_self", {
                        configurable: false,
                        enumerable: false,
                        writable: false,
                        value: self2
                      });
                      Object.defineProperty(element, "_source", {
                        configurable: false,
                        enumerable: false,
                        writable: false,
                        value: source
                      });
                      if (Object.freeze) {
                        Object.freeze(element.props);
                        Object.freeze(element);
                      }
                    }
                    return element;
                  };
                  function createElement(type, config2, children) {
                    var propName = void 0;
                    var props = {};
                    var key = null;
                    var ref = null;
                    var self2 = null;
                    var source = null;
                    if (config2 != null) {
                      if (hasValidRef(config2)) {
                        ref = config2.ref;
                      }
                      if (hasValidKey(config2)) {
                        key = "" + config2.key;
                      }
                      self2 = config2.__self === void 0 ? null : config2.__self;
                      source = config2.__source === void 0 ? null : config2.__source;
                      for (propName in config2) {
                        if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                          props[propName] = config2[propName];
                        }
                      }
                    }
                    var childrenLength = arguments.length - 2;
                    if (childrenLength === 1) {
                      props.children = children;
                    } else if (childrenLength > 1) {
                      var childArray = Array(childrenLength);
                      for (var i2 = 0; i2 < childrenLength; i2++) {
                        childArray[i2] = arguments[i2 + 2];
                      }
                      {
                        if (Object.freeze) {
                          Object.freeze(childArray);
                        }
                      }
                      props.children = childArray;
                    }
                    if (type && type.defaultProps) {
                      var defaultProps = type.defaultProps;
                      for (propName in defaultProps) {
                        if (props[propName] === void 0) {
                          props[propName] = defaultProps[propName];
                        }
                      }
                    }
                    {
                      if (key || ref) {
                        if (typeof props.$$typeof === "undefined" || props.$$typeof !== REACT_ELEMENT_TYPE) {
                          var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                          if (key) {
                            defineKeyPropWarningGetter(props, displayName);
                          }
                          if (ref) {
                            defineRefPropWarningGetter(props, displayName);
                          }
                        }
                      }
                    }
                    return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
                  }
                  function cloneAndReplaceKey(oldElement, newKey) {
                    var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
                    return newElement;
                  }
                  function cloneElement(element, config2, children) {
                    !!(element === null || element === void 0) ? invariant(false, "React.cloneElement(...): The argument must be a React element, but you passed %s.", element) : void 0;
                    var propName = void 0;
                    var props = _assign({}, element.props);
                    var key = element.key;
                    var ref = element.ref;
                    var self2 = element._self;
                    var source = element._source;
                    var owner = element._owner;
                    if (config2 != null) {
                      if (hasValidRef(config2)) {
                        ref = config2.ref;
                        owner = ReactCurrentOwner.current;
                      }
                      if (hasValidKey(config2)) {
                        key = "" + config2.key;
                      }
                      var defaultProps = void 0;
                      if (element.type && element.type.defaultProps) {
                        defaultProps = element.type.defaultProps;
                      }
                      for (propName in config2) {
                        if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                          if (config2[propName] === void 0 && defaultProps !== void 0) {
                            props[propName] = defaultProps[propName];
                          } else {
                            props[propName] = config2[propName];
                          }
                        }
                      }
                    }
                    var childrenLength = arguments.length - 2;
                    if (childrenLength === 1) {
                      props.children = children;
                    } else if (childrenLength > 1) {
                      var childArray = Array(childrenLength);
                      for (var i2 = 0; i2 < childrenLength; i2++) {
                        childArray[i2] = arguments[i2 + 2];
                      }
                      props.children = childArray;
                    }
                    return ReactElement(element.type, key, ref, self2, source, owner, props);
                  }
                  function isValidElement(object) {
                    return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                  }
                  var ReactDebugCurrentFrame = {};
                  {
                    ReactDebugCurrentFrame.getCurrentStack = null;
                    ReactDebugCurrentFrame.getStackAddendum = function() {
                      var impl = ReactDebugCurrentFrame.getCurrentStack;
                      if (impl) {
                        return impl();
                      }
                      return null;
                    };
                  }
                  var SEPARATOR = ".";
                  var SUBSEPARATOR = ":";
                  function escape(key) {
                    var escapeRegex = /[=:]/g;
                    var escaperLookup = {
                      "=": "=0",
                      ":": "=2"
                    };
                    var escapedString = ("" + key).replace(escapeRegex, function(match) {
                      return escaperLookup[match];
                    });
                    return "$" + escapedString;
                  }
                  var didWarnAboutMaps = false;
                  var userProvidedKeyEscapeRegex = /\/+/g;
                  function escapeUserProvidedKey(text) {
                    return ("" + text).replace(userProvidedKeyEscapeRegex, "$&/");
                  }
                  var POOL_SIZE = 10;
                  var traverseContextPool = [];
                  function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
                    if (traverseContextPool.length) {
                      var traverseContext = traverseContextPool.pop();
                      traverseContext.result = mapResult;
                      traverseContext.keyPrefix = keyPrefix;
                      traverseContext.func = mapFunction;
                      traverseContext.context = mapContext;
                      traverseContext.count = 0;
                      return traverseContext;
                    } else {
                      return {
                        result: mapResult,
                        keyPrefix,
                        func: mapFunction,
                        context: mapContext,
                        count: 0
                      };
                    }
                  }
                  function releaseTraverseContext(traverseContext) {
                    traverseContext.result = null;
                    traverseContext.keyPrefix = null;
                    traverseContext.func = null;
                    traverseContext.context = null;
                    traverseContext.count = 0;
                    if (traverseContextPool.length < POOL_SIZE) {
                      traverseContextPool.push(traverseContext);
                    }
                  }
                  function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
                    var type = typeof children;
                    if (type === "undefined" || type === "boolean") {
                      children = null;
                    }
                    var invokeCallback2 = false;
                    if (children === null) {
                      invokeCallback2 = true;
                    } else {
                      switch (type) {
                        case "string":
                        case "number":
                          invokeCallback2 = true;
                          break;
                        case "object":
                          switch (children.$$typeof) {
                            case REACT_ELEMENT_TYPE:
                            case REACT_PORTAL_TYPE:
                              invokeCallback2 = true;
                          }
                      }
                    }
                    if (invokeCallback2) {
                      callback(
                        traverseContext,
                        children,
                        // If it's the only child, treat the name as if it was wrapped in an array
                        // so that it's consistent if the number of children grows.
                        nameSoFar === "" ? SEPARATOR + getComponentKey(children, 0) : nameSoFar
                      );
                      return 1;
                    }
                    var child = void 0;
                    var nextName = void 0;
                    var subtreeCount = 0;
                    var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
                    if (Array.isArray(children)) {
                      for (var i2 = 0; i2 < children.length; i2++) {
                        child = children[i2];
                        nextName = nextNamePrefix + getComponentKey(child, i2);
                        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                      }
                    } else {
                      var iteratorFn = getIteratorFn(children);
                      if (typeof iteratorFn === "function") {
                        {
                          if (iteratorFn === children.entries) {
                            !didWarnAboutMaps ? warning(false, "Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.%s", ReactDebugCurrentFrame.getStackAddendum()) : void 0;
                            didWarnAboutMaps = true;
                          }
                        }
                        var iterator = iteratorFn.call(children);
                        var step = void 0;
                        var ii = 0;
                        while (!(step = iterator.next()).done) {
                          child = step.value;
                          nextName = nextNamePrefix + getComponentKey(child, ii++);
                          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                        }
                      } else if (type === "object") {
                        var addendum = "";
                        {
                          addendum = " If you meant to render a collection of children, use an array instead." + ReactDebugCurrentFrame.getStackAddendum();
                        }
                        var childrenString = "" + children;
                        invariant(false, "Objects are not valid as a React child (found: %s).%s", childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
                      }
                    }
                    return subtreeCount;
                  }
                  function traverseAllChildren(children, callback, traverseContext) {
                    if (children == null) {
                      return 0;
                    }
                    return traverseAllChildrenImpl(children, "", callback, traverseContext);
                  }
                  function getComponentKey(component, index2) {
                    if (typeof component === "object" && component !== null && component.key != null) {
                      return escape(component.key);
                    }
                    return index2.toString(36);
                  }
                  function forEachSingleChild(bookKeeping, child, name) {
                    var func = bookKeeping.func, context = bookKeeping.context;
                    func.call(context, child, bookKeeping.count++);
                  }
                  function forEachChildren(children, forEachFunc, forEachContext) {
                    if (children == null) {
                      return children;
                    }
                    var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
                    traverseAllChildren(children, forEachSingleChild, traverseContext);
                    releaseTraverseContext(traverseContext);
                  }
                  function mapSingleChildIntoContext(bookKeeping, child, childKey) {
                    var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
                    var mappedChild = func.call(context, child, bookKeeping.count++);
                    if (Array.isArray(mappedChild)) {
                      mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
                    } else if (mappedChild != null) {
                      if (isValidElement(mappedChild)) {
                        mappedChild = cloneAndReplaceKey(
                          mappedChild,
                          // Keep both the (mapped) and old keys if they differ, just as
                          // traverseAllChildren used to do for objects as children
                          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + "/" : "") + childKey
                        );
                      }
                      result.push(mappedChild);
                    }
                  }
                  function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
                    var escapedPrefix = "";
                    if (prefix != null) {
                      escapedPrefix = escapeUserProvidedKey(prefix) + "/";
                    }
                    var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
                    traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
                    releaseTraverseContext(traverseContext);
                  }
                  function mapChildren(children, func, context) {
                    if (children == null) {
                      return children;
                    }
                    var result = [];
                    mapIntoWithKeyPrefixInternal(children, result, null, func, context);
                    return result;
                  }
                  function countChildren(children, context) {
                    return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
                  }
                  function toArray(children) {
                    var result = [];
                    mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
                    return result;
                  }
                  function onlyChild(children) {
                    !isValidElement(children) ? invariant(false, "React.Children.only expected to receive a single React element child.") : void 0;
                    return children;
                  }
                  function createContext(defaultValue, calculateChangedBits) {
                    if (calculateChangedBits === void 0) {
                      calculateChangedBits = null;
                    } else {
                      {
                        !(calculateChangedBits === null || typeof calculateChangedBits === "function") ? warning(false, "createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits) : void 0;
                      }
                    }
                    var context = {
                      $$typeof: REACT_CONTEXT_TYPE,
                      _calculateChangedBits: calculateChangedBits,
                      _defaultValue: defaultValue,
                      _currentValue: defaultValue,
                      _changedBits: 0,
                      // These are circular
                      Provider: null,
                      Consumer: null
                    };
                    context.Provider = {
                      $$typeof: REACT_PROVIDER_TYPE,
                      _context: context
                    };
                    context.Consumer = context;
                    {
                      context._currentRenderer = null;
                    }
                    return context;
                  }
                  function forwardRef(render) {
                    {
                      !(typeof render === "function") ? warning(false, "forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render) : void 0;
                    }
                    return {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render
                    };
                  }
                  var describeComponentFrame = function(name, source, ownerName) {
                    return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
                  };
                  function isValidElementType(type) {
                    return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                    type === REACT_FRAGMENT_TYPE || type === REACT_ASYNC_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
                  }
                  function getComponentName(fiber) {
                    var type = fiber.type;
                    if (typeof type === "function") {
                      return type.displayName || type.name;
                    }
                    if (typeof type === "string") {
                      return type;
                    }
                    switch (type) {
                      case REACT_FRAGMENT_TYPE:
                        return "ReactFragment";
                      case REACT_PORTAL_TYPE:
                        return "ReactPortal";
                      case REACT_CALL_TYPE:
                        return "ReactCall";
                      case REACT_RETURN_TYPE:
                        return "ReactReturn";
                    }
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_FORWARD_REF_TYPE:
                          var functionName = type.render.displayName || type.render.name || "";
                          return functionName !== "" ? "ForwardRef(" + functionName + ")" : "ForwardRef";
                      }
                    }
                    return null;
                  }
                  var currentlyValidatingElement = void 0;
                  var propTypesMisspellWarningShown = void 0;
                  var getDisplayName = function() {
                  };
                  var getStackAddendum = function() {
                  };
                  {
                    currentlyValidatingElement = null;
                    propTypesMisspellWarningShown = false;
                    getDisplayName = function(element) {
                      if (element == null) {
                        return "#empty";
                      } else if (typeof element === "string" || typeof element === "number") {
                        return "#text";
                      } else if (typeof element.type === "string") {
                        return element.type;
                      } else if (element.type === REACT_FRAGMENT_TYPE) {
                        return "React.Fragment";
                      } else {
                        return element.type.displayName || element.type.name || "Unknown";
                      }
                    };
                    getStackAddendum = function() {
                      var stack = "";
                      if (currentlyValidatingElement) {
                        var name = getDisplayName(currentlyValidatingElement);
                        var owner = currentlyValidatingElement._owner;
                        stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
                      }
                      stack += ReactDebugCurrentFrame.getStackAddendum() || "";
                      return stack;
                    };
                  }
                  function getDeclarationErrorAddendum() {
                    if (ReactCurrentOwner.current) {
                      var name = getComponentName(ReactCurrentOwner.current);
                      if (name) {
                        return "\n\nCheck the render method of `" + name + "`.";
                      }
                    }
                    return "";
                  }
                  function getSourceInfoErrorAddendum(elementProps) {
                    if (elementProps !== null && elementProps !== void 0 && elementProps.__source !== void 0) {
                      var source = elementProps.__source;
                      var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                      var lineNumber = source.lineNumber;
                      return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
                    }
                    return "";
                  }
                  var ownerHasKeyUseWarning = {};
                  function getCurrentComponentErrorInfo(parentType) {
                    var info = getDeclarationErrorAddendum();
                    if (!info) {
                      var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                      if (parentName) {
                        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                      }
                    }
                    return info;
                  }
                  function validateExplicitKey(element, parentType) {
                    if (!element._store || element._store.validated || element.key != null) {
                      return;
                    }
                    element._store.validated = true;
                    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
                    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                      return;
                    }
                    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                    var childOwner = "";
                    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
                      childOwner = " It was passed a child from " + getComponentName(element._owner) + ".";
                    }
                    currentlyValidatingElement = element;
                    {
                      warning(false, 'Each child in an array or iterator should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
                    }
                    currentlyValidatingElement = null;
                  }
                  function validateChildKeys(node, parentType) {
                    if (typeof node !== "object") {
                      return;
                    }
                    if (Array.isArray(node)) {
                      for (var i2 = 0; i2 < node.length; i2++) {
                        var child = node[i2];
                        if (isValidElement(child)) {
                          validateExplicitKey(child, parentType);
                        }
                      }
                    } else if (isValidElement(node)) {
                      if (node._store) {
                        node._store.validated = true;
                      }
                    } else if (node) {
                      var iteratorFn = getIteratorFn(node);
                      if (typeof iteratorFn === "function") {
                        if (iteratorFn !== node.entries) {
                          var iterator = iteratorFn.call(node);
                          var step = void 0;
                          while (!(step = iterator.next()).done) {
                            if (isValidElement(step.value)) {
                              validateExplicitKey(step.value, parentType);
                            }
                          }
                        }
                      }
                    }
                  }
                  function validatePropTypes(element) {
                    var componentClass = element.type;
                    if (typeof componentClass !== "function") {
                      return;
                    }
                    var name = componentClass.displayName || componentClass.name;
                    var propTypes = componentClass.propTypes;
                    if (propTypes) {
                      currentlyValidatingElement = element;
                      checkPropTypes(propTypes, element.props, "prop", name, getStackAddendum);
                      currentlyValidatingElement = null;
                    } else if (componentClass.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                      propTypesMisspellWarningShown = true;
                      warning(false, "Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", name || "Unknown");
                    }
                    if (typeof componentClass.getDefaultProps === "function") {
                      !componentClass.getDefaultProps.isReactClassApproved ? warning(false, "getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.") : void 0;
                    }
                  }
                  function validateFragmentProps(fragment) {
                    currentlyValidatingElement = fragment;
                    var keys = Object.keys(fragment.props);
                    for (var i2 = 0; i2 < keys.length; i2++) {
                      var key = keys[i2];
                      if (key !== "children" && key !== "key") {
                        warning(false, "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.%s", key, getStackAddendum());
                        break;
                      }
                    }
                    if (fragment.ref !== null) {
                      warning(false, "Invalid attribute `ref` supplied to `React.Fragment`.%s", getStackAddendum());
                    }
                    currentlyValidatingElement = null;
                  }
                  function createElementWithValidation(type, props, children) {
                    var validType = isValidElementType(type);
                    if (!validType) {
                      var info = "";
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var sourceInfo = getSourceInfoErrorAddendum(props);
                      if (sourceInfo) {
                        info += sourceInfo;
                      } else {
                        info += getDeclarationErrorAddendum();
                      }
                      info += getStackAddendum() || "";
                      var typeString = void 0;
                      if (type === null) {
                        typeString = "null";
                      } else if (Array.isArray(type)) {
                        typeString = "array";
                      } else {
                        typeString = typeof type;
                      }
                      warning(false, "React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
                    }
                    var element = createElement.apply(this, arguments);
                    if (element == null) {
                      return element;
                    }
                    if (validType) {
                      for (var i2 = 2; i2 < arguments.length; i2++) {
                        validateChildKeys(arguments[i2], type);
                      }
                    }
                    if (type === REACT_FRAGMENT_TYPE) {
                      validateFragmentProps(element);
                    } else {
                      validatePropTypes(element);
                    }
                    return element;
                  }
                  function createFactoryWithValidation(type) {
                    var validatedFactory = createElementWithValidation.bind(null, type);
                    validatedFactory.type = type;
                    {
                      Object.defineProperty(validatedFactory, "type", {
                        enumerable: false,
                        get: function() {
                          lowPriorityWarning$1(false, "Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                          Object.defineProperty(this, "type", {
                            value: type
                          });
                          return type;
                        }
                      });
                    }
                    return validatedFactory;
                  }
                  function cloneElementWithValidation(element, props, children) {
                    var newElement = cloneElement.apply(this, arguments);
                    for (var i2 = 2; i2 < arguments.length; i2++) {
                      validateChildKeys(arguments[i2], newElement.type);
                    }
                    validatePropTypes(newElement);
                    return newElement;
                  }
                  var React27 = {
                    Children: {
                      map: mapChildren,
                      forEach: forEachChildren,
                      count: countChildren,
                      toArray,
                      only: onlyChild
                    },
                    createRef,
                    Component,
                    PureComponent,
                    createContext,
                    forwardRef,
                    Fragment: REACT_FRAGMENT_TYPE,
                    StrictMode: REACT_STRICT_MODE_TYPE,
                    unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,
                    createElement: createElementWithValidation,
                    cloneElement: cloneElementWithValidation,
                    createFactory: createFactoryWithValidation,
                    isValidElement,
                    version: ReactVersion,
                    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
                      ReactCurrentOwner,
                      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
                      assign: _assign
                    }
                  };
                  {
                    _assign(React27.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
                      // These should not be included in production.
                      ReactDebugCurrentFrame,
                      // Shim for React DOM 16.0.0 which still destructured (but not used) this.
                      // TODO: remove in React 17.0.
                      ReactComponentTreeHook: {}
                    });
                  }
                  var React$2 = Object.freeze({
                    default: React27
                  });
                  var React$3 = React$2 && React27 || React$2;
                  var react = React$3["default"] ? React$3["default"] : React$3;
                  module2.exports = react;
                })();
              }
            },
            /* 11 */
            /***/
            function(module2, exports2, __webpack_require__) {
              if (true) {
                var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 60103;
                var isValidElement = function(object) {
                  return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                };
                var throwOnDirectAccess = true;
                module2.exports = __webpack_require__(12)(isValidElement, throwOnDirectAccess);
              } else {
                module2.exports = __webpack_require__(13)();
              }
            },
            /* 12 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var emptyFunction = __webpack_require__(1);
              var invariant = __webpack_require__(0);
              var warning = __webpack_require__(3);
              var assign = __webpack_require__(2);
              var ReactPropTypesSecret = __webpack_require__(4);
              var checkPropTypes = __webpack_require__(6);
              module2.exports = function(isValidElement, throwOnDirectAccess) {
                var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = "@@iterator";
                function getIteratorFn(maybeIterable) {
                  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
                  if (typeof iteratorFn === "function") {
                    return iteratorFn;
                  }
                }
                var ANONYMOUS = "<<anonymous>>";
                var ReactPropTypes = {
                  array: createPrimitiveTypeChecker("array"),
                  bool: createPrimitiveTypeChecker("boolean"),
                  func: createPrimitiveTypeChecker("function"),
                  number: createPrimitiveTypeChecker("number"),
                  object: createPrimitiveTypeChecker("object"),
                  string: createPrimitiveTypeChecker("string"),
                  symbol: createPrimitiveTypeChecker("symbol"),
                  any: createAnyTypeChecker(),
                  arrayOf: createArrayOfTypeChecker,
                  element: createElementTypeChecker(),
                  instanceOf: createInstanceTypeChecker,
                  node: createNodeChecker(),
                  objectOf: createObjectOfTypeChecker,
                  oneOf: createEnumTypeChecker,
                  oneOfType: createUnionTypeChecker,
                  shape: createShapeTypeChecker,
                  exact: createStrictShapeTypeChecker
                };
                function is(x2, y2) {
                  if (x2 === y2) {
                    return x2 !== 0 || 1 / x2 === 1 / y2;
                  } else {
                    return x2 !== x2 && y2 !== y2;
                  }
                }
                function PropTypeError(message) {
                  this.message = message;
                  this.stack = "";
                }
                PropTypeError.prototype = Error.prototype;
                function createChainableTypeChecker(validate) {
                  if (true) {
                    var manualPropTypeCallCache = {};
                    var manualPropTypeWarningCount = 0;
                  }
                  function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
                    componentName = componentName || ANONYMOUS;
                    propFullName = propFullName || propName;
                    if (secret !== ReactPropTypesSecret) {
                      if (throwOnDirectAccess) {
                        invariant(
                          false,
                          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                        );
                      } else if (typeof console !== "undefined") {
                        var cacheKey = componentName + ":" + propName;
                        if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                        manualPropTypeWarningCount < 3) {
                          warning(
                            false,
                            "You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",
                            propFullName,
                            componentName
                          );
                          manualPropTypeCallCache[cacheKey] = true;
                          manualPropTypeWarningCount++;
                        }
                      }
                    }
                    if (props[propName] == null) {
                      if (isRequired) {
                        if (props[propName] === null) {
                          return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                        }
                        return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
                      }
                      return null;
                    } else {
                      return validate(props, propName, componentName, location2, propFullName);
                    }
                  }
                  var chainedCheckType = checkType.bind(null, false);
                  chainedCheckType.isRequired = checkType.bind(null, true);
                  return chainedCheckType;
                }
                function createPrimitiveTypeChecker(expectedType) {
                  function validate(props, propName, componentName, location2, propFullName, secret) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== expectedType) {
                      var preciseType = getPreciseType(propValue);
                      return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
                    }
                    return null;
                  }
                  return createChainableTypeChecker(validate);
                }
                function createAnyTypeChecker() {
                  return createChainableTypeChecker(emptyFunction.thatReturnsNull);
                }
                function createArrayOfTypeChecker(typeChecker) {
                  function validate(props, propName, componentName, location2, propFullName) {
                    if (typeof typeChecker !== "function") {
                      return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
                    }
                    var propValue = props[propName];
                    if (!Array.isArray(propValue)) {
                      var propType = getPropType(propValue);
                      return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
                    }
                    for (var i2 = 0; i2 < propValue.length; i2++) {
                      var error = typeChecker(propValue, i2, componentName, location2, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
                      if (error instanceof Error) {
                        return error;
                      }
                    }
                    return null;
                  }
                  return createChainableTypeChecker(validate);
                }
                function createElementTypeChecker() {
                  function validate(props, propName, componentName, location2, propFullName) {
                    var propValue = props[propName];
                    if (!isValidElement(propValue)) {
                      var propType = getPropType(propValue);
                      return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
                    }
                    return null;
                  }
                  return createChainableTypeChecker(validate);
                }
                function createInstanceTypeChecker(expectedClass) {
                  function validate(props, propName, componentName, location2, propFullName) {
                    if (!(props[propName] instanceof expectedClass)) {
                      var expectedClassName = expectedClass.name || ANONYMOUS;
                      var actualClassName = getClassName(props[propName]);
                      return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
                    }
                    return null;
                  }
                  return createChainableTypeChecker(validate);
                }
                function createEnumTypeChecker(expectedValues) {
                  if (!Array.isArray(expectedValues)) {
                    true ? warning(false, "Invalid argument supplied to oneOf, expected an instance of array.") : void 0;
                    return emptyFunction.thatReturnsNull;
                  }
                  function validate(props, propName, componentName, location2, propFullName) {
                    var propValue = props[propName];
                    for (var i2 = 0; i2 < expectedValues.length; i2++) {
                      if (is(propValue, expectedValues[i2])) {
                        return null;
                      }
                    }
                    var valuesString = JSON.stringify(expectedValues);
                    return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + propValue + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
                  }
                  return createChainableTypeChecker(validate);
                }
                function createObjectOfTypeChecker(typeChecker) {
                  function validate(props, propName, componentName, location2, propFullName) {
                    if (typeof typeChecker !== "function") {
                      return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
                    }
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== "object") {
                      return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
                    }
                    for (var key in propValue) {
                      if (propValue.hasOwnProperty(key)) {
                        var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                        if (error instanceof Error) {
                          return error;
                        }
                      }
                    }
                    return null;
                  }
                  return createChainableTypeChecker(validate);
                }
                function createUnionTypeChecker(arrayOfTypeCheckers) {
                  if (!Array.isArray(arrayOfTypeCheckers)) {
                    true ? warning(false, "Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
                    return emptyFunction.thatReturnsNull;
                  }
                  for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
                    var checker = arrayOfTypeCheckers[i2];
                    if (typeof checker !== "function") {
                      warning(
                        false,
                        "Invalid argument supplied to oneOfType. Expected an array of check functions, but received %s at index %s.",
                        getPostfixForTypeWarning(checker),
                        i2
                      );
                      return emptyFunction.thatReturnsNull;
                    }
                  }
                  function validate(props, propName, componentName, location2, propFullName) {
                    for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
                      var checker2 = arrayOfTypeCheckers[i3];
                      if (checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret) == null) {
                        return null;
                      }
                    }
                    return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
                  }
                  return createChainableTypeChecker(validate);
                }
                function createNodeChecker() {
                  function validate(props, propName, componentName, location2, propFullName) {
                    if (!isNode2(props[propName])) {
                      return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
                    }
                    return null;
                  }
                  return createChainableTypeChecker(validate);
                }
                function createShapeTypeChecker(shapeTypes) {
                  function validate(props, propName, componentName, location2, propFullName) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== "object") {
                      return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
                    }
                    for (var key in shapeTypes) {
                      var checker = shapeTypes[key];
                      if (!checker) {
                        continue;
                      }
                      var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                      if (error) {
                        return error;
                      }
                    }
                    return null;
                  }
                  return createChainableTypeChecker(validate);
                }
                function createStrictShapeTypeChecker(shapeTypes) {
                  function validate(props, propName, componentName, location2, propFullName) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== "object") {
                      return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
                    }
                    var allKeys = assign({}, props[propName], shapeTypes);
                    for (var key in allKeys) {
                      var checker = shapeTypes[key];
                      if (!checker) {
                        return new PropTypeError(
                          "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                        );
                      }
                      var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                      if (error) {
                        return error;
                      }
                    }
                    return null;
                  }
                  return createChainableTypeChecker(validate);
                }
                function isNode2(propValue) {
                  switch (typeof propValue) {
                    case "number":
                    case "string":
                    case "undefined":
                      return true;
                    case "boolean":
                      return !propValue;
                    case "object":
                      if (Array.isArray(propValue)) {
                        return propValue.every(isNode2);
                      }
                      if (propValue === null || isValidElement(propValue)) {
                        return true;
                      }
                      var iteratorFn = getIteratorFn(propValue);
                      if (iteratorFn) {
                        var iterator = iteratorFn.call(propValue);
                        var step;
                        if (iteratorFn !== propValue.entries) {
                          while (!(step = iterator.next()).done) {
                            if (!isNode2(step.value)) {
                              return false;
                            }
                          }
                        } else {
                          while (!(step = iterator.next()).done) {
                            var entry = step.value;
                            if (entry) {
                              if (!isNode2(entry[1])) {
                                return false;
                              }
                            }
                          }
                        }
                      } else {
                        return false;
                      }
                      return true;
                    default:
                      return false;
                  }
                }
                function isSymbol(propType, propValue) {
                  if (propType === "symbol") {
                    return true;
                  }
                  if (propValue["@@toStringTag"] === "Symbol") {
                    return true;
                  }
                  if (typeof Symbol === "function" && propValue instanceof Symbol) {
                    return true;
                  }
                  return false;
                }
                function getPropType(propValue) {
                  var propType = typeof propValue;
                  if (Array.isArray(propValue)) {
                    return "array";
                  }
                  if (propValue instanceof RegExp) {
                    return "object";
                  }
                  if (isSymbol(propType, propValue)) {
                    return "symbol";
                  }
                  return propType;
                }
                function getPreciseType(propValue) {
                  if (typeof propValue === "undefined" || propValue === null) {
                    return "" + propValue;
                  }
                  var propType = getPropType(propValue);
                  if (propType === "object") {
                    if (propValue instanceof Date) {
                      return "date";
                    } else if (propValue instanceof RegExp) {
                      return "regexp";
                    }
                  }
                  return propType;
                }
                function getPostfixForTypeWarning(value) {
                  var type = getPreciseType(value);
                  switch (type) {
                    case "array":
                    case "object":
                      return "an " + type;
                    case "boolean":
                    case "date":
                    case "regexp":
                      return "a " + type;
                    default:
                      return type;
                  }
                }
                function getClassName(propValue) {
                  if (!propValue.constructor || !propValue.constructor.name) {
                    return ANONYMOUS;
                  }
                  return propValue.constructor.name;
                }
                ReactPropTypes.checkPropTypes = checkPropTypes;
                ReactPropTypes.PropTypes = ReactPropTypes;
                return ReactPropTypes;
              };
            },
            /* 13 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var emptyFunction = __webpack_require__(1);
              var invariant = __webpack_require__(0);
              var ReactPropTypesSecret = __webpack_require__(4);
              module2.exports = function() {
                function shim(props, propName, componentName, location2, propFullName, secret) {
                  if (secret === ReactPropTypesSecret) {
                    return;
                  }
                  invariant(
                    false,
                    "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
                  );
                }
                ;
                shim.isRequired = shim;
                function getShim() {
                  return shim;
                }
                ;
                var ReactPropTypes = {
                  array: shim,
                  bool: shim,
                  func: shim,
                  number: shim,
                  object: shim,
                  string: shim,
                  symbol: shim,
                  any: shim,
                  arrayOf: getShim,
                  element: shim,
                  instanceOf: getShim,
                  node: shim,
                  objectOf: getShim,
                  oneOf: getShim,
                  oneOfType: getShim,
                  shape: getShim,
                  exact: getShim
                };
                ReactPropTypes.checkPropTypes = emptyFunction;
                ReactPropTypes.PropTypes = ReactPropTypes;
                return ReactPropTypes;
              };
            },
            /* 14 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              var _blank = __webpack_require__(15);
              Object.defineProperty(exports2, "blank", {
                enumerable: true,
                get: function get2() {
                  return _interopRequireDefault(_blank).default;
                }
              });
              var _loadingBalls = __webpack_require__(16);
              Object.defineProperty(exports2, "balls", {
                enumerable: true,
                get: function get2() {
                  return _interopRequireDefault(_loadingBalls).default;
                }
              });
              var _loadingBars = __webpack_require__(17);
              Object.defineProperty(exports2, "bars", {
                enumerable: true,
                get: function get2() {
                  return _interopRequireDefault(_loadingBars).default;
                }
              });
              var _loadingBubbles = __webpack_require__(18);
              Object.defineProperty(exports2, "bubbles", {
                enumerable: true,
                get: function get2() {
                  return _interopRequireDefault(_loadingBubbles).default;
                }
              });
              var _loadingCubes = __webpack_require__(19);
              Object.defineProperty(exports2, "cubes", {
                enumerable: true,
                get: function get2() {
                  return _interopRequireDefault(_loadingCubes).default;
                }
              });
              var _loadingCylon = __webpack_require__(20);
              Object.defineProperty(exports2, "cylon", {
                enumerable: true,
                get: function get2() {
                  return _interopRequireDefault(_loadingCylon).default;
                }
              });
              var _loadingSpin = __webpack_require__(21);
              Object.defineProperty(exports2, "spin", {
                enumerable: true,
                get: function get2() {
                  return _interopRequireDefault(_loadingSpin).default;
                }
              });
              var _loadingSpinningBubbles = __webpack_require__(22);
              Object.defineProperty(exports2, "spinningBubbles", {
                enumerable: true,
                get: function get2() {
                  return _interopRequireDefault(_loadingSpinningBubbles).default;
                }
              });
              var _loadingSpokes = __webpack_require__(23);
              Object.defineProperty(exports2, "spokes", {
                enumerable: true,
                get: function get2() {
                  return _interopRequireDefault(_loadingSpokes).default;
                }
              });
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
              }
            },
            /* 15 */
            /***/
            function(module2, exports2) {
              module2.exports = '<svg class="icon-blank" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"></svg>\n';
            },
            /* 16 */
            /***/
            function(module2, exports2) {
              module2.exports = '<svg class="icon-loading" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">\n  <path transform="translate(-8 0)" d="M4 12 A4 4 0 0 0 4 20 A4 4 0 0 0 4 12"> \n    <animateTransform attributeName="transform" type="translate" values="-8 0; 2 0; 2 0;" dur="0.8s" repeatCount="indefinite" begin="0" keytimes="0;.25;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline"  />\n  </path>\n  <path transform="translate(2 0)" d="M4 12 A4 4 0 0 0 4 20 A4 4 0 0 0 4 12"> \n    <animateTransform attributeName="transform" type="translate" values="2 0; 12 0; 12 0;" dur="0.8s" repeatCount="indefinite" begin="0" keytimes="0;.35;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline"  />\n  </path>\n  <path transform="translate(12 0)" d="M4 12 A4 4 0 0 0 4 20 A4 4 0 0 0 4 12"> \n    <animateTransform attributeName="transform" type="translate" values="12 0; 22 0; 22 0;" dur="0.8s" repeatCount="indefinite" begin="0" keytimes="0;.45;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline"  />\n  </path>\n  <path transform="translate(24 0)" d="M4 12 A4 4 0 0 0 4 20 A4 4 0 0 0 4 12"> \n    <animateTransform attributeName="transform" type="translate" values="22 0; 32 0; 32 0;" dur="0.8s" repeatCount="indefinite" begin="0" keytimes="0;.55;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline"  />\n  </path>\n</svg>\n';
            },
            /* 17 */
            /***/
            function(module2, exports2) {
              module2.exports = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">\n  <path transform="translate(2)" d="M0 12 V20 H4 V12z"> \n    <animate attributeName="d" values="M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z" dur="1.2s" repeatCount="indefinite" begin="0" keytimes="0;.2;.5;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8" calcMode="spline"  />\n  </path>\n  <path transform="translate(8)" d="M0 12 V20 H4 V12z">\n    <animate attributeName="d" values="M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z" dur="1.2s" repeatCount="indefinite" begin="0.2" keytimes="0;.2;.5;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8" calcMode="spline"  />\n  </path>\n  <path transform="translate(14)" d="M0 12 V20 H4 V12z">\n    <animate attributeName="d" values="M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z" dur="1.2s" repeatCount="indefinite" begin="0.4" keytimes="0;.2;.5;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8" calcMode="spline" />\n  </path>\n  <path transform="translate(20)" d="M0 12 V20 H4 V12z">\n    <animate attributeName="d" values="M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z" dur="1.2s" repeatCount="indefinite" begin="0.6" keytimes="0;.2;.5;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8" calcMode="spline" />\n  </path>\n  <path transform="translate(26)" d="M0 12 V20 H4 V12z">\n    <animate attributeName="d" values="M0 12 V20 H4 V12z; M0 4 V28 H4 V4z; M0 12 V20 H4 V12z; M0 12 V20 H4 V12z" dur="1.2s" repeatCount="indefinite" begin="0.8" keytimes="0;.2;.5;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.8 0.4 0.8" calcMode="spline" />\n  </path>\n</svg>\n';
            },
            /* 18 */
            /***/
            function(module2, exports2) {
              module2.exports = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">\n  <circle transform="translate(8 0)" cx="0" cy="16" r="0"> \n    <animate attributeName="r" values="0; 4; 0; 0" dur="1.2s" repeatCount="indefinite" begin="0"\n      keytimes="0;0.2;0.7;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline" />\n  </circle>\n  <circle transform="translate(16 0)" cx="0" cy="16" r="0"> \n    <animate attributeName="r" values="0; 4; 0; 0" dur="1.2s" repeatCount="indefinite" begin="0.3"\n      keytimes="0;0.2;0.7;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline" />\n  </circle>\n  <circle transform="translate(24 0)" cx="0" cy="16" r="0"> \n    <animate attributeName="r" values="0; 4; 0; 0" dur="1.2s" repeatCount="indefinite" begin="0.6"\n      keytimes="0;0.2;0.7;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline" />\n  </circle>\n</svg>\n';
            },
            /* 19 */
            /***/
            function(module2, exports2) {
              module2.exports = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">\n  <path transform="translate(-8 0)" d="M0 12 V20 H8 V12z"> \n    <animateTransform attributeName="transform" type="translate" values="-8 0; 2 0; 2 0;" dur="0.8s" repeatCount="indefinite" begin="0" keytimes="0;.25;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline"  />\n  </path>\n  <path transform="translate(2 0)" d="M0 12 V20 H8 V12z"> \n    <animateTransform attributeName="transform" type="translate" values="2 0; 12 0; 12 0;" dur="0.8s" repeatCount="indefinite" begin="0" keytimes="0;.35;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline"  />\n  </path>\n  <path transform="translate(12 0)" d="M0 12 V20 H8 V12z"> \n    <animateTransform attributeName="transform" type="translate" values="12 0; 22 0; 22 0;" dur="0.8s" repeatCount="indefinite" begin="0" keytimes="0;.45;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline"  />\n  </path>\n  <path transform="translate(24 0)" d="M0 12 V20 H8 V12z"> \n    <animateTransform attributeName="transform" type="translate" values="22 0; 32 0; 32 0;" dur="0.8s" repeatCount="indefinite" begin="0" keytimes="0;.55;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8" calcMode="spline"  />\n  </path>\n</svg>\n';
            },
            /* 20 */
            /***/
            function(module2, exports2) {
              module2.exports = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">\n  <path transform="translate(0 0)" d="M0 12 V20 H4 V12z">\n    <animateTransform attributeName="transform" type="translate" values="0 0; 28 0; 0 0; 0 0" dur="1.5s" begin="0" repeatCount="indefinite" keytimes="0;0.3;0.6;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </path>\n  <path opacity="0.5" transform="translate(0 0)" d="M0 12 V20 H4 V12z">\n    <animateTransform attributeName="transform" type="translate" values="0 0; 28 0; 0 0; 0 0" dur="1.5s" begin="0.1s" repeatCount="indefinite" keytimes="0;0.3;0.6;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </path>\n  <path opacity="0.25" transform="translate(0 0)" d="M0 12 V20 H4 V12z">\n    <animateTransform attributeName="transform" type="translate" values="0 0; 28 0; 0 0; 0 0" dur="1.5s" begin="0.2s" repeatCount="indefinite" keytimes="0;0.3;0.6;1" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </path>\n</svg>\n';
            },
            /* 21 */
            /***/
            function(module2, exports2) {
              module2.exports = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">\n  <path opacity=".25" d="M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4"/>\n  <path d="M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z">\n    <animateTransform attributeName="transform" type="rotate" from="0 16 16" to="360 16 16" dur="0.8s" repeatCount="indefinite" />\n  </path>\n</svg>\n';
            },
            /* 22 */
            /***/
            function(module2, exports2) {
              module2.exports = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">\n  <circle cx="16" cy="3" r="0">\n    <animate attributeName="r" values="0;3;0;0" dur="1s" repeatCount="indefinite" begin="0" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </circle>\n  <circle transform="rotate(45 16 16)" cx="16" cy="3" r="0">\n    <animate attributeName="r" values="0;3;0;0" dur="1s" repeatCount="indefinite" begin="0.125s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </circle>\n  <circle transform="rotate(90 16 16)" cx="16" cy="3" r="0">\n    <animate attributeName="r" values="0;3;0;0" dur="1s" repeatCount="indefinite" begin="0.25s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </circle>\n  <circle transform="rotate(135 16 16)" cx="16" cy="3" r="0">\n    <animate attributeName="r" values="0;3;0;0" dur="1s" repeatCount="indefinite" begin="0.375s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </circle>\n  <circle transform="rotate(180 16 16)" cx="16" cy="3" r="0">\n    <animate attributeName="r" values="0;3;0;0" dur="1s" repeatCount="indefinite" begin="0.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </circle>\n  <circle transform="rotate(225 16 16)" cx="16" cy="3" r="0">\n    <animate attributeName="r" values="0;3;0;0" dur="1s" repeatCount="indefinite" begin="0.625s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </circle>\n  <circle transform="rotate(270 16 16)" cx="16" cy="3" r="0">\n    <animate attributeName="r" values="0;3;0;0" dur="1s" repeatCount="indefinite" begin="0.75s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </circle>\n  <circle transform="rotate(315 16 16)" cx="16" cy="3" r="0">\n    <animate attributeName="r" values="0;3;0;0" dur="1s" repeatCount="indefinite" begin="0.875s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </circle>\n  <circle transform="rotate(180 16 16)" cx="16" cy="3" r="0">\n    <animate attributeName="r" values="0;3;0;0" dur="1s" repeatCount="indefinite" begin="0.5s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" calcMode="spline" />\n  </circle>\n</svg>\n';
            },
            /* 23 */
            /***/
            function(module2, exports2) {
              module2.exports = '<svg id="loading" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">\n  <path opacity=".1" d="M14 0 H18 V8 H14 z" transform="rotate(0 16 16)">\n    <animate attributeName="opacity" from="1" to=".1" dur="1s" repeatCount="indefinite" begin="0"/>\n  </path>\n  <path opacity=".1" d="M14 0 H18 V8 H14 z" transform="rotate(45 16 16)">\n    <animate attributeName="opacity" from="1" to=".1" dur="1s" repeatCount="indefinite" begin="0.125s"/>\n  </path>\n  <path opacity=".1" d="M14 0 H18 V8 H14 z" transform="rotate(90 16 16)">\n    <animate attributeName="opacity" from="1" to=".1" dur="1s" repeatCount="indefinite" begin="0.25s"/>\n  </path>\n  <path opacity=".1" d="M14 0 H18 V8 H14 z" transform="rotate(135 16 16)">\n    <animate attributeName="opacity" from="1" to=".1" dur="1s" repeatCount="indefinite" begin="0.375s"/>\n  </path>\n  <path opacity=".1" d="M14 0 H18 V8 H14 z" transform="rotate(180 16 16)">\n    <animate attributeName="opacity" from="1" to=".1" dur="1s" repeatCount="indefinite" begin="0.5s"/>\n  </path>\n  <path opacity=".1" d="M14 0 H18 V8 H14 z" transform="rotate(225 16 16)">\n    <animate attributeName="opacity" from="1" to=".1" dur="1s" repeatCount="indefinite" begin="0.675s"/>\n  </path>\n  <path opacity=".1" d="M14 0 H18 V8 H14 z" transform="rotate(270 16 16)">\n    <animate attributeName="opacity" from="1" to=".1" dur="1s" repeatCount="indefinite" begin="0.75s"/>\n  </path>\n  <path opacity=".1" d="M14 0 H18 V8 H14 z" transform="rotate(315 16 16)">\n    <animate attributeName="opacity" from="1" to=".1" dur="1s" repeatCount="indefinite" begin="0.875s"/>\n  </path>\n</svg>\n';
            }
            /******/
          ])
        );
      });
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = Function.call.bind(Object.prototype.hasOwnProperty);
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var checkPropTypes = require_checkPropTypes();
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x2, y2) {
          if (x2 === y2) {
            return x2 !== 0 || 1 / x2 === 1 / y2;
          } else {
            return x2 !== x2 && y2 !== y2;
          }
        }
        function PropTypeError(message) {
          this.message = message;
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i2 = 0; i2 < propValue.length; i2++) {
              var error = typeChecker(propValue, i2, componentName, location2, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i2 = 0; i2 < expectedValues.length; i2++) {
              if (is(propValue, expectedValues[i2])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker = arrayOfTypeCheckers[i2];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
              var checker2 = arrayOfTypeCheckers[i3];
              if (checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret) == null) {
                return null;
              }
            }
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode2(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (!checker) {
                continue;
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode2(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode2);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode2(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode2(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/chroma-js/chroma.js
  var require_chroma = __commonJS({
    "node_modules/chroma-js/chroma.js"(exports, module) {
      (function() {
        var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb2, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb2, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log2, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex3, rgb2hsi, rgb2hsl, rgb2hsv2, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb, slice = [].slice;
        type = function() {
          var classToType, len, name, o2, ref;
          classToType = {};
          ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
          for (o2 = 0, len = ref.length; o2 < len; o2++) {
            name = ref[o2];
            classToType["[object " + name + "]"] = name.toLowerCase();
          }
          return function(obj) {
            var strType;
            strType = Object.prototype.toString.call(obj);
            return classToType[strType] || "object";
          };
        }();
        limit = function(x2, min, max2) {
          if (min == null) {
            min = 0;
          }
          if (max2 == null) {
            max2 = 1;
          }
          if (x2 < min) {
            x2 = min;
          }
          if (x2 > max2) {
            x2 = max2;
          }
          return x2;
        };
        unpack = function(args) {
          if (args.length >= 3) {
            return Array.prototype.slice.call(args);
          } else {
            return args[0];
          }
        };
        clip_rgb = function(rgb) {
          var i2, o2;
          rgb._clipped = false;
          rgb._unclipped = rgb.slice(0);
          for (i2 = o2 = 0; o2 < 3; i2 = ++o2) {
            if (i2 < 3) {
              if (rgb[i2] < 0 || rgb[i2] > 255) {
                rgb._clipped = true;
              }
              if (rgb[i2] < 0) {
                rgb[i2] = 0;
              }
              if (rgb[i2] > 255) {
                rgb[i2] = 255;
              }
            } else if (i2 === 3) {
              if (rgb[i2] < 0) {
                rgb[i2] = 0;
              }
              if (rgb[i2] > 1) {
                rgb[i2] = 1;
              }
            }
          }
          if (!rgb._clipped) {
            delete rgb._unclipped;
          }
          return rgb;
        };
        PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log2 = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;
        TWOPI = PI * 2;
        PITHIRD = PI / 3;
        DEG2RAD = PI / 180;
        RAD2DEG = 180 / PI;
        chroma = function() {
          if (arguments[0] instanceof Color) {
            return arguments[0];
          }
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, arguments, function() {
          });
        };
        chroma["default"] = chroma;
        _interpolators = [];
        if (typeof module !== "undefined" && module !== null && module.exports != null) {
          module.exports = chroma;
        }
        if (typeof define === "function" && define.amd) {
          define([], function() {
            return chroma;
          });
        } else {
          root = typeof exports !== "undefined" && exports !== null ? exports : this;
          root.chroma = chroma;
        }
        chroma.version = "1.4.1";
        _input = {};
        _guess_formats = [];
        _guess_formats_sorted = false;
        Color = function() {
          function Color2() {
            var arg, args, chk, len, len1, me2, mode, o2, w3;
            me2 = this;
            args = [];
            for (o2 = 0, len = arguments.length; o2 < len; o2++) {
              arg = arguments[o2];
              if (arg != null) {
                args.push(arg);
              }
            }
            if (args.length > 1) {
              mode = args[args.length - 1];
            }
            if (_input[mode] != null) {
              me2._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));
            } else {
              if (!_guess_formats_sorted) {
                _guess_formats = _guess_formats.sort(function(a2, b2) {
                  return b2.p - a2.p;
                });
                _guess_formats_sorted = true;
              }
              for (w3 = 0, len1 = _guess_formats.length; w3 < len1; w3++) {
                chk = _guess_formats[w3];
                mode = chk.test.apply(chk, args);
                if (mode) {
                  break;
                }
              }
              if (mode) {
                me2._rgb = clip_rgb(_input[mode].apply(_input, args));
              }
            }
            if (me2._rgb == null) {
              console.warn("unknown format: " + args);
            }
            if (me2._rgb == null) {
              me2._rgb = [0, 0, 0];
            }
            if (me2._rgb.length === 3) {
              me2._rgb.push(1);
            }
          }
          Color2.prototype.toString = function() {
            return this.hex();
          };
          return Color2;
        }();
        chroma._input = _input;
        chroma.brewer = brewer = {
          OrRd: ["#fff7ec", "#fee8c8", "#fdd49e", "#fdbb84", "#fc8d59", "#ef6548", "#d7301f", "#b30000", "#7f0000"],
          PuBu: ["#fff7fb", "#ece7f2", "#d0d1e6", "#a6bddb", "#74a9cf", "#3690c0", "#0570b0", "#045a8d", "#023858"],
          BuPu: ["#f7fcfd", "#e0ecf4", "#bfd3e6", "#9ebcda", "#8c96c6", "#8c6bb1", "#88419d", "#810f7c", "#4d004b"],
          Oranges: ["#fff5eb", "#fee6ce", "#fdd0a2", "#fdae6b", "#fd8d3c", "#f16913", "#d94801", "#a63603", "#7f2704"],
          BuGn: ["#f7fcfd", "#e5f5f9", "#ccece6", "#99d8c9", "#66c2a4", "#41ae76", "#238b45", "#006d2c", "#00441b"],
          YlOrBr: ["#ffffe5", "#fff7bc", "#fee391", "#fec44f", "#fe9929", "#ec7014", "#cc4c02", "#993404", "#662506"],
          YlGn: ["#ffffe5", "#f7fcb9", "#d9f0a3", "#addd8e", "#78c679", "#41ab5d", "#238443", "#006837", "#004529"],
          Reds: ["#fff5f0", "#fee0d2", "#fcbba1", "#fc9272", "#fb6a4a", "#ef3b2c", "#cb181d", "#a50f15", "#67000d"],
          RdPu: ["#fff7f3", "#fde0dd", "#fcc5c0", "#fa9fb5", "#f768a1", "#dd3497", "#ae017e", "#7a0177", "#49006a"],
          Greens: ["#f7fcf5", "#e5f5e0", "#c7e9c0", "#a1d99b", "#74c476", "#41ab5d", "#238b45", "#006d2c", "#00441b"],
          YlGnBu: ["#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"],
          Purples: ["#fcfbfd", "#efedf5", "#dadaeb", "#bcbddc", "#9e9ac8", "#807dba", "#6a51a3", "#54278f", "#3f007d"],
          GnBu: ["#f7fcf0", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081"],
          Greys: ["#ffffff", "#f0f0f0", "#d9d9d9", "#bdbdbd", "#969696", "#737373", "#525252", "#252525", "#000000"],
          YlOrRd: ["#ffffcc", "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#bd0026", "#800026"],
          PuRd: ["#f7f4f9", "#e7e1ef", "#d4b9da", "#c994c7", "#df65b0", "#e7298a", "#ce1256", "#980043", "#67001f"],
          Blues: ["#f7fbff", "#deebf7", "#c6dbef", "#9ecae1", "#6baed6", "#4292c6", "#2171b5", "#08519c", "#08306b"],
          PuBuGn: ["#fff7fb", "#ece2f0", "#d0d1e6", "#a6bddb", "#67a9cf", "#3690c0", "#02818a", "#016c59", "#014636"],
          Viridis: ["#440154", "#482777", "#3f4a8a", "#31678e", "#26838f", "#1f9d8a", "#6cce5a", "#b6de2b", "#fee825"],
          Spectral: ["#9e0142", "#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#e6f598", "#abdda4", "#66c2a5", "#3288bd", "#5e4fa2"],
          RdYlGn: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#d9ef8b", "#a6d96a", "#66bd63", "#1a9850", "#006837"],
          RdBu: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#f7f7f7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061"],
          PiYG: ["#8e0152", "#c51b7d", "#de77ae", "#f1b6da", "#fde0ef", "#f7f7f7", "#e6f5d0", "#b8e186", "#7fbc41", "#4d9221", "#276419"],
          PRGn: ["#40004b", "#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#f7f7f7", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837", "#00441b"],
          RdYlBu: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee090", "#ffffbf", "#e0f3f8", "#abd9e9", "#74add1", "#4575b4", "#313695"],
          BrBG: ["#543005", "#8c510a", "#bf812d", "#dfc27d", "#f6e8c3", "#f5f5f5", "#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"],
          RdGy: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#ffffff", "#e0e0e0", "#bababa", "#878787", "#4d4d4d", "#1a1a1a"],
          PuOr: ["#7f3b08", "#b35806", "#e08214", "#fdb863", "#fee0b6", "#f7f7f7", "#d8daeb", "#b2abd2", "#8073ac", "#542788", "#2d004b"],
          Set2: ["#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3"],
          Accent: ["#7fc97f", "#beaed4", "#fdc086", "#ffff99", "#386cb0", "#f0027f", "#bf5b17", "#666666"],
          Set1: ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33", "#a65628", "#f781bf", "#999999"],
          Set3: ["#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462", "#b3de69", "#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f"],
          Dark2: ["#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", "#a6761d", "#666666"],
          Paired: ["#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928"],
          Pastel2: ["#b3e2cd", "#fdcdac", "#cbd5e8", "#f4cae4", "#e6f5c9", "#fff2ae", "#f1e2cc", "#cccccc"],
          Pastel1: ["#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6", "#ffffcc", "#e5d8bd", "#fddaec", "#f2f2f2"]
        };
        (function() {
          var key, results;
          results = [];
          for (key in brewer) {
            results.push(brewer[key.toLowerCase()] = brewer[key]);
          }
          return results;
        })();
        w3cx11 = {
          aliceblue: "#f0f8ff",
          antiquewhite: "#faebd7",
          aqua: "#00ffff",
          aquamarine: "#7fffd4",
          azure: "#f0ffff",
          beige: "#f5f5dc",
          bisque: "#ffe4c4",
          black: "#000000",
          blanchedalmond: "#ffebcd",
          blue: "#0000ff",
          blueviolet: "#8a2be2",
          brown: "#a52a2a",
          burlywood: "#deb887",
          cadetblue: "#5f9ea0",
          chartreuse: "#7fff00",
          chocolate: "#d2691e",
          coral: "#ff7f50",
          cornflower: "#6495ed",
          cornflowerblue: "#6495ed",
          cornsilk: "#fff8dc",
          crimson: "#dc143c",
          cyan: "#00ffff",
          darkblue: "#00008b",
          darkcyan: "#008b8b",
          darkgoldenrod: "#b8860b",
          darkgray: "#a9a9a9",
          darkgreen: "#006400",
          darkgrey: "#a9a9a9",
          darkkhaki: "#bdb76b",
          darkmagenta: "#8b008b",
          darkolivegreen: "#556b2f",
          darkorange: "#ff8c00",
          darkorchid: "#9932cc",
          darkred: "#8b0000",
          darksalmon: "#e9967a",
          darkseagreen: "#8fbc8f",
          darkslateblue: "#483d8b",
          darkslategray: "#2f4f4f",
          darkslategrey: "#2f4f4f",
          darkturquoise: "#00ced1",
          darkviolet: "#9400d3",
          deeppink: "#ff1493",
          deepskyblue: "#00bfff",
          dimgray: "#696969",
          dimgrey: "#696969",
          dodgerblue: "#1e90ff",
          firebrick: "#b22222",
          floralwhite: "#fffaf0",
          forestgreen: "#228b22",
          fuchsia: "#ff00ff",
          gainsboro: "#dcdcdc",
          ghostwhite: "#f8f8ff",
          gold: "#ffd700",
          goldenrod: "#daa520",
          gray: "#808080",
          green: "#008000",
          greenyellow: "#adff2f",
          grey: "#808080",
          honeydew: "#f0fff0",
          hotpink: "#ff69b4",
          indianred: "#cd5c5c",
          indigo: "#4b0082",
          ivory: "#fffff0",
          khaki: "#f0e68c",
          laserlemon: "#ffff54",
          lavender: "#e6e6fa",
          lavenderblush: "#fff0f5",
          lawngreen: "#7cfc00",
          lemonchiffon: "#fffacd",
          lightblue: "#add8e6",
          lightcoral: "#f08080",
          lightcyan: "#e0ffff",
          lightgoldenrod: "#fafad2",
          lightgoldenrodyellow: "#fafad2",
          lightgray: "#d3d3d3",
          lightgreen: "#90ee90",
          lightgrey: "#d3d3d3",
          lightpink: "#ffb6c1",
          lightsalmon: "#ffa07a",
          lightseagreen: "#20b2aa",
          lightskyblue: "#87cefa",
          lightslategray: "#778899",
          lightslategrey: "#778899",
          lightsteelblue: "#b0c4de",
          lightyellow: "#ffffe0",
          lime: "#00ff00",
          limegreen: "#32cd32",
          linen: "#faf0e6",
          magenta: "#ff00ff",
          maroon: "#800000",
          maroon2: "#7f0000",
          maroon3: "#b03060",
          mediumaquamarine: "#66cdaa",
          mediumblue: "#0000cd",
          mediumorchid: "#ba55d3",
          mediumpurple: "#9370db",
          mediumseagreen: "#3cb371",
          mediumslateblue: "#7b68ee",
          mediumspringgreen: "#00fa9a",
          mediumturquoise: "#48d1cc",
          mediumvioletred: "#c71585",
          midnightblue: "#191970",
          mintcream: "#f5fffa",
          mistyrose: "#ffe4e1",
          moccasin: "#ffe4b5",
          navajowhite: "#ffdead",
          navy: "#000080",
          oldlace: "#fdf5e6",
          olive: "#808000",
          olivedrab: "#6b8e23",
          orange: "#ffa500",
          orangered: "#ff4500",
          orchid: "#da70d6",
          palegoldenrod: "#eee8aa",
          palegreen: "#98fb98",
          paleturquoise: "#afeeee",
          palevioletred: "#db7093",
          papayawhip: "#ffefd5",
          peachpuff: "#ffdab9",
          peru: "#cd853f",
          pink: "#ffc0cb",
          plum: "#dda0dd",
          powderblue: "#b0e0e6",
          purple: "#800080",
          purple2: "#7f007f",
          purple3: "#a020f0",
          rebeccapurple: "#663399",
          red: "#ff0000",
          rosybrown: "#bc8f8f",
          royalblue: "#4169e1",
          saddlebrown: "#8b4513",
          salmon: "#fa8072",
          sandybrown: "#f4a460",
          seagreen: "#2e8b57",
          seashell: "#fff5ee",
          sienna: "#a0522d",
          silver: "#c0c0c0",
          skyblue: "#87ceeb",
          slateblue: "#6a5acd",
          slategray: "#708090",
          slategrey: "#708090",
          snow: "#fffafa",
          springgreen: "#00ff7f",
          steelblue: "#4682b4",
          tan: "#d2b48c",
          teal: "#008080",
          thistle: "#d8bfd8",
          tomato: "#ff6347",
          turquoise: "#40e0d0",
          violet: "#ee82ee",
          wheat: "#f5deb3",
          white: "#ffffff",
          whitesmoke: "#f5f5f5",
          yellow: "#ffff00",
          yellowgreen: "#9acd32"
        };
        chroma.colors = colors = w3cx11;
        lab2rgb = function() {
          var a2, args, b2, g2, l2, r2, x2, y2, z2;
          args = unpack(arguments);
          l2 = args[0], a2 = args[1], b2 = args[2];
          y2 = (l2 + 16) / 116;
          x2 = isNaN(a2) ? y2 : y2 + a2 / 500;
          z2 = isNaN(b2) ? y2 : y2 - b2 / 200;
          y2 = LAB_CONSTANTS.Yn * lab_xyz(y2);
          x2 = LAB_CONSTANTS.Xn * lab_xyz(x2);
          z2 = LAB_CONSTANTS.Zn * lab_xyz(z2);
          r2 = xyz_rgb(3.2404542 * x2 - 1.5371385 * y2 - 0.4985314 * z2);
          g2 = xyz_rgb(-0.969266 * x2 + 1.8760108 * y2 + 0.041556 * z2);
          b2 = xyz_rgb(0.0556434 * x2 - 0.2040259 * y2 + 1.0572252 * z2);
          return [r2, g2, b2, args.length > 3 ? args[3] : 1];
        };
        xyz_rgb = function(r2) {
          return 255 * (r2 <= 304e-5 ? 12.92 * r2 : 1.055 * pow(r2, 1 / 2.4) - 0.055);
        };
        lab_xyz = function(t2) {
          if (t2 > LAB_CONSTANTS.t1) {
            return t2 * t2 * t2;
          } else {
            return LAB_CONSTANTS.t2 * (t2 - LAB_CONSTANTS.t0);
          }
        };
        LAB_CONSTANTS = {
          Kn: 18,
          Xn: 0.95047,
          Yn: 1,
          Zn: 1.08883,
          t0: 0.137931034,
          t1: 0.206896552,
          t2: 0.12841855,
          t3: 8856452e-9
        };
        rgb2lab = function() {
          var b2, g2, r2, ref, ref1, x2, y2, z2;
          ref = unpack(arguments), r2 = ref[0], g2 = ref[1], b2 = ref[2];
          ref1 = rgb2xyz(r2, g2, b2), x2 = ref1[0], y2 = ref1[1], z2 = ref1[2];
          return [116 * y2 - 16, 500 * (x2 - y2), 200 * (y2 - z2)];
        };
        rgb_xyz = function(r2) {
          if ((r2 /= 255) <= 0.04045) {
            return r2 / 12.92;
          } else {
            return pow((r2 + 0.055) / 1.055, 2.4);
          }
        };
        xyz_lab = function(t2) {
          if (t2 > LAB_CONSTANTS.t3) {
            return pow(t2, 1 / 3);
          } else {
            return t2 / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
          }
        };
        rgb2xyz = function() {
          var b2, g2, r2, ref, x2, y2, z2;
          ref = unpack(arguments), r2 = ref[0], g2 = ref[1], b2 = ref[2];
          r2 = rgb_xyz(r2);
          g2 = rgb_xyz(g2);
          b2 = rgb_xyz(b2);
          x2 = xyz_lab((0.4124564 * r2 + 0.3575761 * g2 + 0.1804375 * b2) / LAB_CONSTANTS.Xn);
          y2 = xyz_lab((0.2126729 * r2 + 0.7151522 * g2 + 0.072175 * b2) / LAB_CONSTANTS.Yn);
          z2 = xyz_lab((0.0193339 * r2 + 0.119192 * g2 + 0.9503041 * b2) / LAB_CONSTANTS.Zn);
          return [x2, y2, z2];
        };
        chroma.lab = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["lab"]), function() {
          });
        };
        _input.lab = lab2rgb;
        Color.prototype.lab = function() {
          return rgb2lab(this._rgb);
        };
        bezier = function(colors2) {
          var I2, I0, I1, c2, lab0, lab1, lab2, lab3, ref, ref1, ref2;
          colors2 = function() {
            var len, o2, results;
            results = [];
            for (o2 = 0, len = colors2.length; o2 < len; o2++) {
              c2 = colors2[o2];
              results.push(chroma(c2));
            }
            return results;
          }();
          if (colors2.length === 2) {
            ref = function() {
              var len, o2, results;
              results = [];
              for (o2 = 0, len = colors2.length; o2 < len; o2++) {
                c2 = colors2[o2];
                results.push(c2.lab());
              }
              return results;
            }(), lab0 = ref[0], lab1 = ref[1];
            I2 = function(t2) {
              var i2, lab;
              lab = function() {
                var o2, results;
                results = [];
                for (i2 = o2 = 0; o2 <= 2; i2 = ++o2) {
                  results.push(lab0[i2] + t2 * (lab1[i2] - lab0[i2]));
                }
                return results;
              }();
              return chroma.lab.apply(chroma, lab);
            };
          } else if (colors2.length === 3) {
            ref1 = function() {
              var len, o2, results;
              results = [];
              for (o2 = 0, len = colors2.length; o2 < len; o2++) {
                c2 = colors2[o2];
                results.push(c2.lab());
              }
              return results;
            }(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
            I2 = function(t2) {
              var i2, lab;
              lab = function() {
                var o2, results;
                results = [];
                for (i2 = o2 = 0; o2 <= 2; i2 = ++o2) {
                  results.push((1 - t2) * (1 - t2) * lab0[i2] + 2 * (1 - t2) * t2 * lab1[i2] + t2 * t2 * lab2[i2]);
                }
                return results;
              }();
              return chroma.lab.apply(chroma, lab);
            };
          } else if (colors2.length === 4) {
            ref2 = function() {
              var len, o2, results;
              results = [];
              for (o2 = 0, len = colors2.length; o2 < len; o2++) {
                c2 = colors2[o2];
                results.push(c2.lab());
              }
              return results;
            }(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
            I2 = function(t2) {
              var i2, lab;
              lab = function() {
                var o2, results;
                results = [];
                for (i2 = o2 = 0; o2 <= 2; i2 = ++o2) {
                  results.push((1 - t2) * (1 - t2) * (1 - t2) * lab0[i2] + 3 * (1 - t2) * (1 - t2) * t2 * lab1[i2] + 3 * (1 - t2) * t2 * t2 * lab2[i2] + t2 * t2 * t2 * lab3[i2]);
                }
                return results;
              }();
              return chroma.lab.apply(chroma, lab);
            };
          } else if (colors2.length === 5) {
            I0 = bezier(colors2.slice(0, 3));
            I1 = bezier(colors2.slice(2, 5));
            I2 = function(t2) {
              if (t2 < 0.5) {
                return I0(t2 * 2);
              } else {
                return I1((t2 - 0.5) * 2);
              }
            };
          }
          return I2;
        };
        chroma.bezier = function(colors2) {
          var f;
          f = bezier(colors2);
          f.scale = function() {
            return chroma.scale(f);
          };
          return f;
        };
        chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {
          var dh, dl, f;
          if (start == null) {
            start = 300;
          }
          if (rotations == null) {
            rotations = -1.5;
          }
          if (hue == null) {
            hue = 1;
          }
          if (gamma == null) {
            gamma = 1;
          }
          if (lightness == null) {
            lightness = [0, 1];
          }
          dh = 0;
          if (type(lightness) === "array") {
            dl = lightness[1] - lightness[0];
          } else {
            dl = 0;
            lightness = [lightness, lightness];
          }
          f = function(fract) {
            var a2, amp, b2, cos_a, g2, h2, l2, r2, sin_a;
            a2 = TWOPI * ((start + 120) / 360 + rotations * fract);
            l2 = pow(lightness[0] + dl * fract, gamma);
            h2 = dh !== 0 ? hue[0] + fract * dh : hue;
            amp = h2 * l2 * (1 - l2) / 2;
            cos_a = cos(a2);
            sin_a = sin(a2);
            r2 = l2 + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
            g2 = l2 + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
            b2 = l2 + amp * (1.97294 * cos_a);
            return chroma(clip_rgb([r2 * 255, g2 * 255, b2 * 255, 1]));
          };
          f.start = function(s2) {
            if (s2 == null) {
              return start;
            }
            start = s2;
            return f;
          };
          f.rotations = function(r2) {
            if (r2 == null) {
              return rotations;
            }
            rotations = r2;
            return f;
          };
          f.gamma = function(g2) {
            if (g2 == null) {
              return gamma;
            }
            gamma = g2;
            return f;
          };
          f.hue = function(h2) {
            if (h2 == null) {
              return hue;
            }
            hue = h2;
            if (type(hue) === "array") {
              dh = hue[1] - hue[0];
              if (dh === 0) {
                hue = hue[1];
              }
            } else {
              dh = 0;
            }
            return f;
          };
          f.lightness = function(h2) {
            if (h2 == null) {
              return lightness;
            }
            if (type(h2) === "array") {
              lightness = h2;
              dl = h2[1] - h2[0];
            } else {
              lightness = [h2, h2];
              dl = 0;
            }
            return f;
          };
          f.scale = function() {
            return chroma.scale(f);
          };
          f.hue(hue);
          return f;
        };
        chroma.random = function() {
          var code, digits, i2, o2;
          digits = "0123456789abcdef";
          code = "#";
          for (i2 = o2 = 0; o2 < 6; i2 = ++o2) {
            code += digits.charAt(floor(Math.random() * 16));
          }
          return new Color(code);
        };
        _interpolators = [];
        interpolate = function(col1, col2, f, m2) {
          var interpol, len, o2, res;
          if (f == null) {
            f = 0.5;
          }
          if (m2 == null) {
            m2 = "rgb";
          }
          if (type(col1) !== "object") {
            col1 = chroma(col1);
          }
          if (type(col2) !== "object") {
            col2 = chroma(col2);
          }
          for (o2 = 0, len = _interpolators.length; o2 < len; o2++) {
            interpol = _interpolators[o2];
            if (m2 === interpol[0]) {
              res = interpol[1](col1, col2, f, m2);
              break;
            }
          }
          if (res == null) {
            throw "color mode " + m2 + " is not supported";
          }
          return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
        };
        chroma.interpolate = interpolate;
        Color.prototype.interpolate = function(col2, f, m2) {
          return interpolate(this, col2, f, m2);
        };
        chroma.mix = interpolate;
        Color.prototype.mix = Color.prototype.interpolate;
        _input.rgb = function() {
          var k2, ref, results, v2;
          ref = unpack(arguments);
          results = [];
          for (k2 in ref) {
            v2 = ref[k2];
            results.push(v2);
          }
          return results;
        };
        chroma.rgb = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["rgb"]), function() {
          });
        };
        Color.prototype.rgb = function(round2) {
          if (round2 == null) {
            round2 = true;
          }
          if (round2) {
            return this._rgb.map(Math.round).slice(0, 3);
          } else {
            return this._rgb.slice(0, 3);
          }
        };
        Color.prototype.rgba = function(round2) {
          if (round2 == null) {
            round2 = true;
          }
          if (!round2) {
            return this._rgb.slice(0);
          }
          return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
        };
        _guess_formats.push({
          p: 3,
          test: function(n2) {
            var a2;
            a2 = unpack(arguments);
            if (type(a2) === "array" && a2.length === 3) {
              return "rgb";
            }
            if (a2.length === 4 && type(a2[3]) === "number" && a2[3] >= 0 && a2[3] <= 1) {
              return "rgb";
            }
          }
        });
        _input.lrgb = _input.rgb;
        interpolate_lrgb = function(col1, col2, f, m2) {
          var xyz0, xyz1;
          xyz0 = col1._rgb;
          xyz1 = col2._rgb;
          return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m2);
        };
        _average_lrgb = function(colors2) {
          var col, f, len, o2, rgb, xyz;
          f = 1 / colors2.length;
          xyz = [0, 0, 0, 0];
          for (o2 = 0, len = colors2.length; o2 < len; o2++) {
            col = colors2[o2];
            rgb = col._rgb;
            xyz[0] += pow(rgb[0], 2) * f;
            xyz[1] += pow(rgb[1], 2) * f;
            xyz[2] += pow(rgb[2], 2) * f;
            xyz[3] += rgb[3] * f;
          }
          xyz[0] = sqrt(xyz[0]);
          xyz[1] = sqrt(xyz[1]);
          xyz[2] = sqrt(xyz[2]);
          if (xyz[3] > 1) {
            xyz[3] = 1;
          }
          return new Color(clip_rgb(xyz));
        };
        _interpolators.push(["lrgb", interpolate_lrgb]);
        chroma.average = function(colors2, mode) {
          var A2, alpha, c2, cnt, dx, dy, first, i2, l2, len, o2, xyz, xyz2;
          if (mode == null) {
            mode = "rgb";
          }
          l2 = colors2.length;
          colors2 = colors2.map(function(c3) {
            return chroma(c3);
          });
          first = colors2.splice(0, 1)[0];
          if (mode === "lrgb") {
            return _average_lrgb(colors2);
          }
          xyz = first.get(mode);
          cnt = [];
          dx = 0;
          dy = 0;
          for (i2 in xyz) {
            xyz[i2] = xyz[i2] || 0;
            cnt.push(isNaN(xyz[i2]) ? 0 : 1);
            if (mode.charAt(i2) === "h" && !isNaN(xyz[i2])) {
              A2 = xyz[i2] / 180 * PI;
              dx += cos(A2);
              dy += sin(A2);
            }
          }
          alpha = first.alpha();
          for (o2 = 0, len = colors2.length; o2 < len; o2++) {
            c2 = colors2[o2];
            xyz2 = c2.get(mode);
            alpha += c2.alpha();
            for (i2 in xyz) {
              if (!isNaN(xyz2[i2])) {
                cnt[i2] += 1;
                if (mode.charAt(i2) === "h") {
                  A2 = xyz2[i2] / 180 * PI;
                  dx += cos(A2);
                  dy += sin(A2);
                } else {
                  xyz[i2] += xyz2[i2];
                }
              }
            }
          }
          for (i2 in xyz) {
            if (mode.charAt(i2) === "h") {
              A2 = atan2(dy / cnt[i2], dx / cnt[i2]) / PI * 180;
              while (A2 < 0) {
                A2 += 360;
              }
              while (A2 >= 360) {
                A2 -= 360;
              }
              xyz[i2] = A2;
            } else {
              xyz[i2] = xyz[i2] / cnt[i2];
            }
          }
          return chroma(xyz, mode).alpha(alpha / l2);
        };
        hex2rgb2 = function(hex) {
          var a2, b2, g2, r2, rgb, u2;
          if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
            if (hex.length === 4 || hex.length === 7) {
              hex = hex.substr(1);
            }
            if (hex.length === 3) {
              hex = hex.split("");
              hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
            }
            u2 = parseInt(hex, 16);
            r2 = u2 >> 16;
            g2 = u2 >> 8 & 255;
            b2 = u2 & 255;
            return [r2, g2, b2, 1];
          }
          if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
            if (hex.length === 9) {
              hex = hex.substr(1);
            }
            u2 = parseInt(hex, 16);
            r2 = u2 >> 24 & 255;
            g2 = u2 >> 16 & 255;
            b2 = u2 >> 8 & 255;
            a2 = round((u2 & 255) / 255 * 100) / 100;
            return [r2, g2, b2, a2];
          }
          if (_input.css != null && (rgb = _input.css(hex))) {
            return rgb;
          }
          throw "unknown color: " + hex;
        };
        rgb2hex3 = function(channels, mode) {
          var a2, b2, g2, hxa, r2, str, u2;
          if (mode == null) {
            mode = "auto";
          }
          r2 = channels[0], g2 = channels[1], b2 = channels[2], a2 = channels[3];
          if (mode === "auto") {
            mode = a2 < 1 ? "rgba" : "rgb";
          }
          r2 = Math.round(r2);
          g2 = Math.round(g2);
          b2 = Math.round(b2);
          u2 = r2 << 16 | g2 << 8 | b2;
          str = "000000" + u2.toString(16);
          str = str.substr(str.length - 6);
          hxa = "0" + round(a2 * 255).toString(16);
          hxa = hxa.substr(hxa.length - 2);
          return "#" + function() {
            switch (mode.toLowerCase()) {
              case "rgba":
                return str + hxa;
              case "argb":
                return hxa + str;
              default:
                return str;
            }
          }();
        };
        _input.hex = function(h2) {
          return hex2rgb2(h2);
        };
        chroma.hex = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["hex"]), function() {
          });
        };
        Color.prototype.hex = function(mode) {
          if (mode == null) {
            mode = "auto";
          }
          return rgb2hex3(this._rgb, mode);
        };
        _guess_formats.push({
          p: 4,
          test: function(n2) {
            if (arguments.length === 1 && type(n2) === "string") {
              return "hex";
            }
          }
        });
        hsl2rgb = function() {
          var args, b2, c2, g2, h2, i2, l2, o2, r2, ref, s2, t1, t2, t3;
          args = unpack(arguments);
          h2 = args[0], s2 = args[1], l2 = args[2];
          if (s2 === 0) {
            r2 = g2 = b2 = l2 * 255;
          } else {
            t3 = [0, 0, 0];
            c2 = [0, 0, 0];
            t2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
            t1 = 2 * l2 - t2;
            h2 /= 360;
            t3[0] = h2 + 1 / 3;
            t3[1] = h2;
            t3[2] = h2 - 1 / 3;
            for (i2 = o2 = 0; o2 <= 2; i2 = ++o2) {
              if (t3[i2] < 0) {
                t3[i2] += 1;
              }
              if (t3[i2] > 1) {
                t3[i2] -= 1;
              }
              if (6 * t3[i2] < 1) {
                c2[i2] = t1 + (t2 - t1) * 6 * t3[i2];
              } else if (2 * t3[i2] < 1) {
                c2[i2] = t2;
              } else if (3 * t3[i2] < 2) {
                c2[i2] = t1 + (t2 - t1) * (2 / 3 - t3[i2]) * 6;
              } else {
                c2[i2] = t1;
              }
            }
            ref = [round(c2[0] * 255), round(c2[1] * 255), round(c2[2] * 255)], r2 = ref[0], g2 = ref[1], b2 = ref[2];
          }
          if (args.length > 3) {
            return [r2, g2, b2, args[3]];
          } else {
            return [r2, g2, b2];
          }
        };
        rgb2hsl = function(r2, g2, b2) {
          var h2, l2, min, ref, s2;
          if (r2 !== void 0 && r2.length >= 3) {
            ref = r2, r2 = ref[0], g2 = ref[1], b2 = ref[2];
          }
          r2 /= 255;
          g2 /= 255;
          b2 /= 255;
          min = Math.min(r2, g2, b2);
          max = Math.max(r2, g2, b2);
          l2 = (max + min) / 2;
          if (max === min) {
            s2 = 0;
            h2 = Number.NaN;
          } else {
            s2 = l2 < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
          }
          if (r2 === max) {
            h2 = (g2 - b2) / (max - min);
          } else if (g2 === max) {
            h2 = 2 + (b2 - r2) / (max - min);
          } else if (b2 === max) {
            h2 = 4 + (r2 - g2) / (max - min);
          }
          h2 *= 60;
          if (h2 < 0) {
            h2 += 360;
          }
          return [h2, s2, l2];
        };
        chroma.hsl = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["hsl"]), function() {
          });
        };
        _input.hsl = hsl2rgb;
        Color.prototype.hsl = function() {
          return rgb2hsl(this._rgb);
        };
        hsv2rgb2 = function() {
          var args, b2, f, g2, h2, i2, p2, q2, r2, ref, ref1, ref2, ref3, ref4, ref5, s2, t2, v2;
          args = unpack(arguments);
          h2 = args[0], s2 = args[1], v2 = args[2];
          v2 *= 255;
          if (s2 === 0) {
            r2 = g2 = b2 = v2;
          } else {
            if (h2 === 360) {
              h2 = 0;
            }
            if (h2 > 360) {
              h2 -= 360;
            }
            if (h2 < 0) {
              h2 += 360;
            }
            h2 /= 60;
            i2 = floor(h2);
            f = h2 - i2;
            p2 = v2 * (1 - s2);
            q2 = v2 * (1 - s2 * f);
            t2 = v2 * (1 - s2 * (1 - f));
            switch (i2) {
              case 0:
                ref = [v2, t2, p2], r2 = ref[0], g2 = ref[1], b2 = ref[2];
                break;
              case 1:
                ref1 = [q2, v2, p2], r2 = ref1[0], g2 = ref1[1], b2 = ref1[2];
                break;
              case 2:
                ref2 = [p2, v2, t2], r2 = ref2[0], g2 = ref2[1], b2 = ref2[2];
                break;
              case 3:
                ref3 = [p2, q2, v2], r2 = ref3[0], g2 = ref3[1], b2 = ref3[2];
                break;
              case 4:
                ref4 = [t2, p2, v2], r2 = ref4[0], g2 = ref4[1], b2 = ref4[2];
                break;
              case 5:
                ref5 = [v2, p2, q2], r2 = ref5[0], g2 = ref5[1], b2 = ref5[2];
            }
          }
          return [r2, g2, b2, args.length > 3 ? args[3] : 1];
        };
        rgb2hsv2 = function() {
          var b2, delta, g2, h2, min, r2, ref, s2, v2;
          ref = unpack(arguments), r2 = ref[0], g2 = ref[1], b2 = ref[2];
          min = Math.min(r2, g2, b2);
          max = Math.max(r2, g2, b2);
          delta = max - min;
          v2 = max / 255;
          if (max === 0) {
            h2 = Number.NaN;
            s2 = 0;
          } else {
            s2 = delta / max;
            if (r2 === max) {
              h2 = (g2 - b2) / delta;
            }
            if (g2 === max) {
              h2 = 2 + (b2 - r2) / delta;
            }
            if (b2 === max) {
              h2 = 4 + (r2 - g2) / delta;
            }
            h2 *= 60;
            if (h2 < 0) {
              h2 += 360;
            }
          }
          return [h2, s2, v2];
        };
        chroma.hsv = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["hsv"]), function() {
          });
        };
        _input.hsv = hsv2rgb2;
        Color.prototype.hsv = function() {
          return rgb2hsv2(this._rgb);
        };
        num2rgb = function(num) {
          var b2, g2, r2;
          if (type(num) === "number" && num >= 0 && num <= 16777215) {
            r2 = num >> 16;
            g2 = num >> 8 & 255;
            b2 = num & 255;
            return [r2, g2, b2, 1];
          }
          console.warn("unknown num color: " + num);
          return [0, 0, 0, 1];
        };
        rgb2num = function() {
          var b2, g2, r2, ref;
          ref = unpack(arguments), r2 = ref[0], g2 = ref[1], b2 = ref[2];
          return (r2 << 16) + (g2 << 8) + b2;
        };
        chroma.num = function(num) {
          return new Color(num, "num");
        };
        Color.prototype.num = function(mode) {
          if (mode == null) {
            mode = "rgb";
          }
          return rgb2num(this._rgb, mode);
        };
        _input.num = num2rgb;
        _guess_formats.push({
          p: 1,
          test: function(n2) {
            if (arguments.length === 1 && type(n2) === "number" && n2 >= 0 && n2 <= 16777215) {
              return "num";
            }
          }
        });
        hcg2rgb = function() {
          var _c, _g, args, b2, c2, f, g2, h2, i2, p2, q2, r2, ref, ref1, ref2, ref3, ref4, ref5, t2, v2;
          args = unpack(arguments);
          h2 = args[0], c2 = args[1], _g = args[2];
          c2 = c2 / 100;
          g2 = g2 / 100 * 255;
          _c = c2 * 255;
          if (c2 === 0) {
            r2 = g2 = b2 = _g;
          } else {
            if (h2 === 360) {
              h2 = 0;
            }
            if (h2 > 360) {
              h2 -= 360;
            }
            if (h2 < 0) {
              h2 += 360;
            }
            h2 /= 60;
            i2 = floor(h2);
            f = h2 - i2;
            p2 = _g * (1 - c2);
            q2 = p2 + _c * (1 - f);
            t2 = p2 + _c * f;
            v2 = p2 + _c;
            switch (i2) {
              case 0:
                ref = [v2, t2, p2], r2 = ref[0], g2 = ref[1], b2 = ref[2];
                break;
              case 1:
                ref1 = [q2, v2, p2], r2 = ref1[0], g2 = ref1[1], b2 = ref1[2];
                break;
              case 2:
                ref2 = [p2, v2, t2], r2 = ref2[0], g2 = ref2[1], b2 = ref2[2];
                break;
              case 3:
                ref3 = [p2, q2, v2], r2 = ref3[0], g2 = ref3[1], b2 = ref3[2];
                break;
              case 4:
                ref4 = [t2, p2, v2], r2 = ref4[0], g2 = ref4[1], b2 = ref4[2];
                break;
              case 5:
                ref5 = [v2, p2, q2], r2 = ref5[0], g2 = ref5[1], b2 = ref5[2];
            }
          }
          return [r2, g2, b2, args.length > 3 ? args[3] : 1];
        };
        rgb2hcg = function() {
          var _g, b2, c2, delta, g2, h2, min, r2, ref;
          ref = unpack(arguments), r2 = ref[0], g2 = ref[1], b2 = ref[2];
          min = Math.min(r2, g2, b2);
          max = Math.max(r2, g2, b2);
          delta = max - min;
          c2 = delta * 100 / 255;
          _g = min / (255 - delta) * 100;
          if (delta === 0) {
            h2 = Number.NaN;
          } else {
            if (r2 === max) {
              h2 = (g2 - b2) / delta;
            }
            if (g2 === max) {
              h2 = 2 + (b2 - r2) / delta;
            }
            if (b2 === max) {
              h2 = 4 + (r2 - g2) / delta;
            }
            h2 *= 60;
            if (h2 < 0) {
              h2 += 360;
            }
          }
          return [h2, c2, _g];
        };
        chroma.hcg = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["hcg"]), function() {
          });
        };
        _input.hcg = hcg2rgb;
        Color.prototype.hcg = function() {
          return rgb2hcg(this._rgb);
        };
        css2rgb = function(css2) {
          var aa, ab, hsl, i2, m2, o2, rgb, w3;
          css2 = css2.toLowerCase();
          if (chroma.colors != null && chroma.colors[css2]) {
            return hex2rgb2(chroma.colors[css2]);
          }
          if (m2 = css2.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
            rgb = m2.slice(1, 4);
            for (i2 = o2 = 0; o2 <= 2; i2 = ++o2) {
              rgb[i2] = +rgb[i2];
            }
            rgb[3] = 1;
          } else if (m2 = css2.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
            rgb = m2.slice(1, 5);
            for (i2 = w3 = 0; w3 <= 3; i2 = ++w3) {
              rgb[i2] = +rgb[i2];
            }
          } else if (m2 = css2.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
            rgb = m2.slice(1, 4);
            for (i2 = aa = 0; aa <= 2; i2 = ++aa) {
              rgb[i2] = round(rgb[i2] * 2.55);
            }
            rgb[3] = 1;
          } else if (m2 = css2.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
            rgb = m2.slice(1, 5);
            for (i2 = ab = 0; ab <= 2; i2 = ++ab) {
              rgb[i2] = round(rgb[i2] * 2.55);
            }
            rgb[3] = +rgb[3];
          } else if (m2 = css2.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
            hsl = m2.slice(1, 4);
            hsl[1] *= 0.01;
            hsl[2] *= 0.01;
            rgb = hsl2rgb(hsl);
            rgb[3] = 1;
          } else if (m2 = css2.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
            hsl = m2.slice(1, 4);
            hsl[1] *= 0.01;
            hsl[2] *= 0.01;
            rgb = hsl2rgb(hsl);
            rgb[3] = +m2[4];
          }
          return rgb;
        };
        rgb2css = function(rgba) {
          var mode;
          mode = rgba[3] < 1 ? "rgba" : "rgb";
          if (mode === "rgb") {
            return mode + "(" + rgba.slice(0, 3).map(round).join(",") + ")";
          } else if (mode === "rgba") {
            return mode + "(" + rgba.slice(0, 3).map(round).join(",") + "," + rgba[3] + ")";
          } else {
          }
        };
        rnd = function(a2) {
          return round(a2 * 100) / 100;
        };
        hsl2css = function(hsl, alpha) {
          var mode;
          mode = alpha < 1 ? "hsla" : "hsl";
          hsl[0] = rnd(hsl[0] || 0);
          hsl[1] = rnd(hsl[1] * 100) + "%";
          hsl[2] = rnd(hsl[2] * 100) + "%";
          if (mode === "hsla") {
            hsl[3] = alpha;
          }
          return mode + "(" + hsl.join(",") + ")";
        };
        _input.css = function(h2) {
          return css2rgb(h2);
        };
        chroma.css = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["css"]), function() {
          });
        };
        Color.prototype.css = function(mode) {
          if (mode == null) {
            mode = "rgb";
          }
          if (mode.slice(0, 3) === "rgb") {
            return rgb2css(this._rgb);
          } else if (mode.slice(0, 3) === "hsl") {
            return hsl2css(this.hsl(), this.alpha());
          }
        };
        _input.named = function(name) {
          return hex2rgb2(w3cx11[name]);
        };
        _guess_formats.push({
          p: 5,
          test: function(n2) {
            if (arguments.length === 1 && w3cx11[n2] != null) {
              return "named";
            }
          }
        });
        Color.prototype.name = function(n2) {
          var h2, k2;
          if (arguments.length) {
            if (w3cx11[n2]) {
              this._rgb = hex2rgb2(w3cx11[n2]);
            }
            this._rgb[3] = 1;
            this;
          }
          h2 = this.hex("rgb");
          for (k2 in w3cx11) {
            if (h2 === w3cx11[k2]) {
              return k2;
            }
          }
          return h2;
        };
        lch2lab = function() {
          var c2, h2, l2, ref;
          ref = unpack(arguments), l2 = ref[0], c2 = ref[1], h2 = ref[2];
          h2 = h2 * DEG2RAD;
          return [l2, cos(h2) * c2, sin(h2) * c2];
        };
        lch2rgb = function() {
          var L2, a2, args, b2, c2, g2, h2, l2, r2, ref, ref1;
          args = unpack(arguments);
          l2 = args[0], c2 = args[1], h2 = args[2];
          ref = lch2lab(l2, c2, h2), L2 = ref[0], a2 = ref[1], b2 = ref[2];
          ref1 = lab2rgb(L2, a2, b2), r2 = ref1[0], g2 = ref1[1], b2 = ref1[2];
          return [r2, g2, b2, args.length > 3 ? args[3] : 1];
        };
        lab2lch = function() {
          var a2, b2, c2, h2, l2, ref;
          ref = unpack(arguments), l2 = ref[0], a2 = ref[1], b2 = ref[2];
          c2 = sqrt(a2 * a2 + b2 * b2);
          h2 = (atan2(b2, a2) * RAD2DEG + 360) % 360;
          if (round(c2 * 1e4) === 0) {
            h2 = Number.NaN;
          }
          return [l2, c2, h2];
        };
        rgb2lch = function() {
          var a2, b2, g2, l2, r2, ref, ref1;
          ref = unpack(arguments), r2 = ref[0], g2 = ref[1], b2 = ref[2];
          ref1 = rgb2lab(r2, g2, b2), l2 = ref1[0], a2 = ref1[1], b2 = ref1[2];
          return lab2lch(l2, a2, b2);
        };
        chroma.lch = function() {
          var args;
          args = unpack(arguments);
          return new Color(args, "lch");
        };
        chroma.hcl = function() {
          var args;
          args = unpack(arguments);
          return new Color(args, "hcl");
        };
        _input.lch = lch2rgb;
        _input.hcl = function() {
          var c2, h2, l2, ref;
          ref = unpack(arguments), h2 = ref[0], c2 = ref[1], l2 = ref[2];
          return lch2rgb([l2, c2, h2]);
        };
        Color.prototype.lch = function() {
          return rgb2lch(this._rgb);
        };
        Color.prototype.hcl = function() {
          return rgb2lch(this._rgb).reverse();
        };
        rgb2cmyk = function(mode) {
          var b2, c2, f, g2, k2, m2, r2, ref, y2;
          if (mode == null) {
            mode = "rgb";
          }
          ref = unpack(arguments), r2 = ref[0], g2 = ref[1], b2 = ref[2];
          r2 = r2 / 255;
          g2 = g2 / 255;
          b2 = b2 / 255;
          k2 = 1 - Math.max(r2, Math.max(g2, b2));
          f = k2 < 1 ? 1 / (1 - k2) : 0;
          c2 = (1 - r2 - k2) * f;
          m2 = (1 - g2 - k2) * f;
          y2 = (1 - b2 - k2) * f;
          return [c2, m2, y2, k2];
        };
        cmyk2rgb = function() {
          var alpha, args, b2, c2, g2, k2, m2, r2, y2;
          args = unpack(arguments);
          c2 = args[0], m2 = args[1], y2 = args[2], k2 = args[3];
          alpha = args.length > 4 ? args[4] : 1;
          if (k2 === 1) {
            return [0, 0, 0, alpha];
          }
          r2 = c2 >= 1 ? 0 : 255 * (1 - c2) * (1 - k2);
          g2 = m2 >= 1 ? 0 : 255 * (1 - m2) * (1 - k2);
          b2 = y2 >= 1 ? 0 : 255 * (1 - y2) * (1 - k2);
          return [r2, g2, b2, alpha];
        };
        _input.cmyk = function() {
          return cmyk2rgb(unpack(arguments));
        };
        chroma.cmyk = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["cmyk"]), function() {
          });
        };
        Color.prototype.cmyk = function() {
          return rgb2cmyk(this._rgb);
        };
        _input.gl = function() {
          var i2, k2, o2, rgb, v2;
          rgb = function() {
            var ref, results;
            ref = unpack(arguments);
            results = [];
            for (k2 in ref) {
              v2 = ref[k2];
              results.push(v2);
            }
            return results;
          }.apply(this, arguments);
          for (i2 = o2 = 0; o2 <= 2; i2 = ++o2) {
            rgb[i2] *= 255;
          }
          return rgb;
        };
        chroma.gl = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["gl"]), function() {
          });
        };
        Color.prototype.gl = function() {
          var rgb;
          rgb = this._rgb;
          return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
        };
        rgb2luminance = function(r2, g2, b2) {
          var ref;
          ref = unpack(arguments), r2 = ref[0], g2 = ref[1], b2 = ref[2];
          r2 = luminance_x(r2);
          g2 = luminance_x(g2);
          b2 = luminance_x(b2);
          return 0.2126 * r2 + 0.7152 * g2 + 0.0722 * b2;
        };
        luminance_x = function(x2) {
          x2 /= 255;
          if (x2 <= 0.03928) {
            return x2 / 12.92;
          } else {
            return pow((x2 + 0.055) / 1.055, 2.4);
          }
        };
        interpolate_rgb = function(col1, col2, f, m2) {
          var xyz0, xyz1;
          xyz0 = col1._rgb;
          xyz1 = col2._rgb;
          return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m2);
        };
        _interpolators.push(["rgb", interpolate_rgb]);
        Color.prototype.luminance = function(lum, mode) {
          var cur_lum, eps, max_iter, rgba, test;
          if (mode == null) {
            mode = "rgb";
          }
          if (!arguments.length) {
            return rgb2luminance(this._rgb);
          }
          rgba = this._rgb;
          if (lum === 0) {
            rgba = [0, 0, 0, this._rgb[3]];
          } else if (lum === 1) {
            rgba = [255, 255, 255, this[3]];
          } else {
            cur_lum = rgb2luminance(this._rgb);
            eps = 1e-7;
            max_iter = 20;
            test = function(l2, h2) {
              var lm, m2;
              m2 = l2.interpolate(h2, 0.5, mode);
              lm = m2.luminance();
              if (Math.abs(lum - lm) < eps || !max_iter--) {
                return m2;
              }
              if (lm > lum) {
                return test(l2, m2);
              }
              return test(m2, h2);
            };
            if (cur_lum > lum) {
              rgba = test(chroma("black"), this).rgba();
            } else {
              rgba = test(this, chroma("white")).rgba();
            }
          }
          return chroma(rgba).alpha(this.alpha());
        };
        temperature2rgb = function(kelvin) {
          var b2, g2, r2, temp;
          temp = kelvin / 100;
          if (temp < 66) {
            r2 = 255;
            g2 = -155.25485562709179 - 0.44596950469579133 * (g2 = temp - 2) + 104.49216199393888 * log2(g2);
            b2 = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b2 = temp - 10) + 115.67994401066147 * log2(b2);
          } else {
            r2 = 351.97690566805693 + 0.114206453784165 * (r2 = temp - 55) - 40.25366309332127 * log2(r2);
            g2 = 325.4494125711974 + 0.07943456536662342 * (g2 = temp - 50) - 28.0852963507957 * log2(g2);
            b2 = 255;
          }
          return [r2, g2, b2];
        };
        rgb2temperature = function() {
          var b2, eps, g2, maxTemp, minTemp, r2, ref, rgb, temp;
          ref = unpack(arguments), r2 = ref[0], g2 = ref[1], b2 = ref[2];
          minTemp = 1e3;
          maxTemp = 4e4;
          eps = 0.4;
          while (maxTemp - minTemp > eps) {
            temp = (maxTemp + minTemp) * 0.5;
            rgb = temperature2rgb(temp);
            if (rgb[2] / rgb[0] >= b2 / r2) {
              maxTemp = temp;
            } else {
              minTemp = temp;
            }
          }
          return round(temp);
        };
        chroma.temperature = chroma.kelvin = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["temperature"]), function() {
          });
        };
        _input.temperature = _input.kelvin = _input.K = temperature2rgb;
        Color.prototype.temperature = function() {
          return rgb2temperature(this._rgb);
        };
        Color.prototype.kelvin = Color.prototype.temperature;
        chroma.contrast = function(a2, b2) {
          var l1, l2, ref, ref1;
          if ((ref = type(a2)) === "string" || ref === "number") {
            a2 = new Color(a2);
          }
          if ((ref1 = type(b2)) === "string" || ref1 === "number") {
            b2 = new Color(b2);
          }
          l1 = a2.luminance();
          l2 = b2.luminance();
          if (l1 > l2) {
            return (l1 + 0.05) / (l2 + 0.05);
          } else {
            return (l2 + 0.05) / (l1 + 0.05);
          }
        };
        chroma.distance = function(a2, b2, mode) {
          var d2, i2, l1, l2, ref, ref1, sum_sq;
          if (mode == null) {
            mode = "lab";
          }
          if ((ref = type(a2)) === "string" || ref === "number") {
            a2 = new Color(a2);
          }
          if ((ref1 = type(b2)) === "string" || ref1 === "number") {
            b2 = new Color(b2);
          }
          l1 = a2.get(mode);
          l2 = b2.get(mode);
          sum_sq = 0;
          for (i2 in l1) {
            d2 = (l1[i2] || 0) - (l2[i2] || 0);
            sum_sq += d2 * d2;
          }
          return Math.sqrt(sum_sq);
        };
        chroma.deltaE = function(a2, b2, L2, C) {
          var L1, L22, a1, a22, b1, b22, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t2, v1, v2, v3;
          if (L2 == null) {
            L2 = 1;
          }
          if (C == null) {
            C = 1;
          }
          if ((ref = type(a2)) === "string" || ref === "number") {
            a2 = new Color(a2);
          }
          if ((ref1 = type(b2)) === "string" || ref1 === "number") {
            b2 = new Color(b2);
          }
          ref2 = a2.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
          ref3 = b2.lab(), L22 = ref3[0], a22 = ref3[1], b22 = ref3[2];
          c1 = sqrt(a1 * a1 + b1 * b1);
          c2 = sqrt(a22 * a22 + b22 * b22);
          sl = L1 < 16 ? 0.511 : 0.040975 * L1 / (1 + 0.01765 * L1);
          sc = 0.0638 * c1 / (1 + 0.0131 * c1) + 0.638;
          h1 = c1 < 1e-6 ? 0 : atan2(b1, a1) * 180 / PI;
          while (h1 < 0) {
            h1 += 360;
          }
          while (h1 >= 360) {
            h1 -= 360;
          }
          t2 = h1 >= 164 && h1 <= 345 ? 0.56 + abs(0.2 * cos(PI * (h1 + 168) / 180)) : 0.36 + abs(0.4 * cos(PI * (h1 + 35) / 180));
          c4 = c1 * c1 * c1 * c1;
          f = sqrt(c4 / (c4 + 1900));
          sh = sc * (f * t2 + 1 - f);
          delL = L1 - L22;
          delC = c1 - c2;
          delA = a1 - a22;
          delB = b1 - b22;
          dH2 = delA * delA + delB * delB - delC * delC;
          v1 = delL / (L2 * sl);
          v2 = delC / (C * sc);
          v3 = sh;
          return sqrt(v1 * v1 + v2 * v2 + dH2 / (v3 * v3));
        };
        Color.prototype.get = function(modechan) {
          var channel, i2, me2, mode, ref, src;
          me2 = this;
          ref = modechan.split("."), mode = ref[0], channel = ref[1];
          src = me2[mode]();
          if (channel) {
            i2 = mode.indexOf(channel);
            if (i2 > -1) {
              return src[i2];
            } else {
              return console.warn("unknown channel " + channel + " in mode " + mode);
            }
          } else {
            return src;
          }
        };
        Color.prototype.set = function(modechan, value) {
          var channel, i2, me2, mode, ref, src;
          me2 = this;
          ref = modechan.split("."), mode = ref[0], channel = ref[1];
          if (channel) {
            src = me2[mode]();
            i2 = mode.indexOf(channel);
            if (i2 > -1) {
              if (type(value) === "string") {
                switch (value.charAt(0)) {
                  case "+":
                    src[i2] += +value;
                    break;
                  case "-":
                    src[i2] += +value;
                    break;
                  case "*":
                    src[i2] *= +value.substr(1);
                    break;
                  case "/":
                    src[i2] /= +value.substr(1);
                    break;
                  default:
                    src[i2] = +value;
                }
              } else {
                src[i2] = value;
              }
            } else {
              console.warn("unknown channel " + channel + " in mode " + mode);
            }
          } else {
            src = value;
          }
          return chroma(src, mode).alpha(me2.alpha());
        };
        Color.prototype.clipped = function() {
          return this._rgb._clipped || false;
        };
        Color.prototype.alpha = function(a2) {
          if (arguments.length) {
            return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a2]);
          }
          return this._rgb[3];
        };
        Color.prototype.darken = function(amount) {
          var lab, me2;
          if (amount == null) {
            amount = 1;
          }
          me2 = this;
          lab = me2.lab();
          lab[0] -= LAB_CONSTANTS.Kn * amount;
          return chroma.lab(lab).alpha(me2.alpha());
        };
        Color.prototype.brighten = function(amount) {
          if (amount == null) {
            amount = 1;
          }
          return this.darken(-amount);
        };
        Color.prototype.darker = Color.prototype.darken;
        Color.prototype.brighter = Color.prototype.brighten;
        Color.prototype.saturate = function(amount) {
          var lch, me2;
          if (amount == null) {
            amount = 1;
          }
          me2 = this;
          lch = me2.lch();
          lch[1] += amount * LAB_CONSTANTS.Kn;
          if (lch[1] < 0) {
            lch[1] = 0;
          }
          return chroma.lch(lch).alpha(me2.alpha());
        };
        Color.prototype.desaturate = function(amount) {
          if (amount == null) {
            amount = 1;
          }
          return this.saturate(-amount);
        };
        Color.prototype.premultiply = function() {
          var a2, rgb;
          rgb = this.rgb();
          a2 = this.alpha();
          return chroma(rgb[0] * a2, rgb[1] * a2, rgb[2] * a2, a2);
        };
        blend = function(bottom, top, mode) {
          if (!blend[mode]) {
            throw "unknown blend mode " + mode;
          }
          return blend[mode](bottom, top);
        };
        blend_f = function(f) {
          return function(bottom, top) {
            var c0, c1;
            c0 = chroma(top).rgb();
            c1 = chroma(bottom).rgb();
            return chroma(f(c0, c1), "rgb");
          };
        };
        each = function(f) {
          return function(c0, c1) {
            var i2, o2, out;
            out = [];
            for (i2 = o2 = 0; o2 <= 3; i2 = ++o2) {
              out[i2] = f(c0[i2], c1[i2]);
            }
            return out;
          };
        };
        normal = function(a2, b2) {
          return a2;
        };
        multiply = function(a2, b2) {
          return a2 * b2 / 255;
        };
        darken = function(a2, b2) {
          if (a2 > b2) {
            return b2;
          } else {
            return a2;
          }
        };
        lighten = function(a2, b2) {
          if (a2 > b2) {
            return a2;
          } else {
            return b2;
          }
        };
        screen = function(a2, b2) {
          return 255 * (1 - (1 - a2 / 255) * (1 - b2 / 255));
        };
        overlay = function(a2, b2) {
          if (b2 < 128) {
            return 2 * a2 * b2 / 255;
          } else {
            return 255 * (1 - 2 * (1 - a2 / 255) * (1 - b2 / 255));
          }
        };
        burn = function(a2, b2) {
          return 255 * (1 - (1 - b2 / 255) / (a2 / 255));
        };
        dodge = function(a2, b2) {
          if (a2 === 255) {
            return 255;
          }
          a2 = 255 * (b2 / 255) / (1 - a2 / 255);
          if (a2 > 255) {
            return 255;
          } else {
            return a2;
          }
        };
        blend.normal = blend_f(each(normal));
        blend.multiply = blend_f(each(multiply));
        blend.screen = blend_f(each(screen));
        blend.overlay = blend_f(each(overlay));
        blend.darken = blend_f(each(darken));
        blend.lighten = blend_f(each(lighten));
        blend.dodge = blend_f(each(dodge));
        blend.burn = blend_f(each(burn));
        chroma.blend = blend;
        chroma.analyze = function(data) {
          var len, o2, r2, val;
          r2 = {
            min: Number.MAX_VALUE,
            max: Number.MAX_VALUE * -1,
            sum: 0,
            values: [],
            count: 0
          };
          for (o2 = 0, len = data.length; o2 < len; o2++) {
            val = data[o2];
            if (val != null && !isNaN(val)) {
              r2.values.push(val);
              r2.sum += val;
              if (val < r2.min) {
                r2.min = val;
              }
              if (val > r2.max) {
                r2.max = val;
              }
              r2.count += 1;
            }
          }
          r2.domain = [r2.min, r2.max];
          r2.limits = function(mode, num) {
            return chroma.limits(r2, mode, num);
          };
          return r2;
        };
        chroma.scale = function(colors2, positions) {
          var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;
          _mode = "rgb";
          _nacol = chroma("#ccc");
          _spread = 0;
          _fixed = false;
          _domain = [0, 1];
          _pos = [];
          _padding = [0, 0];
          _classes = false;
          _colors = [];
          _out = false;
          _min = 0;
          _max = 1;
          _correctLightness = false;
          _colorCache = {};
          _useCache = true;
          _gamma = 1;
          setColors = function(colors3) {
            var c2, col, o2, ref, ref1, w3;
            if (colors3 == null) {
              colors3 = ["#fff", "#000"];
            }
            if (colors3 != null && type(colors3) === "string" && chroma.brewer != null) {
              colors3 = chroma.brewer[colors3] || chroma.brewer[colors3.toLowerCase()] || colors3;
            }
            if (type(colors3) === "array") {
              if (colors3.length === 1) {
                colors3 = [colors3[0], colors3[0]];
              }
              colors3 = colors3.slice(0);
              for (c2 = o2 = 0, ref = colors3.length - 1; 0 <= ref ? o2 <= ref : o2 >= ref; c2 = 0 <= ref ? ++o2 : --o2) {
                col = colors3[c2];
                if (type(col) === "string") {
                  colors3[c2] = chroma(col);
                }
              }
              _pos.length = 0;
              for (c2 = w3 = 0, ref1 = colors3.length - 1; 0 <= ref1 ? w3 <= ref1 : w3 >= ref1; c2 = 0 <= ref1 ? ++w3 : --w3) {
                _pos.push(c2 / (colors3.length - 1));
              }
            }
            resetCache();
            return _colors = colors3;
          };
          getClass = function(value) {
            var i2, n2;
            if (_classes != null) {
              n2 = _classes.length - 1;
              i2 = 0;
              while (i2 < n2 && value >= _classes[i2]) {
                i2++;
              }
              return i2 - 1;
            }
            return 0;
          };
          tmap = function(t2) {
            return t2;
          };
          classifyValue = function(value) {
            var i2, maxc, minc, n2, val;
            val = value;
            if (_classes.length > 2) {
              n2 = _classes.length - 1;
              i2 = getClass(value);
              minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);
              maxc = _classes[n2 - 1] + (_classes[n2] - _classes[n2 - 1]) * (1 - _spread * 0.5);
              val = _min + (_classes[i2] + (_classes[i2 + 1] - _classes[i2]) * 0.5 - minc) / (maxc - minc) * (_max - _min);
            }
            return val;
          };
          getColor = function(val, bypassMap) {
            var c2, col, i2, k2, o2, p2, ref, t2;
            if (bypassMap == null) {
              bypassMap = false;
            }
            if (isNaN(val) || val === null) {
              return _nacol;
            }
            if (!bypassMap) {
              if (_classes && _classes.length > 2) {
                c2 = getClass(val);
                t2 = c2 / (_classes.length - 2);
              } else if (_max !== _min) {
                t2 = (val - _min) / (_max - _min);
              } else {
                t2 = 1;
              }
            } else {
              t2 = val;
            }
            if (!bypassMap) {
              t2 = tmap(t2);
            }
            if (_gamma !== 1) {
              t2 = pow(t2, _gamma);
            }
            t2 = _padding[0] + t2 * (1 - _padding[0] - _padding[1]);
            t2 = Math.min(1, Math.max(0, t2));
            k2 = Math.floor(t2 * 1e4);
            if (_useCache && _colorCache[k2]) {
              col = _colorCache[k2];
            } else {
              if (type(_colors) === "array") {
                for (i2 = o2 = 0, ref = _pos.length - 1; 0 <= ref ? o2 <= ref : o2 >= ref; i2 = 0 <= ref ? ++o2 : --o2) {
                  p2 = _pos[i2];
                  if (t2 <= p2) {
                    col = _colors[i2];
                    break;
                  }
                  if (t2 >= p2 && i2 === _pos.length - 1) {
                    col = _colors[i2];
                    break;
                  }
                  if (t2 > p2 && t2 < _pos[i2 + 1]) {
                    t2 = (t2 - p2) / (_pos[i2 + 1] - p2);
                    col = chroma.interpolate(_colors[i2], _colors[i2 + 1], t2, _mode);
                    break;
                  }
                }
              } else if (type(_colors) === "function") {
                col = _colors(t2);
              }
              if (_useCache) {
                _colorCache[k2] = col;
              }
            }
            return col;
          };
          resetCache = function() {
            return _colorCache = {};
          };
          setColors(colors2);
          f = function(v2) {
            var c2;
            c2 = chroma(getColor(v2));
            if (_out && c2[_out]) {
              return c2[_out]();
            } else {
              return c2;
            }
          };
          f.classes = function(classes) {
            var d2;
            if (classes != null) {
              if (type(classes) === "array") {
                _classes = classes;
                _domain = [classes[0], classes[classes.length - 1]];
              } else {
                d2 = chroma.analyze(_domain);
                if (classes === 0) {
                  _classes = [d2.min, d2.max];
                } else {
                  _classes = chroma.limits(d2, "e", classes);
                }
              }
              return f;
            }
            return _classes;
          };
          f.domain = function(domain) {
            var c2, d2, k2, len, o2, ref, w3;
            if (!arguments.length) {
              return _domain;
            }
            _min = domain[0];
            _max = domain[domain.length - 1];
            _pos = [];
            k2 = _colors.length;
            if (domain.length === k2 && _min !== _max) {
              for (o2 = 0, len = domain.length; o2 < len; o2++) {
                d2 = domain[o2];
                _pos.push((d2 - _min) / (_max - _min));
              }
            } else {
              for (c2 = w3 = 0, ref = k2 - 1; 0 <= ref ? w3 <= ref : w3 >= ref; c2 = 0 <= ref ? ++w3 : --w3) {
                _pos.push(c2 / (k2 - 1));
              }
            }
            _domain = [_min, _max];
            return f;
          };
          f.mode = function(_m) {
            if (!arguments.length) {
              return _mode;
            }
            _mode = _m;
            resetCache();
            return f;
          };
          f.range = function(colors3, _pos2) {
            setColors(colors3, _pos2);
            return f;
          };
          f.out = function(_o) {
            _out = _o;
            return f;
          };
          f.spread = function(val) {
            if (!arguments.length) {
              return _spread;
            }
            _spread = val;
            return f;
          };
          f.correctLightness = function(v2) {
            if (v2 == null) {
              v2 = true;
            }
            _correctLightness = v2;
            resetCache();
            if (_correctLightness) {
              tmap = function(t2) {
                var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;
                L0 = getColor(0, true).lab()[0];
                L1 = getColor(1, true).lab()[0];
                pol = L0 > L1;
                L_actual = getColor(t2, true).lab()[0];
                L_ideal = L0 + (L1 - L0) * t2;
                L_diff = L_actual - L_ideal;
                t0 = 0;
                t1 = 1;
                max_iter = 20;
                while (Math.abs(L_diff) > 0.01 && max_iter-- > 0) {
                  (function() {
                    if (pol) {
                      L_diff *= -1;
                    }
                    if (L_diff < 0) {
                      t0 = t2;
                      t2 += (t1 - t2) * 0.5;
                    } else {
                      t1 = t2;
                      t2 += (t0 - t2) * 0.5;
                    }
                    L_actual = getColor(t2, true).lab()[0];
                    return L_diff = L_actual - L_ideal;
                  })();
                }
                return t2;
              };
            } else {
              tmap = function(t2) {
                return t2;
              };
            }
            return f;
          };
          f.padding = function(p2) {
            if (p2 != null) {
              if (type(p2) === "number") {
                p2 = [p2, p2];
              }
              _padding = p2;
              return f;
            } else {
              return _padding;
            }
          };
          f.colors = function(numColors, out) {
            var dd, dm, i2, o2, ref, result, results, samples, w3;
            if (arguments.length < 2) {
              out = "hex";
            }
            result = [];
            if (arguments.length === 0) {
              result = _colors.slice(0);
            } else if (numColors === 1) {
              result = [f(0.5)];
            } else if (numColors > 1) {
              dm = _domain[0];
              dd = _domain[1] - dm;
              result = function() {
                results = [];
                for (var o3 = 0; 0 <= numColors ? o3 < numColors : o3 > numColors; 0 <= numColors ? o3++ : o3--) {
                  results.push(o3);
                }
                return results;
              }.apply(this).map(function(i3) {
                return f(dm + i3 / (numColors - 1) * dd);
              });
            } else {
              colors2 = [];
              samples = [];
              if (_classes && _classes.length > 2) {
                for (i2 = w3 = 1, ref = _classes.length; 1 <= ref ? w3 < ref : w3 > ref; i2 = 1 <= ref ? ++w3 : --w3) {
                  samples.push((_classes[i2 - 1] + _classes[i2]) * 0.5);
                }
              } else {
                samples = _domain;
              }
              result = samples.map(function(v2) {
                return f(v2);
              });
            }
            if (chroma[out]) {
              result = result.map(function(c2) {
                return c2[out]();
              });
            }
            return result;
          };
          f.cache = function(c2) {
            if (c2 != null) {
              _useCache = c2;
              return f;
            } else {
              return _useCache;
            }
          };
          f.gamma = function(g2) {
            if (g2 != null) {
              _gamma = g2;
              return f;
            } else {
              return _gamma;
            }
          };
          f.nodata = function(d2) {
            if (d2 != null) {
              _nacol = chroma(d2);
              return f;
            } else {
              return _nacol;
            }
          };
          return f;
        };
        if (chroma.scales == null) {
          chroma.scales = {};
        }
        chroma.scales.cool = function() {
          return chroma.scale([chroma.hsl(180, 1, 0.9), chroma.hsl(250, 0.7, 0.4)]);
        };
        chroma.scales.hot = function() {
          return chroma.scale(["#000", "#f00", "#ff0", "#fff"], [0, 0.25, 0.75, 1]).mode("rgb");
        };
        chroma.analyze = function(data, key, filter) {
          var add, k2, len, o2, r2, val, visit;
          r2 = {
            min: Number.MAX_VALUE,
            max: Number.MAX_VALUE * -1,
            sum: 0,
            values: [],
            count: 0
          };
          if (filter == null) {
            filter = function() {
              return true;
            };
          }
          add = function(val2) {
            if (val2 != null && !isNaN(val2)) {
              r2.values.push(val2);
              r2.sum += val2;
              if (val2 < r2.min) {
                r2.min = val2;
              }
              if (val2 > r2.max) {
                r2.max = val2;
              }
              r2.count += 1;
            }
          };
          visit = function(val2, k3) {
            if (filter(val2, k3)) {
              if (key != null && type(key) === "function") {
                return add(key(val2));
              } else if (key != null && type(key) === "string" || type(key) === "number") {
                return add(val2[key]);
              } else {
                return add(val2);
              }
            }
          };
          if (type(data) === "array") {
            for (o2 = 0, len = data.length; o2 < len; o2++) {
              val = data[o2];
              visit(val);
            }
          } else {
            for (k2 in data) {
              val = data[k2];
              visit(val, k2);
            }
          }
          r2.domain = [r2.min, r2.max];
          r2.limits = function(mode, num) {
            return chroma.limits(r2, mode, num);
          };
          return r2;
        };
        chroma.limits = function(data, mode, num) {
          var aa, ab, ac, ad, ae2, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i2, j2, kClusters, limits, max_log, min, min_log, mindist, n2, nb_iters, newCentroids, o2, p2, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v2, value, values, w3;
          if (mode == null) {
            mode = "equal";
          }
          if (num == null) {
            num = 7;
          }
          if (type(data) === "array") {
            data = chroma.analyze(data);
          }
          min = data.min;
          max = data.max;
          sum = data.sum;
          values = data.values.sort(function(a2, b2) {
            return a2 - b2;
          });
          if (num === 1) {
            return [min, max];
          }
          limits = [];
          if (mode.substr(0, 1) === "c") {
            limits.push(min);
            limits.push(max);
          }
          if (mode.substr(0, 1) === "e") {
            limits.push(min);
            for (i2 = o2 = 1, ref = num - 1; 1 <= ref ? o2 <= ref : o2 >= ref; i2 = 1 <= ref ? ++o2 : --o2) {
              limits.push(min + i2 / num * (max - min));
            }
            limits.push(max);
          } else if (mode.substr(0, 1) === "l") {
            if (min <= 0) {
              throw "Logarithmic scales are only possible for values > 0";
            }
            min_log = Math.LOG10E * log2(min);
            max_log = Math.LOG10E * log2(max);
            limits.push(min);
            for (i2 = w3 = 1, ref1 = num - 1; 1 <= ref1 ? w3 <= ref1 : w3 >= ref1; i2 = 1 <= ref1 ? ++w3 : --w3) {
              limits.push(pow(10, min_log + i2 / num * (max_log - min_log)));
            }
            limits.push(max);
          } else if (mode.substr(0, 1) === "q") {
            limits.push(min);
            for (i2 = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i2 = 1 <= ref2 ? ++aa : --aa) {
              p2 = (values.length - 1) * i2 / num;
              pb = floor(p2);
              if (pb === p2) {
                limits.push(values[pb]);
              } else {
                pr = p2 - pb;
                limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
              }
            }
            limits.push(max);
          } else if (mode.substr(0, 1) === "k") {
            n2 = values.length;
            assignments = new Array(n2);
            clusterSizes = new Array(num);
            repeat = true;
            nb_iters = 0;
            centroids = null;
            centroids = [];
            centroids.push(min);
            for (i2 = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i2 = 1 <= ref3 ? ++ab : --ab) {
              centroids.push(min + i2 / num * (max - min));
            }
            centroids.push(max);
            while (repeat) {
              for (j2 = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j2 = 0 <= ref4 ? ++ac : --ac) {
                clusterSizes[j2] = 0;
              }
              for (i2 = ad = 0, ref5 = n2 - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i2 = 0 <= ref5 ? ++ad : --ad) {
                value = values[i2];
                mindist = Number.MAX_VALUE;
                for (j2 = ae2 = 0, ref6 = num - 1; 0 <= ref6 ? ae2 <= ref6 : ae2 >= ref6; j2 = 0 <= ref6 ? ++ae2 : --ae2) {
                  dist = abs(centroids[j2] - value);
                  if (dist < mindist) {
                    mindist = dist;
                    best = j2;
                  }
                }
                clusterSizes[best]++;
                assignments[i2] = best;
              }
              newCentroids = new Array(num);
              for (j2 = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j2 = 0 <= ref7 ? ++af : --af) {
                newCentroids[j2] = null;
              }
              for (i2 = ag = 0, ref8 = n2 - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i2 = 0 <= ref8 ? ++ag : --ag) {
                cluster = assignments[i2];
                if (newCentroids[cluster] === null) {
                  newCentroids[cluster] = values[i2];
                } else {
                  newCentroids[cluster] += values[i2];
                }
              }
              for (j2 = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j2 = 0 <= ref9 ? ++ah : --ah) {
                newCentroids[j2] *= 1 / clusterSizes[j2];
              }
              repeat = false;
              for (j2 = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j2 = 0 <= ref10 ? ++ai : --ai) {
                if (newCentroids[j2] !== centroids[i2]) {
                  repeat = true;
                  break;
                }
              }
              centroids = newCentroids;
              nb_iters++;
              if (nb_iters > 200) {
                repeat = false;
              }
            }
            kClusters = {};
            for (j2 = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j2 = 0 <= ref11 ? ++aj : --aj) {
              kClusters[j2] = [];
            }
            for (i2 = ak = 0, ref12 = n2 - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i2 = 0 <= ref12 ? ++ak : --ak) {
              cluster = assignments[i2];
              kClusters[cluster].push(values[i2]);
            }
            tmpKMeansBreaks = [];
            for (j2 = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j2 = 0 <= ref13 ? ++al : --al) {
              tmpKMeansBreaks.push(kClusters[j2][0]);
              tmpKMeansBreaks.push(kClusters[j2][kClusters[j2].length - 1]);
            }
            tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a2, b2) {
              return a2 - b2;
            });
            limits.push(tmpKMeansBreaks[0]);
            for (i2 = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i2 = am += 2) {
              v2 = tmpKMeansBreaks[i2];
              if (!isNaN(v2) && limits.indexOf(v2) === -1) {
                limits.push(v2);
              }
            }
          }
          return limits;
        };
        hsi2rgb = function(h2, s2, i2) {
          var args, b2, g2, r2;
          args = unpack(arguments);
          h2 = args[0], s2 = args[1], i2 = args[2];
          if (isNaN(h2)) {
            h2 = 0;
          }
          h2 /= 360;
          if (h2 < 1 / 3) {
            b2 = (1 - s2) / 3;
            r2 = (1 + s2 * cos(TWOPI * h2) / cos(PITHIRD - TWOPI * h2)) / 3;
            g2 = 1 - (b2 + r2);
          } else if (h2 < 2 / 3) {
            h2 -= 1 / 3;
            r2 = (1 - s2) / 3;
            g2 = (1 + s2 * cos(TWOPI * h2) / cos(PITHIRD - TWOPI * h2)) / 3;
            b2 = 1 - (r2 + g2);
          } else {
            h2 -= 2 / 3;
            g2 = (1 - s2) / 3;
            b2 = (1 + s2 * cos(TWOPI * h2) / cos(PITHIRD - TWOPI * h2)) / 3;
            r2 = 1 - (g2 + b2);
          }
          r2 = limit(i2 * r2 * 3);
          g2 = limit(i2 * g2 * 3);
          b2 = limit(i2 * b2 * 3);
          return [r2 * 255, g2 * 255, b2 * 255, args.length > 3 ? args[3] : 1];
        };
        rgb2hsi = function() {
          var b2, g2, h2, i2, min, r2, ref, s2;
          ref = unpack(arguments), r2 = ref[0], g2 = ref[1], b2 = ref[2];
          TWOPI = Math.PI * 2;
          r2 /= 255;
          g2 /= 255;
          b2 /= 255;
          min = Math.min(r2, g2, b2);
          i2 = (r2 + g2 + b2) / 3;
          s2 = 1 - min / i2;
          if (s2 === 0) {
            h2 = 0;
          } else {
            h2 = (r2 - g2 + (r2 - b2)) / 2;
            h2 /= Math.sqrt((r2 - g2) * (r2 - g2) + (r2 - b2) * (g2 - b2));
            h2 = Math.acos(h2);
            if (b2 > g2) {
              h2 = TWOPI - h2;
            }
            h2 /= TWOPI;
          }
          return [h2 * 360, s2, i2];
        };
        chroma.hsi = function() {
          return function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor(), result = func.apply(child, args);
            return Object(result) === result ? result : child;
          }(Color, slice.call(arguments).concat(["hsi"]), function() {
          });
        };
        _input.hsi = hsi2rgb;
        Color.prototype.hsi = function() {
          return rgb2hsi(this._rgb);
        };
        interpolate_hsx = function(col1, col2, f, m2) {
          var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;
          if (m2 === "hsl") {
            xyz0 = col1.hsl();
            xyz1 = col2.hsl();
          } else if (m2 === "hsv") {
            xyz0 = col1.hsv();
            xyz1 = col2.hsv();
          } else if (m2 === "hcg") {
            xyz0 = col1.hcg();
            xyz1 = col2.hcg();
          } else if (m2 === "hsi") {
            xyz0 = col1.hsi();
            xyz1 = col2.hsi();
          } else if (m2 === "lch" || m2 === "hcl") {
            m2 = "hcl";
            xyz0 = col1.hcl();
            xyz1 = col2.hcl();
          }
          if (m2.substr(0, 1) === "h") {
            hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
            hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
          }
          if (!isNaN(hue0) && !isNaN(hue1)) {
            if (hue1 > hue0 && hue1 - hue0 > 180) {
              dh = hue1 - (hue0 + 360);
            } else if (hue1 < hue0 && hue0 - hue1 > 180) {
              dh = hue1 + 360 - hue0;
            } else {
              dh = hue1 - hue0;
            }
            hue = hue0 + f * dh;
          } else if (!isNaN(hue0)) {
            hue = hue0;
            if ((lbv1 === 1 || lbv1 === 0) && m2 !== "hsv") {
              sat = sat0;
            }
          } else if (!isNaN(hue1)) {
            hue = hue1;
            if ((lbv0 === 1 || lbv0 === 0) && m2 !== "hsv") {
              sat = sat1;
            }
          } else {
            hue = Number.NaN;
          }
          if (sat == null) {
            sat = sat0 + f * (sat1 - sat0);
          }
          lbv = lbv0 + f * (lbv1 - lbv0);
          return res = chroma[m2](hue, sat, lbv);
        };
        _interpolators = _interpolators.concat(function() {
          var len, o2, ref, results;
          ref = ["hsv", "hsl", "hsi", "hcl", "lch", "hcg"];
          results = [];
          for (o2 = 0, len = ref.length; o2 < len; o2++) {
            m = ref[o2];
            results.push([m, interpolate_hsx]);
          }
          return results;
        }());
        interpolate_num = function(col1, col2, f, m2) {
          var n1, n2;
          n1 = col1.num();
          n2 = col2.num();
          return chroma.num(n1 + (n2 - n1) * f, "num");
        };
        _interpolators.push(["num", interpolate_num]);
        interpolate_lab = function(col1, col2, f, m2) {
          var res, xyz0, xyz1;
          xyz0 = col1.lab();
          xyz1 = col2.lab();
          return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m2);
        };
        _interpolators.push(["lab", interpolate_lab]);
      }).call(exports);
    }
  });

  // node_modules/es6-weak-map/is-implemented.js
  var require_is_implemented = __commonJS({
    "node_modules/es6-weak-map/is-implemented.js"(exports, module) {
      "use strict";
      module.exports = function() {
        var weakMap, obj;
        if (typeof WeakMap !== "function")
          return false;
        try {
          weakMap = new WeakMap([[obj = {}, "one"], [{}, "two"], [{}, "three"]]);
        } catch (e2) {
          return false;
        }
        if (String(weakMap) !== "[object WeakMap]")
          return false;
        if (typeof weakMap.set !== "function")
          return false;
        if (weakMap.set({}, 1) !== weakMap)
          return false;
        if (typeof weakMap.delete !== "function")
          return false;
        if (typeof weakMap.has !== "function")
          return false;
        if (weakMap.get(obj) !== "one")
          return false;
        return true;
      };
    }
  });

  // node_modules/es5-ext/function/noop.js
  var require_noop = __commonJS({
    "node_modules/es5-ext/function/noop.js"(exports, module) {
      "use strict";
      module.exports = function() {
      };
    }
  });

  // node_modules/es5-ext/object/is-value.js
  var require_is_value = __commonJS({
    "node_modules/es5-ext/object/is-value.js"(exports, module) {
      "use strict";
      var _undefined = require_noop()();
      module.exports = function(val) {
        return val !== _undefined && val !== null;
      };
    }
  });

  // node_modules/es5-ext/object/set-prototype-of/is-implemented.js
  var require_is_implemented2 = __commonJS({
    "node_modules/es5-ext/object/set-prototype-of/is-implemented.js"(exports, module) {
      "use strict";
      var create = Object.create;
      var getPrototypeOf = Object.getPrototypeOf;
      var plainObject = {};
      module.exports = function() {
        var setPrototypeOf = Object.setPrototypeOf, customCreate = arguments[0] || create;
        if (typeof setPrototypeOf !== "function")
          return false;
        return getPrototypeOf(setPrototypeOf(customCreate(null), plainObject)) === plainObject;
      };
    }
  });

  // node_modules/es5-ext/object/is-object.js
  var require_is_object = __commonJS({
    "node_modules/es5-ext/object/is-object.js"(exports, module) {
      "use strict";
      var isValue = require_is_value();
      var map = { function: true, object: true };
      module.exports = function(value) {
        return isValue(value) && map[typeof value] || false;
      };
    }
  });

  // node_modules/es5-ext/object/valid-value.js
  var require_valid_value = __commonJS({
    "node_modules/es5-ext/object/valid-value.js"(exports, module) {
      "use strict";
      var isValue = require_is_value();
      module.exports = function(value) {
        if (!isValue(value))
          throw new TypeError("Cannot use null or undefined");
        return value;
      };
    }
  });

  // node_modules/es5-ext/object/create.js
  var require_create = __commonJS({
    "node_modules/es5-ext/object/create.js"(exports, module) {
      "use strict";
      var create = Object.create;
      var shim;
      if (!require_is_implemented2()()) {
        shim = require_shim();
      }
      module.exports = function() {
        var nullObject, polyProps, desc;
        if (!shim)
          return create;
        if (shim.level !== 1)
          return create;
        nullObject = {};
        polyProps = {};
        desc = { configurable: false, enumerable: false, writable: true, value: void 0 };
        Object.getOwnPropertyNames(Object.prototype).forEach(function(name) {
          if (name === "__proto__") {
            polyProps[name] = {
              configurable: true,
              enumerable: false,
              writable: true,
              value: void 0
            };
            return;
          }
          polyProps[name] = desc;
        });
        Object.defineProperties(nullObject, polyProps);
        Object.defineProperty(shim, "nullPolyfill", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: nullObject
        });
        return function(prototype, props) {
          return create(prototype === null ? nullObject : prototype, props);
        };
      }();
    }
  });

  // node_modules/es5-ext/object/set-prototype-of/shim.js
  var require_shim = __commonJS({
    "node_modules/es5-ext/object/set-prototype-of/shim.js"(exports, module) {
      "use strict";
      var isObject = require_is_object();
      var value = require_valid_value();
      var objIsPrototypeOf = Object.prototype.isPrototypeOf;
      var defineProperty = Object.defineProperty;
      var nullDesc = { configurable: true, enumerable: false, writable: true, value: void 0 };
      var validate;
      validate = function(obj, prototype) {
        value(obj);
        if (prototype === null || isObject(prototype))
          return obj;
        throw new TypeError("Prototype must be null or an object");
      };
      module.exports = function(status) {
        var fn, set2;
        if (!status)
          return null;
        if (status.level === 2) {
          if (status.set) {
            set2 = status.set;
            fn = function(obj, prototype) {
              set2.call(validate(obj, prototype), prototype);
              return obj;
            };
          } else {
            fn = function(obj, prototype) {
              validate(obj, prototype).__proto__ = prototype;
              return obj;
            };
          }
        } else {
          fn = function self2(obj, prototype) {
            var isNullBase;
            validate(obj, prototype);
            isNullBase = objIsPrototypeOf.call(self2.nullPolyfill, obj);
            if (isNullBase)
              delete self2.nullPolyfill.__proto__;
            if (prototype === null)
              prototype = self2.nullPolyfill;
            obj.__proto__ = prototype;
            if (isNullBase)
              defineProperty(self2.nullPolyfill, "__proto__", nullDesc);
            return obj;
          };
        }
        return Object.defineProperty(fn, "level", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: status.level
        });
      }(
        function() {
          var tmpObj1 = /* @__PURE__ */ Object.create(null), tmpObj2 = {}, set2, desc = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__");
          if (desc) {
            try {
              set2 = desc.set;
              set2.call(tmpObj1, tmpObj2);
            } catch (ignore) {
            }
            if (Object.getPrototypeOf(tmpObj1) === tmpObj2)
              return { set: set2, level: 2 };
          }
          tmpObj1.__proto__ = tmpObj2;
          if (Object.getPrototypeOf(tmpObj1) === tmpObj2)
            return { level: 2 };
          tmpObj1 = {};
          tmpObj1.__proto__ = tmpObj2;
          if (Object.getPrototypeOf(tmpObj1) === tmpObj2)
            return { level: 1 };
          return false;
        }()
      );
      require_create();
    }
  });

  // node_modules/es5-ext/object/set-prototype-of/index.js
  var require_set_prototype_of = __commonJS({
    "node_modules/es5-ext/object/set-prototype-of/index.js"(exports, module) {
      "use strict";
      module.exports = require_is_implemented2()() ? Object.setPrototypeOf : require_shim();
    }
  });

  // node_modules/es5-ext/object/valid-object.js
  var require_valid_object = __commonJS({
    "node_modules/es5-ext/object/valid-object.js"(exports, module) {
      "use strict";
      var isObject = require_is_object();
      module.exports = function(value) {
        if (!isObject(value))
          throw new TypeError(value + " is not an Object");
        return value;
      };
    }
  });

  // node_modules/es5-ext/string/random-uniq.js
  var require_random_uniq = __commonJS({
    "node_modules/es5-ext/string/random-uniq.js"(exports, module) {
      "use strict";
      var generated = /* @__PURE__ */ Object.create(null);
      var random3 = Math.random;
      module.exports = function() {
        var str;
        do {
          str = random3().toString(36).slice(2);
        } while (generated[str]);
        return str;
      };
    }
  });

  // node_modules/type/value/is.js
  var require_is = __commonJS({
    "node_modules/type/value/is.js"(exports, module) {
      "use strict";
      var _undefined = void 0;
      module.exports = function(value) {
        return value !== _undefined && value !== null;
      };
    }
  });

  // node_modules/type/object/is.js
  var require_is2 = __commonJS({
    "node_modules/type/object/is.js"(exports, module) {
      "use strict";
      var isValue = require_is();
      var possibleTypes = {
        "object": true,
        "function": true,
        "undefined": true
        /* document.all */
      };
      module.exports = function(value) {
        if (!isValue(value))
          return false;
        return hasOwnProperty.call(possibleTypes, typeof value);
      };
    }
  });

  // node_modules/type/prototype/is.js
  var require_is3 = __commonJS({
    "node_modules/type/prototype/is.js"(exports, module) {
      "use strict";
      var isObject = require_is2();
      module.exports = function(value) {
        if (!isObject(value))
          return false;
        try {
          if (!value.constructor)
            return false;
          return value.constructor.prototype === value;
        } catch (error) {
          return false;
        }
      };
    }
  });

  // node_modules/type/function/is.js
  var require_is4 = __commonJS({
    "node_modules/type/function/is.js"(exports, module) {
      "use strict";
      var isPrototype = require_is3();
      module.exports = function(value) {
        if (typeof value !== "function")
          return false;
        if (!hasOwnProperty.call(value, "length"))
          return false;
        try {
          if (typeof value.length !== "number")
            return false;
          if (typeof value.call !== "function")
            return false;
          if (typeof value.apply !== "function")
            return false;
        } catch (error) {
          return false;
        }
        return !isPrototype(value);
      };
    }
  });

  // node_modules/type/plain-function/is.js
  var require_is5 = __commonJS({
    "node_modules/type/plain-function/is.js"(exports, module) {
      "use strict";
      var isFunction = require_is4();
      var classRe = /^\s*class[\s{/}]/;
      var functionToString = Function.prototype.toString;
      module.exports = function(value) {
        if (!isFunction(value))
          return false;
        if (classRe.test(functionToString.call(value)))
          return false;
        return true;
      };
    }
  });

  // node_modules/es5-ext/object/assign/is-implemented.js
  var require_is_implemented3 = __commonJS({
    "node_modules/es5-ext/object/assign/is-implemented.js"(exports, module) {
      "use strict";
      module.exports = function() {
        var assign = Object.assign, obj;
        if (typeof assign !== "function")
          return false;
        obj = { foo: "raz" };
        assign(obj, { bar: "dwa" }, { trzy: "trzy" });
        return obj.foo + obj.bar + obj.trzy === "razdwatrzy";
      };
    }
  });

  // node_modules/es5-ext/object/keys/is-implemented.js
  var require_is_implemented4 = __commonJS({
    "node_modules/es5-ext/object/keys/is-implemented.js"(exports, module) {
      "use strict";
      module.exports = function() {
        try {
          Object.keys("primitive");
          return true;
        } catch (e2) {
          return false;
        }
      };
    }
  });

  // node_modules/es5-ext/object/keys/shim.js
  var require_shim2 = __commonJS({
    "node_modules/es5-ext/object/keys/shim.js"(exports, module) {
      "use strict";
      var isValue = require_is_value();
      var keys = Object.keys;
      module.exports = function(object) {
        return keys(isValue(object) ? Object(object) : object);
      };
    }
  });

  // node_modules/es5-ext/object/keys/index.js
  var require_keys = __commonJS({
    "node_modules/es5-ext/object/keys/index.js"(exports, module) {
      "use strict";
      module.exports = require_is_implemented4()() ? Object.keys : require_shim2();
    }
  });

  // node_modules/es5-ext/object/assign/shim.js
  var require_shim3 = __commonJS({
    "node_modules/es5-ext/object/assign/shim.js"(exports, module) {
      "use strict";
      var keys = require_keys();
      var value = require_valid_value();
      var max = Math.max;
      module.exports = function(dest, src) {
        var error, i2, length = max(arguments.length, 2), assign;
        dest = Object(value(dest));
        assign = function(key) {
          try {
            dest[key] = src[key];
          } catch (e2) {
            if (!error)
              error = e2;
          }
        };
        for (i2 = 1; i2 < length; ++i2) {
          src = arguments[i2];
          keys(src).forEach(assign);
        }
        if (error !== void 0)
          throw error;
        return dest;
      };
    }
  });

  // node_modules/es5-ext/object/assign/index.js
  var require_assign = __commonJS({
    "node_modules/es5-ext/object/assign/index.js"(exports, module) {
      "use strict";
      module.exports = require_is_implemented3()() ? Object.assign : require_shim3();
    }
  });

  // node_modules/es5-ext/object/normalize-options.js
  var require_normalize_options = __commonJS({
    "node_modules/es5-ext/object/normalize-options.js"(exports, module) {
      "use strict";
      var isValue = require_is_value();
      var forEach = Array.prototype.forEach;
      var create = Object.create;
      var process2 = function(src, obj) {
        var key;
        for (key in src)
          obj[key] = src[key];
      };
      module.exports = function(opts1) {
        var result = create(null);
        forEach.call(arguments, function(options) {
          if (!isValue(options))
            return;
          process2(Object(options), result);
        });
        return result;
      };
    }
  });

  // node_modules/es5-ext/string/#/contains/is-implemented.js
  var require_is_implemented5 = __commonJS({
    "node_modules/es5-ext/string/#/contains/is-implemented.js"(exports, module) {
      "use strict";
      var str = "razdwatrzy";
      module.exports = function() {
        if (typeof str.contains !== "function")
          return false;
        return str.contains("dwa") === true && str.contains("foo") === false;
      };
    }
  });

  // node_modules/es5-ext/string/#/contains/shim.js
  var require_shim4 = __commonJS({
    "node_modules/es5-ext/string/#/contains/shim.js"(exports, module) {
      "use strict";
      var indexOf = String.prototype.indexOf;
      module.exports = function(searchString) {
        return indexOf.call(this, searchString, arguments[1]) > -1;
      };
    }
  });

  // node_modules/es5-ext/string/#/contains/index.js
  var require_contains = __commonJS({
    "node_modules/es5-ext/string/#/contains/index.js"(exports, module) {
      "use strict";
      module.exports = require_is_implemented5()() ? String.prototype.contains : require_shim4();
    }
  });

  // node_modules/d/index.js
  var require_d = __commonJS({
    "node_modules/d/index.js"(exports, module) {
      "use strict";
      var isValue = require_is();
      var isPlainFunction = require_is5();
      var assign = require_assign();
      var normalizeOpts = require_normalize_options();
      var contains = require_contains();
      var d2 = module.exports = function(dscr, value) {
        var c2, e2, w3, options, desc;
        if (arguments.length < 2 || typeof dscr !== "string") {
          options = value;
          value = dscr;
          dscr = null;
        } else {
          options = arguments[2];
        }
        if (isValue(dscr)) {
          c2 = contains.call(dscr, "c");
          e2 = contains.call(dscr, "e");
          w3 = contains.call(dscr, "w");
        } else {
          c2 = w3 = true;
          e2 = false;
        }
        desc = { value, configurable: c2, enumerable: e2, writable: w3 };
        return !options ? desc : assign(normalizeOpts(options), desc);
      };
      d2.gs = function(dscr, get2, set2) {
        var c2, e2, options, desc;
        if (typeof dscr !== "string") {
          options = set2;
          set2 = get2;
          get2 = dscr;
          dscr = null;
        } else {
          options = arguments[3];
        }
        if (!isValue(get2)) {
          get2 = void 0;
        } else if (!isPlainFunction(get2)) {
          options = get2;
          get2 = set2 = void 0;
        } else if (!isValue(set2)) {
          set2 = void 0;
        } else if (!isPlainFunction(set2)) {
          options = set2;
          set2 = void 0;
        }
        if (isValue(dscr)) {
          c2 = contains.call(dscr, "c");
          e2 = contains.call(dscr, "e");
        } else {
          c2 = true;
          e2 = false;
        }
        desc = { get: get2, set: set2, configurable: c2, enumerable: e2 };
        return !options ? desc : assign(normalizeOpts(options), desc);
      };
    }
  });

  // node_modules/es5-ext/function/is-arguments.js
  var require_is_arguments = __commonJS({
    "node_modules/es5-ext/function/is-arguments.js"(exports, module) {
      "use strict";
      var objToString = Object.prototype.toString;
      var id = objToString.call(/* @__PURE__ */ function() {
        return arguments;
      }());
      module.exports = function(value) {
        return objToString.call(value) === id;
      };
    }
  });

  // node_modules/es5-ext/string/is-string.js
  var require_is_string = __commonJS({
    "node_modules/es5-ext/string/is-string.js"(exports, module) {
      "use strict";
      var objToString = Object.prototype.toString;
      var id = objToString.call("");
      module.exports = function(value) {
        return typeof value === "string" || value && typeof value === "object" && (value instanceof String || objToString.call(value) === id) || false;
      };
    }
  });

  // node_modules/ext/global-this/is-implemented.js
  var require_is_implemented6 = __commonJS({
    "node_modules/ext/global-this/is-implemented.js"(exports, module) {
      "use strict";
      module.exports = function() {
        if (typeof globalThis !== "object")
          return false;
        if (!globalThis)
          return false;
        return globalThis.Array === Array;
      };
    }
  });

  // node_modules/ext/global-this/implementation.js
  var require_implementation = __commonJS({
    "node_modules/ext/global-this/implementation.js"(exports, module) {
      var naiveFallback = function() {
        if (typeof self === "object" && self)
          return self;
        if (typeof window === "object" && window)
          return window;
        throw new Error("Unable to resolve global `this`");
      };
      module.exports = function() {
        if (this)
          return this;
        try {
          Object.defineProperty(Object.prototype, "__global__", {
            get: function() {
              return this;
            },
            configurable: true
          });
        } catch (error) {
          return naiveFallback();
        }
        try {
          if (!__global__)
            return naiveFallback();
          return __global__;
        } finally {
          delete Object.prototype.__global__;
        }
      }();
    }
  });

  // node_modules/ext/global-this/index.js
  var require_global_this = __commonJS({
    "node_modules/ext/global-this/index.js"(exports, module) {
      "use strict";
      module.exports = require_is_implemented6()() ? globalThis : require_implementation();
    }
  });

  // node_modules/es6-symbol/is-implemented.js
  var require_is_implemented7 = __commonJS({
    "node_modules/es6-symbol/is-implemented.js"(exports, module) {
      "use strict";
      var global2 = require_global_this();
      var validTypes = { object: true, symbol: true };
      module.exports = function() {
        var Symbol2 = global2.Symbol;
        var symbol;
        if (typeof Symbol2 !== "function")
          return false;
        symbol = Symbol2("test symbol");
        try {
          String(symbol);
        } catch (e2) {
          return false;
        }
        if (!validTypes[typeof Symbol2.iterator])
          return false;
        if (!validTypes[typeof Symbol2.toPrimitive])
          return false;
        if (!validTypes[typeof Symbol2.toStringTag])
          return false;
        return true;
      };
    }
  });

  // node_modules/es6-symbol/is-symbol.js
  var require_is_symbol = __commonJS({
    "node_modules/es6-symbol/is-symbol.js"(exports, module) {
      "use strict";
      module.exports = function(value) {
        if (!value)
          return false;
        if (typeof value === "symbol")
          return true;
        if (!value.constructor)
          return false;
        if (value.constructor.name !== "Symbol")
          return false;
        return value[value.constructor.toStringTag] === "Symbol";
      };
    }
  });

  // node_modules/es6-symbol/validate-symbol.js
  var require_validate_symbol = __commonJS({
    "node_modules/es6-symbol/validate-symbol.js"(exports, module) {
      "use strict";
      var isSymbol = require_is_symbol();
      module.exports = function(value) {
        if (!isSymbol(value))
          throw new TypeError(value + " is not a symbol");
        return value;
      };
    }
  });

  // node_modules/es6-symbol/lib/private/generate-name.js
  var require_generate_name = __commonJS({
    "node_modules/es6-symbol/lib/private/generate-name.js"(exports, module) {
      "use strict";
      var d2 = require_d();
      var create = Object.create;
      var defineProperty = Object.defineProperty;
      var objPrototype = Object.prototype;
      var created = create(null);
      module.exports = function(desc) {
        var postfix = 0, name, ie11BugWorkaround;
        while (created[desc + (postfix || "")])
          ++postfix;
        desc += postfix || "";
        created[desc] = true;
        name = "@@" + desc;
        defineProperty(
          objPrototype,
          name,
          d2.gs(null, function(value) {
            if (ie11BugWorkaround)
              return;
            ie11BugWorkaround = true;
            defineProperty(this, name, d2(value));
            ie11BugWorkaround = false;
          })
        );
        return name;
      };
    }
  });

  // node_modules/es6-symbol/lib/private/setup/standard-symbols.js
  var require_standard_symbols = __commonJS({
    "node_modules/es6-symbol/lib/private/setup/standard-symbols.js"(exports, module) {
      "use strict";
      var d2 = require_d();
      var NativeSymbol = require_global_this().Symbol;
      module.exports = function(SymbolPolyfill) {
        return Object.defineProperties(SymbolPolyfill, {
          // To ensure proper interoperability with other native functions (e.g. Array.from)
          // fallback to eventual native implementation of given symbol
          hasInstance: d2(
            "",
            NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")
          ),
          isConcatSpreadable: d2(
            "",
            NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")
          ),
          iterator: d2("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
          match: d2("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
          replace: d2("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
          search: d2("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
          species: d2("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
          split: d2("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
          toPrimitive: d2(
            "",
            NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")
          ),
          toStringTag: d2(
            "",
            NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")
          ),
          unscopables: d2(
            "",
            NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables")
          )
        });
      };
    }
  });

  // node_modules/es6-symbol/lib/private/setup/symbol-registry.js
  var require_symbol_registry = __commonJS({
    "node_modules/es6-symbol/lib/private/setup/symbol-registry.js"(exports, module) {
      "use strict";
      var d2 = require_d();
      var validateSymbol = require_validate_symbol();
      var registry = /* @__PURE__ */ Object.create(null);
      module.exports = function(SymbolPolyfill) {
        return Object.defineProperties(SymbolPolyfill, {
          for: d2(function(key) {
            if (registry[key])
              return registry[key];
            return registry[key] = SymbolPolyfill(String(key));
          }),
          keyFor: d2(function(symbol) {
            var key;
            validateSymbol(symbol);
            for (key in registry) {
              if (registry[key] === symbol)
                return key;
            }
            return void 0;
          })
        });
      };
    }
  });

  // node_modules/es6-symbol/polyfill.js
  var require_polyfill = __commonJS({
    "node_modules/es6-symbol/polyfill.js"(exports, module) {
      "use strict";
      var d2 = require_d();
      var validateSymbol = require_validate_symbol();
      var NativeSymbol = require_global_this().Symbol;
      var generateName = require_generate_name();
      var setupStandardSymbols = require_standard_symbols();
      var setupSymbolRegistry = require_symbol_registry();
      var create = Object.create;
      var defineProperties = Object.defineProperties;
      var defineProperty = Object.defineProperty;
      var SymbolPolyfill;
      var HiddenSymbol;
      var isNativeSafe;
      if (typeof NativeSymbol === "function") {
        try {
          String(NativeSymbol());
          isNativeSafe = true;
        } catch (ignore) {
        }
      } else {
        NativeSymbol = null;
      }
      HiddenSymbol = function Symbol2(description) {
        if (this instanceof HiddenSymbol)
          throw new TypeError("Symbol is not a constructor");
        return SymbolPolyfill(description);
      };
      module.exports = SymbolPolyfill = function Symbol2(description) {
        var symbol;
        if (this instanceof Symbol2)
          throw new TypeError("Symbol is not a constructor");
        if (isNativeSafe)
          return NativeSymbol(description);
        symbol = create(HiddenSymbol.prototype);
        description = description === void 0 ? "" : String(description);
        return defineProperties(symbol, {
          __description__: d2("", description),
          __name__: d2("", generateName(description))
        });
      };
      setupStandardSymbols(SymbolPolyfill);
      setupSymbolRegistry(SymbolPolyfill);
      defineProperties(HiddenSymbol.prototype, {
        constructor: d2(SymbolPolyfill),
        toString: d2("", function() {
          return this.__name__;
        })
      });
      defineProperties(SymbolPolyfill.prototype, {
        toString: d2(function() {
          return "Symbol (" + validateSymbol(this).__description__ + ")";
        }),
        valueOf: d2(function() {
          return validateSymbol(this);
        })
      });
      defineProperty(
        SymbolPolyfill.prototype,
        SymbolPolyfill.toPrimitive,
        d2("", function() {
          var symbol = validateSymbol(this);
          if (typeof symbol === "symbol")
            return symbol;
          return symbol.toString();
        })
      );
      defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d2("c", "Symbol"));
      defineProperty(
        HiddenSymbol.prototype,
        SymbolPolyfill.toStringTag,
        d2("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])
      );
      defineProperty(
        HiddenSymbol.prototype,
        SymbolPolyfill.toPrimitive,
        d2("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive])
      );
    }
  });

  // node_modules/es6-symbol/index.js
  var require_es6_symbol = __commonJS({
    "node_modules/es6-symbol/index.js"(exports, module) {
      "use strict";
      module.exports = require_is_implemented7()() ? require_global_this().Symbol : require_polyfill();
    }
  });

  // node_modules/es5-ext/array/#/clear.js
  var require_clear = __commonJS({
    "node_modules/es5-ext/array/#/clear.js"(exports, module) {
      "use strict";
      var value = require_valid_value();
      module.exports = function() {
        value(this).length = 0;
        return this;
      };
    }
  });

  // node_modules/es5-ext/object/valid-callable.js
  var require_valid_callable = __commonJS({
    "node_modules/es5-ext/object/valid-callable.js"(exports, module) {
      "use strict";
      module.exports = function(fn) {
        if (typeof fn !== "function")
          throw new TypeError(fn + " is not a function");
        return fn;
      };
    }
  });

  // node_modules/type/string/coerce.js
  var require_coerce = __commonJS({
    "node_modules/type/string/coerce.js"(exports, module) {
      "use strict";
      var isValue = require_is();
      var isObject = require_is2();
      var objectToString = Object.prototype.toString;
      module.exports = function(value) {
        if (!isValue(value))
          return null;
        if (isObject(value)) {
          var valueToString = value.toString;
          if (typeof valueToString !== "function")
            return null;
          if (valueToString === objectToString)
            return null;
        }
        try {
          return "" + value;
        } catch (error) {
          return null;
        }
      };
    }
  });

  // node_modules/type/lib/safe-to-string.js
  var require_safe_to_string = __commonJS({
    "node_modules/type/lib/safe-to-string.js"(exports, module) {
      "use strict";
      module.exports = function(value) {
        try {
          return value.toString();
        } catch (error) {
          try {
            return String(value);
          } catch (error2) {
            return null;
          }
        }
      };
    }
  });

  // node_modules/type/lib/to-short-string.js
  var require_to_short_string = __commonJS({
    "node_modules/type/lib/to-short-string.js"(exports, module) {
      "use strict";
      var safeToString = require_safe_to_string();
      var reNewLine = /[\n\r\u2028\u2029]/g;
      module.exports = function(value) {
        var string = safeToString(value);
        if (string === null)
          return "<Non-coercible to string value>";
        if (string.length > 100)
          string = string.slice(0, 99) + "\u2026";
        string = string.replace(reNewLine, function(char) {
          switch (char) {
            case "\n":
              return "\\n";
            case "\r":
              return "\\r";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("Unexpected character");
          }
        });
        return string;
      };
    }
  });

  // node_modules/type/lib/resolve-exception.js
  var require_resolve_exception = __commonJS({
    "node_modules/type/lib/resolve-exception.js"(exports, module) {
      "use strict";
      var isValue = require_is();
      var isObject = require_is2();
      var stringCoerce = require_coerce();
      var toShortString = require_to_short_string();
      var resolveMessage = function(message, value) {
        return message.replace("%v", toShortString(value));
      };
      module.exports = function(value, defaultMessage, inputOptions) {
        if (!isObject(inputOptions))
          throw new TypeError(resolveMessage(defaultMessage, value));
        if (!isValue(value)) {
          if ("default" in inputOptions)
            return inputOptions["default"];
          if (inputOptions.isOptional)
            return null;
        }
        var errorMessage = stringCoerce(inputOptions.errorMessage);
        if (!isValue(errorMessage))
          errorMessage = defaultMessage;
        throw new TypeError(resolveMessage(errorMessage, value));
      };
    }
  });

  // node_modules/type/value/ensure.js
  var require_ensure = __commonJS({
    "node_modules/type/value/ensure.js"(exports, module) {
      "use strict";
      var resolveException = require_resolve_exception();
      var is = require_is();
      module.exports = function(value) {
        if (is(value))
          return value;
        return resolveException(value, "Cannot use %v", arguments[1]);
      };
    }
  });

  // node_modules/type/plain-function/ensure.js
  var require_ensure2 = __commonJS({
    "node_modules/type/plain-function/ensure.js"(exports, module) {
      "use strict";
      var resolveException = require_resolve_exception();
      var is = require_is5();
      module.exports = function(value) {
        if (is(value))
          return value;
        return resolveException(value, "%v is not a plain function", arguments[1]);
      };
    }
  });

  // node_modules/es5-ext/array/from/is-implemented.js
  var require_is_implemented8 = __commonJS({
    "node_modules/es5-ext/array/from/is-implemented.js"(exports, module) {
      "use strict";
      module.exports = function() {
        var from = Array.from, arr, result;
        if (typeof from !== "function")
          return false;
        arr = ["raz", "dwa"];
        result = from(arr);
        return Boolean(result && result !== arr && result[1] === "dwa");
      };
    }
  });

  // node_modules/es5-ext/function/is-function.js
  var require_is_function = __commonJS({
    "node_modules/es5-ext/function/is-function.js"(exports, module) {
      "use strict";
      var objToString = Object.prototype.toString;
      var isFunctionStringTag = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);
      module.exports = function(value) {
        return typeof value === "function" && isFunctionStringTag(objToString.call(value));
      };
    }
  });

  // node_modules/es5-ext/math/sign/is-implemented.js
  var require_is_implemented9 = __commonJS({
    "node_modules/es5-ext/math/sign/is-implemented.js"(exports, module) {
      "use strict";
      module.exports = function() {
        var sign = Math.sign;
        if (typeof sign !== "function")
          return false;
        return sign(10) === 1 && sign(-20) === -1;
      };
    }
  });

  // node_modules/es5-ext/math/sign/shim.js
  var require_shim5 = __commonJS({
    "node_modules/es5-ext/math/sign/shim.js"(exports, module) {
      "use strict";
      module.exports = function(value) {
        value = Number(value);
        if (isNaN(value) || value === 0)
          return value;
        return value > 0 ? 1 : -1;
      };
    }
  });

  // node_modules/es5-ext/math/sign/index.js
  var require_sign = __commonJS({
    "node_modules/es5-ext/math/sign/index.js"(exports, module) {
      "use strict";
      module.exports = require_is_implemented9()() ? Math.sign : require_shim5();
    }
  });

  // node_modules/es5-ext/number/to-integer.js
  var require_to_integer = __commonJS({
    "node_modules/es5-ext/number/to-integer.js"(exports, module) {
      "use strict";
      var sign = require_sign();
      var abs = Math.abs;
      var floor = Math.floor;
      module.exports = function(value) {
        if (isNaN(value))
          return 0;
        value = Number(value);
        if (value === 0 || !isFinite(value))
          return value;
        return sign(value) * floor(abs(value));
      };
    }
  });

  // node_modules/es5-ext/number/to-pos-integer.js
  var require_to_pos_integer = __commonJS({
    "node_modules/es5-ext/number/to-pos-integer.js"(exports, module) {
      "use strict";
      var toInteger = require_to_integer();
      var max = Math.max;
      module.exports = function(value) {
        return max(0, toInteger(value));
      };
    }
  });

  // node_modules/es5-ext/array/from/shim.js
  var require_shim6 = __commonJS({
    "node_modules/es5-ext/array/from/shim.js"(exports, module) {
      "use strict";
      var iteratorSymbol = require_es6_symbol().iterator;
      var isArguments = require_is_arguments();
      var isFunction = require_is_function();
      var toPosInt = require_to_pos_integer();
      var callable = require_valid_callable();
      var validValue = require_valid_value();
      var isValue = require_is_value();
      var isString = require_is_string();
      var isArray = Array.isArray;
      var call = Function.prototype.call;
      var desc = { configurable: true, enumerable: true, writable: true, value: null };
      var defineProperty = Object.defineProperty;
      module.exports = function(arrayLike) {
        var mapFn = arguments[1], thisArg = arguments[2], Context, i2, j2, arr, length, code, iterator, result, getIterator, value;
        arrayLike = Object(validValue(arrayLike));
        if (isValue(mapFn))
          callable(mapFn);
        if (!this || this === Array || !isFunction(this)) {
          if (!mapFn) {
            if (isArguments(arrayLike)) {
              length = arrayLike.length;
              if (length !== 1)
                return Array.apply(null, arrayLike);
              arr = new Array(1);
              arr[0] = arrayLike[0];
              return arr;
            }
            if (isArray(arrayLike)) {
              arr = new Array(length = arrayLike.length);
              for (i2 = 0; i2 < length; ++i2)
                arr[i2] = arrayLike[i2];
              return arr;
            }
          }
          arr = [];
        } else {
          Context = this;
        }
        if (!isArray(arrayLike)) {
          if ((getIterator = arrayLike[iteratorSymbol]) !== void 0) {
            iterator = callable(getIterator).call(arrayLike);
            if (Context)
              arr = new Context();
            result = iterator.next();
            i2 = 0;
            while (!result.done) {
              value = mapFn ? call.call(mapFn, thisArg, result.value, i2) : result.value;
              if (Context) {
                desc.value = value;
                defineProperty(arr, i2, desc);
              } else {
                arr[i2] = value;
              }
              result = iterator.next();
              ++i2;
            }
            length = i2;
          } else if (isString(arrayLike)) {
            length = arrayLike.length;
            if (Context)
              arr = new Context();
            for (i2 = 0, j2 = 0; i2 < length; ++i2) {
              value = arrayLike[i2];
              if (i2 + 1 < length) {
                code = value.charCodeAt(0);
                if (code >= 55296 && code <= 56319)
                  value += arrayLike[++i2];
              }
              value = mapFn ? call.call(mapFn, thisArg, value, j2) : value;
              if (Context) {
                desc.value = value;
                defineProperty(arr, j2, desc);
              } else {
                arr[j2] = value;
              }
              ++j2;
            }
            length = j2;
          }
        }
        if (length === void 0) {
          length = toPosInt(arrayLike.length);
          if (Context)
            arr = new Context(length);
          for (i2 = 0; i2 < length; ++i2) {
            value = mapFn ? call.call(mapFn, thisArg, arrayLike[i2], i2) : arrayLike[i2];
            if (Context) {
              desc.value = value;
              defineProperty(arr, i2, desc);
            } else {
              arr[i2] = value;
            }
          }
        }
        if (Context) {
          desc.value = null;
          arr.length = length;
        }
        return arr;
      };
    }
  });

  // node_modules/es5-ext/array/from/index.js
  var require_from = __commonJS({
    "node_modules/es5-ext/array/from/index.js"(exports, module) {
      "use strict";
      module.exports = require_is_implemented8()() ? Array.from : require_shim6();
    }
  });

  // node_modules/es5-ext/object/copy.js
  var require_copy = __commonJS({
    "node_modules/es5-ext/object/copy.js"(exports, module) {
      "use strict";
      var aFrom = require_from();
      var assign = require_assign();
      var value = require_valid_value();
      module.exports = function(obj) {
        var copy = Object(value(obj)), propertyNames = arguments[1], options = Object(arguments[2]);
        if (copy !== obj && !propertyNames)
          return copy;
        var result = {};
        if (propertyNames) {
          aFrom(propertyNames, function(propertyName) {
            if (options.ensure || propertyName in obj)
              result[propertyName] = obj[propertyName];
          });
        } else {
          assign(result, obj);
        }
        return result;
      };
    }
  });

  // node_modules/es5-ext/object/_iterate.js
  var require_iterate = __commonJS({
    "node_modules/es5-ext/object/_iterate.js"(exports, module) {
      "use strict";
      var callable = require_valid_callable();
      var value = require_valid_value();
      var bind = Function.prototype.bind;
      var call = Function.prototype.call;
      var keys = Object.keys;
      var objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;
      module.exports = function(method2, defVal) {
        return function(obj, cb) {
          var list, thisArg = arguments[2], compareFn = arguments[3];
          obj = Object(value(obj));
          callable(cb);
          list = keys(obj);
          if (compareFn) {
            list.sort(typeof compareFn === "function" ? bind.call(compareFn, obj) : void 0);
          }
          if (typeof method2 !== "function")
            method2 = list[method2];
          return call.call(method2, list, function(key, index2) {
            if (!objPropertyIsEnumerable.call(obj, key))
              return defVal;
            return call.call(cb, thisArg, obj[key], key, obj, index2);
          });
        };
      };
    }
  });

  // node_modules/es5-ext/object/for-each.js
  var require_for_each = __commonJS({
    "node_modules/es5-ext/object/for-each.js"(exports, module) {
      "use strict";
      module.exports = require_iterate()("forEach");
    }
  });

  // node_modules/es5-ext/object/map.js
  var require_map = __commonJS({
    "node_modules/es5-ext/object/map.js"(exports, module) {
      "use strict";
      var callable = require_valid_callable();
      var forEach = require_for_each();
      var call = Function.prototype.call;
      module.exports = function(obj, cb) {
        var result = {}, thisArg = arguments[2];
        callable(cb);
        forEach(obj, function(value, key, targetObj, index2) {
          result[key] = call.call(cb, thisArg, value, key, targetObj, index2);
        });
        return result;
      };
    }
  });

  // node_modules/d/auto-bind.js
  var require_auto_bind = __commonJS({
    "node_modules/d/auto-bind.js"(exports, module) {
      "use strict";
      var isValue = require_is();
      var ensureValue = require_ensure();
      var ensurePlainFunction = require_ensure2();
      var copy = require_copy();
      var normalizeOptions = require_normalize_options();
      var map = require_map();
      var bind = Function.prototype.bind;
      var defineProperty = Object.defineProperty;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var define2;
      define2 = function(name, desc, options) {
        var value = ensureValue(desc) && ensurePlainFunction(desc.value), dgs;
        dgs = copy(desc);
        delete dgs.writable;
        delete dgs.value;
        dgs.get = function() {
          if (!options.overwriteDefinition && hasOwnProperty2.call(this, name))
            return value;
          desc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);
          defineProperty(this, name, desc);
          return this[name];
        };
        return dgs;
      };
      module.exports = function(props) {
        var options = normalizeOptions(arguments[1]);
        if (isValue(options.resolveContext))
          ensurePlainFunction(options.resolveContext);
        return map(props, function(desc, name) {
          return define2(name, desc, options);
        });
      };
    }
  });

  // node_modules/es6-iterator/index.js
  var require_es6_iterator = __commonJS({
    "node_modules/es6-iterator/index.js"(exports, module) {
      "use strict";
      var clear = require_clear();
      var assign = require_assign();
      var callable = require_valid_callable();
      var value = require_valid_value();
      var d2 = require_d();
      var autoBind = require_auto_bind();
      var Symbol2 = require_es6_symbol();
      var defineProperty = Object.defineProperty;
      var defineProperties = Object.defineProperties;
      var Iterator;
      module.exports = Iterator = function(list, context) {
        if (!(this instanceof Iterator))
          throw new TypeError("Constructor requires 'new'");
        defineProperties(this, {
          __list__: d2("w", value(list)),
          __context__: d2("w", context),
          __nextIndex__: d2("w", 0)
        });
        if (!context)
          return;
        callable(context.on);
        context.on("_add", this._onAdd);
        context.on("_delete", this._onDelete);
        context.on("_clear", this._onClear);
      };
      delete Iterator.prototype.constructor;
      defineProperties(
        Iterator.prototype,
        assign(
          {
            _next: d2(function() {
              var i2;
              if (!this.__list__)
                return void 0;
              if (this.__redo__) {
                i2 = this.__redo__.shift();
                if (i2 !== void 0)
                  return i2;
              }
              if (this.__nextIndex__ < this.__list__.length)
                return this.__nextIndex__++;
              this._unBind();
              return void 0;
            }),
            next: d2(function() {
              return this._createResult(this._next());
            }),
            _createResult: d2(function(i2) {
              if (i2 === void 0)
                return { done: true, value: void 0 };
              return { done: false, value: this._resolve(i2) };
            }),
            _resolve: d2(function(i2) {
              return this.__list__[i2];
            }),
            _unBind: d2(function() {
              this.__list__ = null;
              delete this.__redo__;
              if (!this.__context__)
                return;
              this.__context__.off("_add", this._onAdd);
              this.__context__.off("_delete", this._onDelete);
              this.__context__.off("_clear", this._onClear);
              this.__context__ = null;
            }),
            toString: d2(function() {
              return "[object " + (this[Symbol2.toStringTag] || "Object") + "]";
            })
          },
          autoBind({
            _onAdd: d2(function(index2) {
              if (index2 >= this.__nextIndex__)
                return;
              ++this.__nextIndex__;
              if (!this.__redo__) {
                defineProperty(this, "__redo__", d2("c", [index2]));
                return;
              }
              this.__redo__.forEach(function(redo, i2) {
                if (redo >= index2)
                  this.__redo__[i2] = ++redo;
              }, this);
              this.__redo__.push(index2);
            }),
            _onDelete: d2(function(index2) {
              var i2;
              if (index2 >= this.__nextIndex__)
                return;
              --this.__nextIndex__;
              if (!this.__redo__)
                return;
              i2 = this.__redo__.indexOf(index2);
              if (i2 !== -1)
                this.__redo__.splice(i2, 1);
              this.__redo__.forEach(function(redo, j2) {
                if (redo > index2)
                  this.__redo__[j2] = --redo;
              }, this);
            }),
            _onClear: d2(function() {
              if (this.__redo__)
                clear.call(this.__redo__);
              this.__nextIndex__ = 0;
            })
          })
        )
      );
      defineProperty(
        Iterator.prototype,
        Symbol2.iterator,
        d2(function() {
          return this;
        })
      );
    }
  });

  // node_modules/es6-iterator/array.js
  var require_array = __commonJS({
    "node_modules/es6-iterator/array.js"(exports, module) {
      "use strict";
      var setPrototypeOf = require_set_prototype_of();
      var contains = require_contains();
      var d2 = require_d();
      var Symbol2 = require_es6_symbol();
      var Iterator = require_es6_iterator();
      var defineProperty = Object.defineProperty;
      var ArrayIterator;
      ArrayIterator = module.exports = function(arr, kind) {
        if (!(this instanceof ArrayIterator))
          throw new TypeError("Constructor requires 'new'");
        Iterator.call(this, arr);
        if (!kind)
          kind = "value";
        else if (contains.call(kind, "key+value"))
          kind = "key+value";
        else if (contains.call(kind, "key"))
          kind = "key";
        else
          kind = "value";
        defineProperty(this, "__kind__", d2("", kind));
      };
      if (setPrototypeOf)
        setPrototypeOf(ArrayIterator, Iterator);
      delete ArrayIterator.prototype.constructor;
      ArrayIterator.prototype = Object.create(Iterator.prototype, {
        _resolve: d2(function(i2) {
          if (this.__kind__ === "value")
            return this.__list__[i2];
          if (this.__kind__ === "key+value")
            return [i2, this.__list__[i2]];
          return i2;
        })
      });
      defineProperty(ArrayIterator.prototype, Symbol2.toStringTag, d2("c", "Array Iterator"));
    }
  });

  // node_modules/es6-iterator/string.js
  var require_string = __commonJS({
    "node_modules/es6-iterator/string.js"(exports, module) {
      "use strict";
      var setPrototypeOf = require_set_prototype_of();
      var d2 = require_d();
      var Symbol2 = require_es6_symbol();
      var Iterator = require_es6_iterator();
      var defineProperty = Object.defineProperty;
      var StringIterator;
      StringIterator = module.exports = function(str) {
        if (!(this instanceof StringIterator))
          throw new TypeError("Constructor requires 'new'");
        str = String(str);
        Iterator.call(this, str);
        defineProperty(this, "__length__", d2("", str.length));
      };
      if (setPrototypeOf)
        setPrototypeOf(StringIterator, Iterator);
      delete StringIterator.prototype.constructor;
      StringIterator.prototype = Object.create(Iterator.prototype, {
        _next: d2(function() {
          if (!this.__list__)
            return void 0;
          if (this.__nextIndex__ < this.__length__)
            return this.__nextIndex__++;
          this._unBind();
          return void 0;
        }),
        _resolve: d2(function(i2) {
          var char = this.__list__[i2], code;
          if (this.__nextIndex__ === this.__length__)
            return char;
          code = char.charCodeAt(0);
          if (code >= 55296 && code <= 56319)
            return char + this.__list__[this.__nextIndex__++];
          return char;
        })
      });
      defineProperty(StringIterator.prototype, Symbol2.toStringTag, d2("c", "String Iterator"));
    }
  });

  // node_modules/es6-iterator/is-iterable.js
  var require_is_iterable = __commonJS({
    "node_modules/es6-iterator/is-iterable.js"(exports, module) {
      "use strict";
      var isArguments = require_is_arguments();
      var isValue = require_is_value();
      var isString = require_is_string();
      var iteratorSymbol = require_es6_symbol().iterator;
      var isArray = Array.isArray;
      module.exports = function(value) {
        if (!isValue(value))
          return false;
        if (isArray(value))
          return true;
        if (isString(value))
          return true;
        if (isArguments(value))
          return true;
        return typeof value[iteratorSymbol] === "function";
      };
    }
  });

  // node_modules/es6-iterator/valid-iterable.js
  var require_valid_iterable = __commonJS({
    "node_modules/es6-iterator/valid-iterable.js"(exports, module) {
      "use strict";
      var isIterable = require_is_iterable();
      module.exports = function(value) {
        if (!isIterable(value))
          throw new TypeError(value + " is not iterable");
        return value;
      };
    }
  });

  // node_modules/es6-iterator/get.js
  var require_get = __commonJS({
    "node_modules/es6-iterator/get.js"(exports, module) {
      "use strict";
      var isArguments = require_is_arguments();
      var isString = require_is_string();
      var ArrayIterator = require_array();
      var StringIterator = require_string();
      var iterable = require_valid_iterable();
      var iteratorSymbol = require_es6_symbol().iterator;
      module.exports = function(obj) {
        if (typeof iterable(obj)[iteratorSymbol] === "function")
          return obj[iteratorSymbol]();
        if (isArguments(obj))
          return new ArrayIterator(obj);
        if (isString(obj))
          return new StringIterator(obj);
        return new ArrayIterator(obj);
      };
    }
  });

  // node_modules/es6-iterator/for-of.js
  var require_for_of = __commonJS({
    "node_modules/es6-iterator/for-of.js"(exports, module) {
      "use strict";
      var isArguments = require_is_arguments();
      var callable = require_valid_callable();
      var isString = require_is_string();
      var get2 = require_get();
      var isArray = Array.isArray;
      var call = Function.prototype.call;
      var some = Array.prototype.some;
      module.exports = function(iterable, cb) {
        var mode, thisArg = arguments[2], result, doBreak, broken, i2, length, char, code;
        if (isArray(iterable) || isArguments(iterable))
          mode = "array";
        else if (isString(iterable))
          mode = "string";
        else
          iterable = get2(iterable);
        callable(cb);
        doBreak = function() {
          broken = true;
        };
        if (mode === "array") {
          some.call(iterable, function(value) {
            call.call(cb, thisArg, value, doBreak);
            return broken;
          });
          return;
        }
        if (mode === "string") {
          length = iterable.length;
          for (i2 = 0; i2 < length; ++i2) {
            char = iterable[i2];
            if (i2 + 1 < length) {
              code = char.charCodeAt(0);
              if (code >= 55296 && code <= 56319)
                char += iterable[++i2];
            }
            call.call(cb, thisArg, char, doBreak);
            if (broken)
              break;
          }
          return;
        }
        result = iterable.next();
        while (!result.done) {
          call.call(cb, thisArg, result.value, doBreak);
          if (broken)
            return;
          result = iterable.next();
        }
      };
    }
  });

  // node_modules/es6-weak-map/is-native-implemented.js
  var require_is_native_implemented = __commonJS({
    "node_modules/es6-weak-map/is-native-implemented.js"(exports, module) {
      "use strict";
      module.exports = function() {
        if (typeof WeakMap !== "function")
          return false;
        return Object.prototype.toString.call(/* @__PURE__ */ new WeakMap()) === "[object WeakMap]";
      }();
    }
  });

  // node_modules/es6-weak-map/polyfill.js
  var require_polyfill2 = __commonJS({
    "node_modules/es6-weak-map/polyfill.js"(exports, module) {
      "use strict";
      var isValue = require_is_value();
      var setPrototypeOf = require_set_prototype_of();
      var object = require_valid_object();
      var ensureValue = require_valid_value();
      var randomUniq = require_random_uniq();
      var d2 = require_d();
      var getIterator = require_get();
      var forOf = require_for_of();
      var toStringTagSymbol = require_es6_symbol().toStringTag;
      var isNative = require_is_native_implemented();
      var isArray = Array.isArray;
      var defineProperty = Object.defineProperty;
      var objHasOwnProperty = Object.prototype.hasOwnProperty;
      var getPrototypeOf = Object.getPrototypeOf;
      var WeakMapPoly;
      module.exports = WeakMapPoly = function() {
        var iterable = arguments[0], self2;
        if (!(this instanceof WeakMapPoly))
          throw new TypeError("Constructor requires 'new'");
        self2 = isNative && setPrototypeOf && WeakMap !== WeakMapPoly ? setPrototypeOf(/* @__PURE__ */ new WeakMap(), getPrototypeOf(this)) : this;
        if (isValue(iterable)) {
          if (!isArray(iterable))
            iterable = getIterator(iterable);
        }
        defineProperty(self2, "__weakMapData__", d2("c", "$weakMap$" + randomUniq()));
        if (!iterable)
          return self2;
        forOf(iterable, function(val) {
          ensureValue(val);
          self2.set(val[0], val[1]);
        });
        return self2;
      };
      if (isNative) {
        if (setPrototypeOf)
          setPrototypeOf(WeakMapPoly, WeakMap);
        WeakMapPoly.prototype = Object.create(WeakMap.prototype, { constructor: d2(WeakMapPoly) });
      }
      Object.defineProperties(WeakMapPoly.prototype, {
        delete: d2(function(key) {
          if (objHasOwnProperty.call(object(key), this.__weakMapData__)) {
            delete key[this.__weakMapData__];
            return true;
          }
          return false;
        }),
        get: d2(function(key) {
          if (!objHasOwnProperty.call(object(key), this.__weakMapData__))
            return void 0;
          return key[this.__weakMapData__];
        }),
        has: d2(function(key) {
          return objHasOwnProperty.call(object(key), this.__weakMapData__);
        }),
        set: d2(function(key, value) {
          defineProperty(object(key), this.__weakMapData__, d2("c", value));
          return this;
        }),
        toString: d2(function() {
          return "[object WeakMap]";
        })
      });
      defineProperty(WeakMapPoly.prototype, toStringTagSymbol, d2("c", "WeakMap"));
    }
  });

  // node_modules/es6-weak-map/index.js
  var require_es6_weak_map = __commonJS({
    "node_modules/es6-weak-map/index.js"(exports, module) {
      "use strict";
      module.exports = require_is_implemented()() ? WeakMap : require_polyfill2();
    }
  });

  // node_modules/color-namer-sdk/lib/colors/basic.js
  var require_basic = __commonJS({
    "node_modules/color-namer-sdk/lib/colors/basic.js"(exports, module) {
      module.exports = [
        { name: "black", hex: "#000000" },
        { name: "blue", hex: "#0000FF" },
        { name: "cyan", hex: "#00FFFF" },
        { name: "green", hex: "#008000" },
        { name: "teal", hex: "#008080" },
        { name: "turquoise", hex: "#40E0D0" },
        { name: "indigo", hex: "#4B0082" },
        { name: "gray", hex: "#808080" },
        { name: "purple", hex: "#800080" },
        { name: "brown", hex: "#A52A2A" },
        { name: "tan", hex: "#D2B48C" },
        { name: "violet", hex: "#EE82EE" },
        { name: "beige", hex: "#F5F5DC" },
        { name: "fuchsia", hex: "#FF00FF" },
        { name: "gold", hex: "#FFD700" },
        { name: "magenta", hex: "#FF00FF" },
        { name: "orange", hex: "#FFA500" },
        { name: "pink", hex: "#FFC0CB" },
        { name: "red", hex: "#FF0000" },
        { name: "white", hex: "#FFFFFF" },
        { name: "yellow", hex: "#FFFF00" }
      ];
    }
  });

  // node_modules/color-namer-sdk/lib/colors/html.js
  var require_html = __commonJS({
    "node_modules/color-namer-sdk/lib/colors/html.js"(exports, module) {
      module.exports = [
        { name: "aqua", hex: "#00FFFF" },
        { name: "aliceblue", hex: "#F0F8FF" },
        { name: "antiquewhite", hex: "#FAEBD7" },
        { name: "black", hex: "#000000" },
        { name: "blue", hex: "#0000FF" },
        { name: "cyan", hex: "#00FFFF" },
        { name: "darkblue", hex: "#00008B" },
        { name: "darkcyan", hex: "#008B8B" },
        { name: "darkgreen", hex: "#006400" },
        { name: "darkturquoise", hex: "#00CED1" },
        { name: "deepskyblue", hex: "#00BFFF" },
        { name: "green", hex: "#008000" },
        { name: "lime", hex: "#00FF00" },
        { name: "mediumblue", hex: "#0000CD" },
        { name: "mediumspringgreen", hex: "#00FA9A" },
        { name: "navy", hex: "#000080" },
        { name: "springgreen", hex: "#00FF7F" },
        { name: "teal", hex: "#008080" },
        { name: "midnightblue", hex: "#191970" },
        { name: "dodgerblue", hex: "#1E90FF" },
        { name: "lightseagreen", hex: "#20B2AA" },
        { name: "forestgreen", hex: "#228B22" },
        { name: "seagreen", hex: "#2E8B57" },
        { name: "darkslategray", hex: "#2F4F4F" },
        { name: "darkslategrey", hex: "#2F4F4F" },
        { name: "limegreen", hex: "#32CD32" },
        { name: "mediumseagreen", hex: "#3CB371" },
        { name: "turquoise", hex: "#40E0D0" },
        { name: "royalblue", hex: "#4169E1" },
        { name: "steelblue", hex: "#4682B4" },
        { name: "darkslateblue", hex: "#483D8B" },
        { name: "mediumturquoise", hex: "#48D1CC" },
        { name: "indigo", hex: "#4B0082" },
        { name: "darkolivegreen", hex: "#556B2F" },
        { name: "cadetblue", hex: "#5F9EA0" },
        { name: "cornflowerblue", hex: "#6495ED" },
        { name: "mediumaquamarine", hex: "#66CDAA" },
        { name: "dimgray", hex: "#696969" },
        { name: "dimgrey", hex: "#696969" },
        { name: "slateblue", hex: "#6A5ACD" },
        { name: "olivedrab", hex: "#6B8E23" },
        { name: "slategray", hex: "#708090" },
        { name: "slategrey", hex: "#708090" },
        { name: "lightslategray", hex: "#778899" },
        { name: "lightslategrey", hex: "#778899" },
        { name: "mediumslateblue", hex: "#7B68EE" },
        { name: "lawngreen", hex: "#7CFC00" },
        { name: "aquamarine", hex: "#7FFFD4" },
        { name: "chartreuse", hex: "#7FFF00" },
        { name: "gray", hex: "#808080" },
        { name: "grey", hex: "#808080" },
        { name: "maroon", hex: "#800000" },
        { name: "olive", hex: "#808000" },
        { name: "purple", hex: "#800080" },
        { name: "lightskyblue", hex: "#87CEFA" },
        { name: "skyblue", hex: "#87CEEB" },
        { name: "blueviolet", hex: "#8A2BE2" },
        { name: "darkmagenta", hex: "#8B008B" },
        { name: "darkred", hex: "#8B0000" },
        { name: "saddlebrown", hex: "#8B4513" },
        { name: "darkseagreen", hex: "#8FBC8F" },
        { name: "lightgreen", hex: "#90EE90" },
        { name: "mediumpurple", hex: "#9370DB" },
        { name: "darkviolet", hex: "#9400D3" },
        { name: "palegreen", hex: "#98FB98" },
        { name: "darkorchid", hex: "#9932CC" },
        { name: "yellowgreen", hex: "#9ACD32" },
        { name: "sienna", hex: "#A0522D" },
        { name: "brown", hex: "#A52A2A" },
        { name: "darkgray", hex: "#A9A9A9" },
        { name: "darkgrey", hex: "#A9A9A9" },
        { name: "greenyellow", hex: "#ADFF2F" },
        { name: "lightblue", hex: "#ADD8E6" },
        { name: "paleturquoise", hex: "#AFEEEE" },
        { name: "lightsteelblue", hex: "#B0C4DE" },
        { name: "powderblue", hex: "#B0E0E6" },
        { name: "firebrick", hex: "#B22222" },
        { name: "darkgoldenrod", hex: "#B8860B" },
        { name: "mediumorchid", hex: "#BA55D3" },
        { name: "rosybrown", hex: "#BC8F8F" },
        { name: "darkkhaki", hex: "#BDB76B" },
        { name: "silver", hex: "#C0C0C0" },
        { name: "mediumvioletred", hex: "#C71585" },
        { name: "indianred", hex: "#CD5C5C" },
        { name: "peru", hex: "#CD853F" },
        { name: "chocolate", hex: "#D2691E" },
        { name: "tan", hex: "#D2B48C" },
        { name: "lightgray", hex: "#D3D3D3" },
        { name: "lightgrey", hex: "#D3D3D3" },
        { name: "thistle", hex: "#D8BFD8" },
        { name: "goldenrod", hex: "#DAA520" },
        { name: "orchid", hex: "#DA70D6" },
        { name: "palevioletred", hex: "#DB7093" },
        { name: "crimson", hex: "#DC143C" },
        { name: "gainsboro", hex: "#DCDCDC" },
        { name: "plum", hex: "#DDA0DD" },
        { name: "burlywood", hex: "#DEB887" },
        { name: "lightcyan", hex: "#E0FFFF" },
        { name: "lavender", hex: "#E6E6FA" },
        { name: "darksalmon", hex: "#E9967A" },
        { name: "palegoldenrod", hex: "#EEE8AA" },
        { name: "violet", hex: "#EE82EE" },
        { name: "azure", hex: "#F0FFFF" },
        { name: "honeydew", hex: "#F0FFF0" },
        { name: "khaki", hex: "#F0E68C" },
        { name: "lightcoral", hex: "#F08080" },
        { name: "sandybrown", hex: "#F4A460" },
        { name: "beige", hex: "#F5F5DC" },
        { name: "mintcream", hex: "#F5FFFA" },
        { name: "wheat", hex: "#F5DEB3" },
        { name: "whitesmoke", hex: "#F5F5F5" },
        { name: "ghostwhite", hex: "#F8F8FF" },
        {
          name: "lightgoldenrodyellow",
          hex: "#FAFAD2"
        },
        { name: "linen", hex: "#FAF0E6" },
        { name: "salmon", hex: "#FA8072" },
        { name: "oldlace", hex: "#FDF5E6" },
        { name: "bisque", hex: "#FFE4C4" },
        { name: "blanchedalmond", hex: "#FFEBCD" },
        { name: "coral", hex: "#FF7F50" },
        { name: "cornsilk", hex: "#FFF8DC" },
        { name: "darkorange", hex: "#FF8C00" },
        { name: "deeppink", hex: "#FF1493" },
        { name: "floralwhite", hex: "#FFFAF0" },
        { name: "fuchsia", hex: "#FF00FF" },
        { name: "gold", hex: "#FFD700" },
        { name: "hotpink", hex: "#FF69B4" },
        { name: "ivory", hex: "#FFFFF0" },
        { name: "lavenderblush", hex: "#FFF0F5" },
        { name: "lemonchiffon", hex: "#FFFACD" },
        { name: "lightpink", hex: "#FFB6C1" },
        { name: "lightsalmon", hex: "#FFA07A" },
        { name: "lightyellow", hex: "#FFFFE0" },
        { name: "magenta", hex: "#FF00FF" },
        { name: "mistyrose", hex: "#FFE4E1" },
        { name: "moccasin", hex: "#FFE4B5" },
        { name: "navajowhite", hex: "#FFDEAD" },
        { name: "orange", hex: "#FFA500" },
        { name: "orangered", hex: "#FF4500" },
        { name: "papayawhip", hex: "#FFEFD5" },
        { name: "peachpuff", hex: "#FFDAB9" },
        { name: "pink", hex: "#FFC0CB" },
        { name: "red", hex: "#FF0000" },
        { name: "seashell", hex: "#FFF5EE" },
        { name: "snow", hex: "#FFFAFA" },
        { name: "tomato", hex: "#FF6347" },
        { name: "white", hex: "#FFFFFF" },
        { name: "yellow", hex: "#FFFF00" }
      ];
    }
  });

  // node_modules/color-namer-sdk/lib/colors/ntc.js
  var require_ntc = __commonJS({
    "node_modules/color-namer-sdk/lib/colors/ntc.js"(exports, module) {
      module.exports = [
        {
          "name": "Black",
          "hex": "000000"
        },
        {
          "name": "Navy Blue",
          "hex": "000080"
        },
        {
          "name": "Dark Blue",
          "hex": "0000C8"
        },
        {
          "name": "Blue",
          "hex": "0000FF"
        },
        {
          "name": "Stratos",
          "hex": "000741"
        },
        {
          "name": "Swamp",
          "hex": "001B1C"
        },
        {
          "name": "Resolution Blue",
          "hex": "002387"
        },
        {
          "name": "Deep Fir",
          "hex": "002900"
        },
        {
          "name": "Burnham",
          "hex": "002E20"
        },
        {
          "name": "International Klein Blue",
          "hex": "002FA7"
        },
        {
          "name": "Prussian Blue",
          "hex": "003153"
        },
        {
          "name": "Midnight Blue",
          "hex": "003366"
        },
        {
          "name": "Smalt",
          "hex": "003399"
        },
        {
          "name": "Deep Teal",
          "hex": "003532"
        },
        {
          "name": "Cyprus",
          "hex": "003E40"
        },
        {
          "name": "Kaitoke Green",
          "hex": "004620"
        },
        {
          "name": "Cobalt",
          "hex": "0047AB"
        },
        {
          "name": "Crusoe",
          "hex": "004816"
        },
        {
          "name": "Sherpa Blue",
          "hex": "004950"
        },
        {
          "name": "Endeavour",
          "hex": "0056A7"
        },
        {
          "name": "Camarone",
          "hex": "00581A"
        },
        {
          "name": "Science Blue",
          "hex": "0066CC"
        },
        {
          "name": "Blue Ribbon",
          "hex": "0066FF"
        },
        {
          "name": "Tropical Rain Forest",
          "hex": "00755E"
        },
        {
          "name": "Allports",
          "hex": "0076A3"
        },
        {
          "name": "Deep Cerulean",
          "hex": "007BA7"
        },
        {
          "name": "Lochmara",
          "hex": "007EC7"
        },
        {
          "name": "Azure Radiance",
          "hex": "007FFF"
        },
        {
          "name": "Teal",
          "hex": "008080"
        },
        {
          "name": "Bondi Blue",
          "hex": "0095B6"
        },
        {
          "name": "Pacific Blue",
          "hex": "009DC4"
        },
        {
          "name": "Persian Green",
          "hex": "00A693"
        },
        {
          "name": "Jade",
          "hex": "00A86B"
        },
        {
          "name": "Caribbean Green",
          "hex": "00CC99"
        },
        {
          "name": "Robin's Egg Blue",
          "hex": "00CCCC"
        },
        {
          "name": "Green",
          "hex": "00FF00"
        },
        {
          "name": "Spring Green",
          "hex": "00FF7F"
        },
        {
          "name": "Cyan / Aqua",
          "hex": "00FFFF"
        },
        {
          "name": "Blue Charcoal",
          "hex": "010D1A"
        },
        {
          "name": "Midnight",
          "hex": "011635"
        },
        {
          "name": "Holly",
          "hex": "011D13"
        },
        {
          "name": "Daintree",
          "hex": "012731"
        },
        {
          "name": "Cardin Green",
          "hex": "01361C"
        },
        {
          "name": "County Green",
          "hex": "01371A"
        },
        {
          "name": "Astronaut Blue",
          "hex": "013E62"
        },
        {
          "name": "Regal Blue",
          "hex": "013F6A"
        },
        {
          "name": "Aqua Deep",
          "hex": "014B43"
        },
        {
          "name": "Orient",
          "hex": "015E85"
        },
        {
          "name": "Blue Stone",
          "hex": "016162"
        },
        {
          "name": "Fun Green",
          "hex": "016D39"
        },
        {
          "name": "Pine Green",
          "hex": "01796F"
        },
        {
          "name": "Blue Lagoon",
          "hex": "017987"
        },
        {
          "name": "Deep Sea",
          "hex": "01826B"
        },
        {
          "name": "Green Haze",
          "hex": "01A368"
        },
        {
          "name": "English Holly",
          "hex": "022D15"
        },
        {
          "name": "Sherwood Green",
          "hex": "02402C"
        },
        {
          "name": "Congress Blue",
          "hex": "02478E"
        },
        {
          "name": "Evening Sea",
          "hex": "024E46"
        },
        {
          "name": "Bahama Blue",
          "hex": "026395"
        },
        {
          "name": "Observatory",
          "hex": "02866F"
        },
        {
          "name": "Cerulean",
          "hex": "02A4D3"
        },
        {
          "name": "Tangaroa",
          "hex": "03163C"
        },
        {
          "name": "Green Vogue",
          "hex": "032B52"
        },
        {
          "name": "Mosque",
          "hex": "036A6E"
        },
        {
          "name": "Midnight Moss",
          "hex": "041004"
        },
        {
          "name": "Black Pearl",
          "hex": "041322"
        },
        {
          "name": "Blue Whale",
          "hex": "042E4C"
        },
        {
          "name": "Zuccini",
          "hex": "044022"
        },
        {
          "name": "Teal Blue",
          "hex": "044259"
        },
        {
          "name": "Deep Cove",
          "hex": "051040"
        },
        {
          "name": "Gulf Blue",
          "hex": "051657"
        },
        {
          "name": "Venice Blue",
          "hex": "055989"
        },
        {
          "name": "Watercourse",
          "hex": "056F57"
        },
        {
          "name": "Catalina Blue",
          "hex": "062A78"
        },
        {
          "name": "Tiber",
          "hex": "063537"
        },
        {
          "name": "Gossamer",
          "hex": "069B81"
        },
        {
          "name": "Niagara",
          "hex": "06A189"
        },
        {
          "name": "Tarawera",
          "hex": "073A50"
        },
        {
          "name": "Jaguar",
          "hex": "080110"
        },
        {
          "name": "Black Bean",
          "hex": "081910"
        },
        {
          "name": "Deep Sapphire",
          "hex": "082567"
        },
        {
          "name": "Elf Green",
          "hex": "088370"
        },
        {
          "name": "Bright Turquoise",
          "hex": "08E8DE"
        },
        {
          "name": "Downriver",
          "hex": "092256"
        },
        {
          "name": "Palm Green",
          "hex": "09230F"
        },
        {
          "name": "Madison",
          "hex": "09255D"
        },
        {
          "name": "Bottle Green",
          "hex": "093624"
        },
        {
          "name": "Deep Sea Green",
          "hex": "095859"
        },
        {
          "name": "Salem",
          "hex": "097F4B"
        },
        {
          "name": "Black Russian",
          "hex": "0A001C"
        },
        {
          "name": "Dark Fern",
          "hex": "0A480D"
        },
        {
          "name": "Japanese Laurel",
          "hex": "0A6906"
        },
        {
          "name": "Atoll",
          "hex": "0A6F75"
        },
        {
          "name": "Cod Gray",
          "hex": "0B0B0B"
        },
        {
          "name": "Marshland",
          "hex": "0B0F08"
        },
        {
          "name": "Gordons Green",
          "hex": "0B1107"
        },
        {
          "name": "Black Forest",
          "hex": "0B1304"
        },
        {
          "name": "San Felix",
          "hex": "0B6207"
        },
        {
          "name": "Malachite",
          "hex": "0BDA51"
        },
        {
          "name": "Ebony",
          "hex": "0C0B1D"
        },
        {
          "name": "Woodsmoke",
          "hex": "0C0D0F"
        },
        {
          "name": "Racing Green",
          "hex": "0C1911"
        },
        {
          "name": "Surfie Green",
          "hex": "0C7A79"
        },
        {
          "name": "Blue Chill",
          "hex": "0C8990"
        },
        {
          "name": "Black Rock",
          "hex": "0D0332"
        },
        {
          "name": "Bunker",
          "hex": "0D1117"
        },
        {
          "name": "Aztec",
          "hex": "0D1C19"
        },
        {
          "name": "Bush",
          "hex": "0D2E1C"
        },
        {
          "name": "Cinder",
          "hex": "0E0E18"
        },
        {
          "name": "Firefly",
          "hex": "0E2A30"
        },
        {
          "name": "Torea Bay",
          "hex": "0F2D9E"
        },
        {
          "name": "Vulcan",
          "hex": "10121D"
        },
        {
          "name": "Green Waterloo",
          "hex": "101405"
        },
        {
          "name": "Eden",
          "hex": "105852"
        },
        {
          "name": "Arapawa",
          "hex": "110C6C"
        },
        {
          "name": "Ultramarine",
          "hex": "120A8F"
        },
        {
          "name": "Elephant",
          "hex": "123447"
        },
        {
          "name": "Jewel",
          "hex": "126B40"
        },
        {
          "name": "Diesel",
          "hex": "130000"
        },
        {
          "name": "Asphalt",
          "hex": "130A06"
        },
        {
          "name": "Blue Zodiac",
          "hex": "13264D"
        },
        {
          "name": "Parsley",
          "hex": "134F19"
        },
        {
          "name": "Nero",
          "hex": "140600"
        },
        {
          "name": "Tory Blue",
          "hex": "1450AA"
        },
        {
          "name": "Bunting",
          "hex": "151F4C"
        },
        {
          "name": "Denim",
          "hex": "1560BD"
        },
        {
          "name": "Genoa",
          "hex": "15736B"
        },
        {
          "name": "Mirage",
          "hex": "161928"
        },
        {
          "name": "Hunter Green",
          "hex": "161D10"
        },
        {
          "name": "Big Stone",
          "hex": "162A40"
        },
        {
          "name": "Celtic",
          "hex": "163222"
        },
        {
          "name": "Timber Green",
          "hex": "16322C"
        },
        {
          "name": "Gable Green",
          "hex": "163531"
        },
        {
          "name": "Pine Tree",
          "hex": "171F04"
        },
        {
          "name": "Chathams Blue",
          "hex": "175579"
        },
        {
          "name": "Deep Forest Green",
          "hex": "182D09"
        },
        {
          "name": "Blumine",
          "hex": "18587A"
        },
        {
          "name": "Palm Leaf",
          "hex": "19330E"
        },
        {
          "name": "Nile Blue",
          "hex": "193751"
        },
        {
          "name": "Fun Blue",
          "hex": "1959A8"
        },
        {
          "name": "Lucky Point",
          "hex": "1A1A68"
        },
        {
          "name": "Mountain Meadow",
          "hex": "1AB385"
        },
        {
          "name": "Tolopea",
          "hex": "1B0245"
        },
        {
          "name": "Haiti",
          "hex": "1B1035"
        },
        {
          "name": "Deep Koamaru",
          "hex": "1B127B"
        },
        {
          "name": "Acadia",
          "hex": "1B1404"
        },
        {
          "name": "Seaweed",
          "hex": "1B2F11"
        },
        {
          "name": "Biscay",
          "hex": "1B3162"
        },
        {
          "name": "Matisse",
          "hex": "1B659D"
        },
        {
          "name": "Crowshead",
          "hex": "1C1208"
        },
        {
          "name": "Rangoon Green",
          "hex": "1C1E13"
        },
        {
          "name": "Persian Blue",
          "hex": "1C39BB"
        },
        {
          "name": "Everglade",
          "hex": "1C402E"
        },
        {
          "name": "Elm",
          "hex": "1C7C7D"
        },
        {
          "name": "Green Pea",
          "hex": "1D6142"
        },
        {
          "name": "Creole",
          "hex": "1E0F04"
        },
        {
          "name": "Karaka",
          "hex": "1E1609"
        },
        {
          "name": "El Paso",
          "hex": "1E1708"
        },
        {
          "name": "Cello",
          "hex": "1E385B"
        },
        {
          "name": "Te Papa Green",
          "hex": "1E433C"
        },
        {
          "name": "Dodger Blue",
          "hex": "1E90FF"
        },
        {
          "name": "Eastern Blue",
          "hex": "1E9AB0"
        },
        {
          "name": "Night Rider",
          "hex": "1F120F"
        },
        {
          "name": "Java",
          "hex": "1FC2C2"
        },
        {
          "name": "Jacksons Purple",
          "hex": "20208D"
        },
        {
          "name": "Cloud Burst",
          "hex": "202E54"
        },
        {
          "name": "Blue Dianne",
          "hex": "204852"
        },
        {
          "name": "Eternity",
          "hex": "211A0E"
        },
        {
          "name": "Deep Blue",
          "hex": "220878"
        },
        {
          "name": "Forest Green",
          "hex": "228B22"
        },
        {
          "name": "Mallard",
          "hex": "233418"
        },
        {
          "name": "Violet",
          "hex": "240A40"
        },
        {
          "name": "Kilamanjaro",
          "hex": "240C02"
        },
        {
          "name": "Log Cabin",
          "hex": "242A1D"
        },
        {
          "name": "Black Olive",
          "hex": "242E16"
        },
        {
          "name": "Green House",
          "hex": "24500F"
        },
        {
          "name": "Graphite",
          "hex": "251607"
        },
        {
          "name": "Cannon Black",
          "hex": "251706"
        },
        {
          "name": "Port Gore",
          "hex": "251F4F"
        },
        {
          "name": "Shark",
          "hex": "25272C"
        },
        {
          "name": "Green Kelp",
          "hex": "25311C"
        },
        {
          "name": "Curious Blue",
          "hex": "2596D1"
        },
        {
          "name": "Paua",
          "hex": "260368"
        },
        {
          "name": "Paris M",
          "hex": "26056A"
        },
        {
          "name": "Wood Bark",
          "hex": "261105"
        },
        {
          "name": "Gondola",
          "hex": "261414"
        },
        {
          "name": "Steel Gray",
          "hex": "262335"
        },
        {
          "name": "Ebony Clay",
          "hex": "26283B"
        },
        {
          "name": "Bay of Many",
          "hex": "273A81"
        },
        {
          "name": "Plantation",
          "hex": "27504B"
        },
        {
          "name": "Eucalyptus",
          "hex": "278A5B"
        },
        {
          "name": "Oil",
          "hex": "281E15"
        },
        {
          "name": "Astronaut",
          "hex": "283A77"
        },
        {
          "name": "Mariner",
          "hex": "286ACD"
        },
        {
          "name": "Violent Violet",
          "hex": "290C5E"
        },
        {
          "name": "Bastille",
          "hex": "292130"
        },
        {
          "name": "Zeus",
          "hex": "292319"
        },
        {
          "name": "Charade",
          "hex": "292937"
        },
        {
          "name": "Jelly Bean",
          "hex": "297B9A"
        },
        {
          "name": "Jungle Green",
          "hex": "29AB87"
        },
        {
          "name": "Cherry Pie",
          "hex": "2A0359"
        },
        {
          "name": "Coffee Bean",
          "hex": "2A140E"
        },
        {
          "name": "Baltic Sea",
          "hex": "2A2630"
        },
        {
          "name": "Turtle Green",
          "hex": "2A380B"
        },
        {
          "name": "Cerulean Blue",
          "hex": "2A52BE"
        },
        {
          "name": "Sepia Black",
          "hex": "2B0202"
        },
        {
          "name": "Valhalla",
          "hex": "2B194F"
        },
        {
          "name": "Heavy Metal",
          "hex": "2B3228"
        },
        {
          "name": "Blue Gem",
          "hex": "2C0E8C"
        },
        {
          "name": "Revolver",
          "hex": "2C1632"
        },
        {
          "name": "Bleached Cedar",
          "hex": "2C2133"
        },
        {
          "name": "Lochinvar",
          "hex": "2C8C84"
        },
        {
          "name": "Mikado",
          "hex": "2D2510"
        },
        {
          "name": "Outer Space",
          "hex": "2D383A"
        },
        {
          "name": "St Tropaz",
          "hex": "2D569B"
        },
        {
          "name": "Jacaranda",
          "hex": "2E0329"
        },
        {
          "name": "Jacko Bean",
          "hex": "2E1905"
        },
        {
          "name": "Rangitoto",
          "hex": "2E3222"
        },
        {
          "name": "Rhino",
          "hex": "2E3F62"
        },
        {
          "name": "Sea Green",
          "hex": "2E8B57"
        },
        {
          "name": "Scooter",
          "hex": "2EBFD4"
        },
        {
          "name": "Onion",
          "hex": "2F270E"
        },
        {
          "name": "Governor Bay",
          "hex": "2F3CB3"
        },
        {
          "name": "Sapphire",
          "hex": "2F519E"
        },
        {
          "name": "Spectra",
          "hex": "2F5A57"
        },
        {
          "name": "Casal",
          "hex": "2F6168"
        },
        {
          "name": "Melanzane",
          "hex": "300529"
        },
        {
          "name": "Cocoa Brown",
          "hex": "301F1E"
        },
        {
          "name": "Woodrush",
          "hex": "302A0F"
        },
        {
          "name": "San Juan",
          "hex": "304B6A"
        },
        {
          "name": "Turquoise",
          "hex": "30D5C8"
        },
        {
          "name": "Eclipse",
          "hex": "311C17"
        },
        {
          "name": "Pickled Bluewood",
          "hex": "314459"
        },
        {
          "name": "Azure",
          "hex": "315BA1"
        },
        {
          "name": "Calypso",
          "hex": "31728D"
        },
        {
          "name": "Paradiso",
          "hex": "317D82"
        },
        {
          "name": "Persian Indigo",
          "hex": "32127A"
        },
        {
          "name": "Blackcurrant",
          "hex": "32293A"
        },
        {
          "name": "Mine Shaft",
          "hex": "323232"
        },
        {
          "name": "Stromboli",
          "hex": "325D52"
        },
        {
          "name": "Bilbao",
          "hex": "327C14"
        },
        {
          "name": "Astral",
          "hex": "327DA0"
        },
        {
          "name": "Christalle",
          "hex": "33036B"
        },
        {
          "name": "Thunder",
          "hex": "33292F"
        },
        {
          "name": "Shamrock",
          "hex": "33CC99"
        },
        {
          "name": "Tamarind",
          "hex": "341515"
        },
        {
          "name": "Mardi Gras",
          "hex": "350036"
        },
        {
          "name": "Valentino",
          "hex": "350E42"
        },
        {
          "name": "Jagger",
          "hex": "350E57"
        },
        {
          "name": "Tuna",
          "hex": "353542"
        },
        {
          "name": "Chambray",
          "hex": "354E8C"
        },
        {
          "name": "Martinique",
          "hex": "363050"
        },
        {
          "name": "Tuatara",
          "hex": "363534"
        },
        {
          "name": "Waiouru",
          "hex": "363C0D"
        },
        {
          "name": "Ming",
          "hex": "36747D"
        },
        {
          "name": "La Palma",
          "hex": "368716"
        },
        {
          "name": "Chocolate",
          "hex": "370202"
        },
        {
          "name": "Clinker",
          "hex": "371D09"
        },
        {
          "name": "Brown Tumbleweed",
          "hex": "37290E"
        },
        {
          "name": "Birch",
          "hex": "373021"
        },
        {
          "name": "Oracle",
          "hex": "377475"
        },
        {
          "name": "Blue Diamond",
          "hex": "380474"
        },
        {
          "name": "Grape",
          "hex": "381A51"
        },
        {
          "name": "Dune",
          "hex": "383533"
        },
        {
          "name": "Oxford Blue",
          "hex": "384555"
        },
        {
          "name": "Clover",
          "hex": "384910"
        },
        {
          "name": "Limed Spruce",
          "hex": "394851"
        },
        {
          "name": "Dell",
          "hex": "396413"
        },
        {
          "name": "Toledo",
          "hex": "3A0020"
        },
        {
          "name": "Sambuca",
          "hex": "3A2010"
        },
        {
          "name": "Jacarta",
          "hex": "3A2A6A"
        },
        {
          "name": "William",
          "hex": "3A686C"
        },
        {
          "name": "Killarney",
          "hex": "3A6A47"
        },
        {
          "name": "Keppel",
          "hex": "3AB09E"
        },
        {
          "name": "Temptress",
          "hex": "3B000B"
        },
        {
          "name": "Aubergine",
          "hex": "3B0910"
        },
        {
          "name": "Jon",
          "hex": "3B1F1F"
        },
        {
          "name": "Treehouse",
          "hex": "3B2820"
        },
        {
          "name": "Amazon",
          "hex": "3B7A57"
        },
        {
          "name": "Boston Blue",
          "hex": "3B91B4"
        },
        {
          "name": "Windsor",
          "hex": "3C0878"
        },
        {
          "name": "Rebel",
          "hex": "3C1206"
        },
        {
          "name": "Meteorite",
          "hex": "3C1F76"
        },
        {
          "name": "Dark Ebony",
          "hex": "3C2005"
        },
        {
          "name": "Camouflage",
          "hex": "3C3910"
        },
        {
          "name": "Bright Gray",
          "hex": "3C4151"
        },
        {
          "name": "Cape Cod",
          "hex": "3C4443"
        },
        {
          "name": "Lunar Green",
          "hex": "3C493A"
        },
        {
          "name": "Bean  ",
          "hex": "3D0C02"
        },
        {
          "name": "Bistre",
          "hex": "3D2B1F"
        },
        {
          "name": "Goblin",
          "hex": "3D7D52"
        },
        {
          "name": "Kingfisher Daisy",
          "hex": "3E0480"
        },
        {
          "name": "Cedar",
          "hex": "3E1C14"
        },
        {
          "name": "English Walnut",
          "hex": "3E2B23"
        },
        {
          "name": "Black Marlin",
          "hex": "3E2C1C"
        },
        {
          "name": "Ship Gray",
          "hex": "3E3A44"
        },
        {
          "name": "Pelorous",
          "hex": "3EABBF"
        },
        {
          "name": "Bronze",
          "hex": "3F2109"
        },
        {
          "name": "Cola",
          "hex": "3F2500"
        },
        {
          "name": "Madras",
          "hex": "3F3002"
        },
        {
          "name": "Minsk",
          "hex": "3F307F"
        },
        {
          "name": "Cabbage Pont",
          "hex": "3F4C3A"
        },
        {
          "name": "Tom Thumb",
          "hex": "3F583B"
        },
        {
          "name": "Mineral Green",
          "hex": "3F5D53"
        },
        {
          "name": "Puerto Rico",
          "hex": "3FC1AA"
        },
        {
          "name": "Harlequin",
          "hex": "3FFF00"
        },
        {
          "name": "Brown Pod",
          "hex": "401801"
        },
        {
          "name": "Cork",
          "hex": "40291D"
        },
        {
          "name": "Masala",
          "hex": "403B38"
        },
        {
          "name": "Thatch Green",
          "hex": "403D19"
        },
        {
          "name": "Fiord",
          "hex": "405169"
        },
        {
          "name": "Viridian",
          "hex": "40826D"
        },
        {
          "name": "Chateau Green",
          "hex": "40A860"
        },
        {
          "name": "Ripe Plum",
          "hex": "410056"
        },
        {
          "name": "Paco",
          "hex": "411F10"
        },
        {
          "name": "Deep Oak",
          "hex": "412010"
        },
        {
          "name": "Merlin",
          "hex": "413C37"
        },
        {
          "name": "Gun Powder",
          "hex": "414257"
        },
        {
          "name": "East Bay",
          "hex": "414C7D"
        },
        {
          "name": "Royal Blue",
          "hex": "4169E1"
        },
        {
          "name": "Ocean Green",
          "hex": "41AA78"
        },
        {
          "name": "Burnt Maroon",
          "hex": "420303"
        },
        {
          "name": "Lisbon Brown",
          "hex": "423921"
        },
        {
          "name": "Faded Jade",
          "hex": "427977"
        },
        {
          "name": "Scarlet Gum",
          "hex": "431560"
        },
        {
          "name": "Iroko",
          "hex": "433120"
        },
        {
          "name": "Armadillo",
          "hex": "433E37"
        },
        {
          "name": "River Bed",
          "hex": "434C59"
        },
        {
          "name": "Green Leaf",
          "hex": "436A0D"
        },
        {
          "name": "Barossa",
          "hex": "44012D"
        },
        {
          "name": "Morocco Brown",
          "hex": "441D00"
        },
        {
          "name": "Mako",
          "hex": "444954"
        },
        {
          "name": "Kelp",
          "hex": "454936"
        },
        {
          "name": "San Marino",
          "hex": "456CAC"
        },
        {
          "name": "Picton Blue",
          "hex": "45B1E8"
        },
        {
          "name": "Loulou",
          "hex": "460B41"
        },
        {
          "name": "Crater Brown",
          "hex": "462425"
        },
        {
          "name": "Gray Asparagus",
          "hex": "465945"
        },
        {
          "name": "Steel Blue",
          "hex": "4682B4"
        },
        {
          "name": "Rustic Red",
          "hex": "480404"
        },
        {
          "name": "Bulgarian Rose",
          "hex": "480607"
        },
        {
          "name": "Clairvoyant",
          "hex": "480656"
        },
        {
          "name": "Cocoa Bean",
          "hex": "481C1C"
        },
        {
          "name": "Woody Brown",
          "hex": "483131"
        },
        {
          "name": "Taupe",
          "hex": "483C32"
        },
        {
          "name": "Van Cleef",
          "hex": "49170C"
        },
        {
          "name": "Brown Derby",
          "hex": "492615"
        },
        {
          "name": "Metallic Bronze",
          "hex": "49371B"
        },
        {
          "name": "Verdun Green",
          "hex": "495400"
        },
        {
          "name": "Blue Bayoux",
          "hex": "496679"
        },
        {
          "name": "Bismark",
          "hex": "497183"
        },
        {
          "name": "Bracken",
          "hex": "4A2A04"
        },
        {
          "name": "Deep Bronze",
          "hex": "4A3004"
        },
        {
          "name": "Mondo",
          "hex": "4A3C30"
        },
        {
          "name": "Tundora",
          "hex": "4A4244"
        },
        {
          "name": "Gravel",
          "hex": "4A444B"
        },
        {
          "name": "Trout",
          "hex": "4A4E5A"
        },
        {
          "name": "Pigment Indigo",
          "hex": "4B0082"
        },
        {
          "name": "Nandor",
          "hex": "4B5D52"
        },
        {
          "name": "Saddle",
          "hex": "4C3024"
        },
        {
          "name": "Abbey",
          "hex": "4C4F56"
        },
        {
          "name": "Blackberry",
          "hex": "4D0135"
        },
        {
          "name": "Cab Sav",
          "hex": "4D0A18"
        },
        {
          "name": "Indian Tan",
          "hex": "4D1E01"
        },
        {
          "name": "Cowboy",
          "hex": "4D282D"
        },
        {
          "name": "Livid Brown",
          "hex": "4D282E"
        },
        {
          "name": "Rock",
          "hex": "4D3833"
        },
        {
          "name": "Punga",
          "hex": "4D3D14"
        },
        {
          "name": "Bronzetone",
          "hex": "4D400F"
        },
        {
          "name": "Woodland",
          "hex": "4D5328"
        },
        {
          "name": "Mahogany",
          "hex": "4E0606"
        },
        {
          "name": "Bossanova",
          "hex": "4E2A5A"
        },
        {
          "name": "Matterhorn",
          "hex": "4E3B41"
        },
        {
          "name": "Bronze Olive",
          "hex": "4E420C"
        },
        {
          "name": "Mulled Wine",
          "hex": "4E4562"
        },
        {
          "name": "Axolotl",
          "hex": "4E6649"
        },
        {
          "name": "Wedgewood",
          "hex": "4E7F9E"
        },
        {
          "name": "Shakespeare",
          "hex": "4EABD1"
        },
        {
          "name": "Honey Flower",
          "hex": "4F1C70"
        },
        {
          "name": "Daisy Bush",
          "hex": "4F2398"
        },
        {
          "name": "Indigo",
          "hex": "4F69C6"
        },
        {
          "name": "Fern Green",
          "hex": "4F7942"
        },
        {
          "name": "Fruit Salad",
          "hex": "4F9D5D"
        },
        {
          "name": "Apple",
          "hex": "4FA83D"
        },
        {
          "name": "Mortar",
          "hex": "504351"
        },
        {
          "name": "Kashmir Blue",
          "hex": "507096"
        },
        {
          "name": "Cutty Sark",
          "hex": "507672"
        },
        {
          "name": "Emerald",
          "hex": "50C878"
        },
        {
          "name": "Emperor",
          "hex": "514649"
        },
        {
          "name": "Chalet Green",
          "hex": "516E3D"
        },
        {
          "name": "Como",
          "hex": "517C66"
        },
        {
          "name": "Smalt Blue",
          "hex": "51808F"
        },
        {
          "name": "Castro",
          "hex": "52001F"
        },
        {
          "name": "Maroon Oak",
          "hex": "520C17"
        },
        {
          "name": "Gigas",
          "hex": "523C94"
        },
        {
          "name": "Voodoo",
          "hex": "533455"
        },
        {
          "name": "Victoria",
          "hex": "534491"
        },
        {
          "name": "Hippie Green",
          "hex": "53824B"
        },
        {
          "name": "Heath",
          "hex": "541012"
        },
        {
          "name": "Judge Gray",
          "hex": "544333"
        },
        {
          "name": "Fuscous Gray",
          "hex": "54534D"
        },
        {
          "name": "Vida Loca",
          "hex": "549019"
        },
        {
          "name": "Cioccolato",
          "hex": "55280C"
        },
        {
          "name": "Saratoga",
          "hex": "555B10"
        },
        {
          "name": "Finlandia",
          "hex": "556D56"
        },
        {
          "name": "Havelock Blue",
          "hex": "5590D9"
        },
        {
          "name": "Fountain Blue",
          "hex": "56B4BE"
        },
        {
          "name": "Spring Leaves",
          "hex": "578363"
        },
        {
          "name": "Saddle Brown",
          "hex": "583401"
        },
        {
          "name": "Scarpa Flow",
          "hex": "585562"
        },
        {
          "name": "Cactus",
          "hex": "587156"
        },
        {
          "name": "Hippie Blue",
          "hex": "589AAF"
        },
        {
          "name": "Wine Berry",
          "hex": "591D35"
        },
        {
          "name": "Brown Bramble",
          "hex": "592804"
        },
        {
          "name": "Congo Brown",
          "hex": "593737"
        },
        {
          "name": "Millbrook",
          "hex": "594433"
        },
        {
          "name": "Waikawa Gray",
          "hex": "5A6E9C"
        },
        {
          "name": "Horizon",
          "hex": "5A87A0"
        },
        {
          "name": "Jambalaya",
          "hex": "5B3013"
        },
        {
          "name": "Bordeaux",
          "hex": "5C0120"
        },
        {
          "name": "Mulberry Wood",
          "hex": "5C0536"
        },
        {
          "name": "Carnaby Tan",
          "hex": "5C2E01"
        },
        {
          "name": "Comet",
          "hex": "5C5D75"
        },
        {
          "name": "Redwood",
          "hex": "5D1E0F"
        },
        {
          "name": "Don Juan",
          "hex": "5D4C51"
        },
        {
          "name": "Chicago",
          "hex": "5D5C58"
        },
        {
          "name": "Verdigris",
          "hex": "5D5E37"
        },
        {
          "name": "Dingley",
          "hex": "5D7747"
        },
        {
          "name": "Breaker Bay",
          "hex": "5DA19F"
        },
        {
          "name": "Kabul",
          "hex": "5E483E"
        },
        {
          "name": "Hemlock",
          "hex": "5E5D3B"
        },
        {
          "name": "Irish Coffee",
          "hex": "5F3D26"
        },
        {
          "name": "Mid Gray",
          "hex": "5F5F6E"
        },
        {
          "name": "Shuttle Gray",
          "hex": "5F6672"
        },
        {
          "name": "Aqua Forest",
          "hex": "5FA777"
        },
        {
          "name": "Tradewind",
          "hex": "5FB3AC"
        },
        {
          "name": "Horses Neck",
          "hex": "604913"
        },
        {
          "name": "Smoky",
          "hex": "605B73"
        },
        {
          "name": "Corduroy",
          "hex": "606E68"
        },
        {
          "name": "Danube",
          "hex": "6093D1"
        },
        {
          "name": "Espresso",
          "hex": "612718"
        },
        {
          "name": "Eggplant",
          "hex": "614051"
        },
        {
          "name": "Costa Del Sol",
          "hex": "615D30"
        },
        {
          "name": "Glade Green",
          "hex": "61845F"
        },
        {
          "name": "Buccaneer",
          "hex": "622F30"
        },
        {
          "name": "Quincy",
          "hex": "623F2D"
        },
        {
          "name": "Butterfly Bush",
          "hex": "624E9A"
        },
        {
          "name": "West Coast",
          "hex": "625119"
        },
        {
          "name": "Finch",
          "hex": "626649"
        },
        {
          "name": "Patina",
          "hex": "639A8F"
        },
        {
          "name": "Fern",
          "hex": "63B76C"
        },
        {
          "name": "Blue Violet",
          "hex": "6456B7"
        },
        {
          "name": "Dolphin",
          "hex": "646077"
        },
        {
          "name": "Storm Dust",
          "hex": "646463"
        },
        {
          "name": "Siam",
          "hex": "646A54"
        },
        {
          "name": "Nevada",
          "hex": "646E75"
        },
        {
          "name": "Cornflower Blue",
          "hex": "6495ED"
        },
        {
          "name": "Viking",
          "hex": "64CCDB"
        },
        {
          "name": "Rosewood",
          "hex": "65000B"
        },
        {
          "name": "Cherrywood",
          "hex": "651A14"
        },
        {
          "name": "Purple Heart",
          "hex": "652DC1"
        },
        {
          "name": "Fern Frond",
          "hex": "657220"
        },
        {
          "name": "Willow Grove",
          "hex": "65745D"
        },
        {
          "name": "Hoki",
          "hex": "65869F"
        },
        {
          "name": "Pompadour",
          "hex": "660045"
        },
        {
          "name": "Purple",
          "hex": "660099"
        },
        {
          "name": "Tyrian Purple",
          "hex": "66023C"
        },
        {
          "name": "Dark Tan",
          "hex": "661010"
        },
        {
          "name": "Silver Tree",
          "hex": "66B58F"
        },
        {
          "name": "Bright Green",
          "hex": "66FF00"
        },
        {
          "name": "Screamin' Green",
          "hex": "66FF66"
        },
        {
          "name": "Black Rose",
          "hex": "67032D"
        },
        {
          "name": "Scampi",
          "hex": "675FA6"
        },
        {
          "name": "Ironside Gray",
          "hex": "676662"
        },
        {
          "name": "Viridian Green",
          "hex": "678975"
        },
        {
          "name": "Christi",
          "hex": "67A712"
        },
        {
          "name": "Nutmeg Wood Finish",
          "hex": "683600"
        },
        {
          "name": "Zambezi",
          "hex": "685558"
        },
        {
          "name": "Salt Box",
          "hex": "685E6E"
        },
        {
          "name": "Tawny Port",
          "hex": "692545"
        },
        {
          "name": "Finn",
          "hex": "692D54"
        },
        {
          "name": "Scorpion",
          "hex": "695F62"
        },
        {
          "name": "Lynch",
          "hex": "697E9A"
        },
        {
          "name": "Spice",
          "hex": "6A442E"
        },
        {
          "name": "Himalaya",
          "hex": "6A5D1B"
        },
        {
          "name": "Soya Bean",
          "hex": "6A6051"
        },
        {
          "name": "Hairy Heath",
          "hex": "6B2A14"
        },
        {
          "name": "Royal Purple",
          "hex": "6B3FA0"
        },
        {
          "name": "Shingle Fawn",
          "hex": "6B4E31"
        },
        {
          "name": "Dorado",
          "hex": "6B5755"
        },
        {
          "name": "Bermuda Gray",
          "hex": "6B8BA2"
        },
        {
          "name": "Olive Drab",
          "hex": "6B8E23"
        },
        {
          "name": "Eminence",
          "hex": "6C3082"
        },
        {
          "name": "Turquoise Blue",
          "hex": "6CDAE7"
        },
        {
          "name": "Lonestar",
          "hex": "6D0101"
        },
        {
          "name": "Pine Cone",
          "hex": "6D5E54"
        },
        {
          "name": "Dove Gray",
          "hex": "6D6C6C"
        },
        {
          "name": "Juniper",
          "hex": "6D9292"
        },
        {
          "name": "Gothic",
          "hex": "6D92A1"
        },
        {
          "name": "Red Oxide",
          "hex": "6E0902"
        },
        {
          "name": "Moccaccino",
          "hex": "6E1D14"
        },
        {
          "name": "Pickled Bean",
          "hex": "6E4826"
        },
        {
          "name": "Dallas",
          "hex": "6E4B26"
        },
        {
          "name": "Kokoda",
          "hex": "6E6D57"
        },
        {
          "name": "Pale Sky",
          "hex": "6E7783"
        },
        {
          "name": "Cafe Royale",
          "hex": "6F440C"
        },
        {
          "name": "Flint",
          "hex": "6F6A61"
        },
        {
          "name": "Highland",
          "hex": "6F8E63"
        },
        {
          "name": "Limeade",
          "hex": "6F9D02"
        },
        {
          "name": "Downy",
          "hex": "6FD0C5"
        },
        {
          "name": "Persian Plum",
          "hex": "701C1C"
        },
        {
          "name": "Sepia",
          "hex": "704214"
        },
        {
          "name": "Antique Bronze",
          "hex": "704A07"
        },
        {
          "name": "Ferra",
          "hex": "704F50"
        },
        {
          "name": "Coffee",
          "hex": "706555"
        },
        {
          "name": "Slate Gray",
          "hex": "708090"
        },
        {
          "name": "Cedar Wood Finish",
          "hex": "711A00"
        },
        {
          "name": "Metallic Copper",
          "hex": "71291D"
        },
        {
          "name": "Affair",
          "hex": "714693"
        },
        {
          "name": "Studio",
          "hex": "714AB2"
        },
        {
          "name": "Tobacco Brown",
          "hex": "715D47"
        },
        {
          "name": "Yellow Metal",
          "hex": "716338"
        },
        {
          "name": "Peat",
          "hex": "716B56"
        },
        {
          "name": "Olivetone",
          "hex": "716E10"
        },
        {
          "name": "Storm Gray",
          "hex": "717486"
        },
        {
          "name": "Sirocco",
          "hex": "718080"
        },
        {
          "name": "Aquamarine Blue",
          "hex": "71D9E2"
        },
        {
          "name": "Venetian Red",
          "hex": "72010F"
        },
        {
          "name": "Old Copper",
          "hex": "724A2F"
        },
        {
          "name": "Go Ben",
          "hex": "726D4E"
        },
        {
          "name": "Raven",
          "hex": "727B89"
        },
        {
          "name": "Seance",
          "hex": "731E8F"
        },
        {
          "name": "Raw Umber",
          "hex": "734A12"
        },
        {
          "name": "Kimberly",
          "hex": "736C9F"
        },
        {
          "name": "Crocodile",
          "hex": "736D58"
        },
        {
          "name": "Crete",
          "hex": "737829"
        },
        {
          "name": "Xanadu",
          "hex": "738678"
        },
        {
          "name": "Spicy Mustard",
          "hex": "74640D"
        },
        {
          "name": "Limed Ash",
          "hex": "747D63"
        },
        {
          "name": "Rolling Stone",
          "hex": "747D83"
        },
        {
          "name": "Blue Smoke",
          "hex": "748881"
        },
        {
          "name": "Laurel",
          "hex": "749378"
        },
        {
          "name": "Mantis",
          "hex": "74C365"
        },
        {
          "name": "Russett",
          "hex": "755A57"
        },
        {
          "name": "Deluge",
          "hex": "7563A8"
        },
        {
          "name": "Cosmic",
          "hex": "76395D"
        },
        {
          "name": "Blue Marguerite",
          "hex": "7666C6"
        },
        {
          "name": "Lima",
          "hex": "76BD17"
        },
        {
          "name": "Sky Blue",
          "hex": "76D7EA"
        },
        {
          "name": "Dark Burgundy",
          "hex": "770F05"
        },
        {
          "name": "Crown of Thorns",
          "hex": "771F1F"
        },
        {
          "name": "Walnut",
          "hex": "773F1A"
        },
        {
          "name": "Pablo",
          "hex": "776F61"
        },
        {
          "name": "Pacifika",
          "hex": "778120"
        },
        {
          "name": "Oxley",
          "hex": "779E86"
        },
        {
          "name": "Pastel Green",
          "hex": "77DD77"
        },
        {
          "name": "Japanese Maple",
          "hex": "780109"
        },
        {
          "name": "Mocha",
          "hex": "782D19"
        },
        {
          "name": "Peanut",
          "hex": "782F16"
        },
        {
          "name": "Camouflage Green",
          "hex": "78866B"
        },
        {
          "name": "Wasabi",
          "hex": "788A25"
        },
        {
          "name": "Ship Cove",
          "hex": "788BBA"
        },
        {
          "name": "Sea Nymph",
          "hex": "78A39C"
        },
        {
          "name": "Roman Coffee",
          "hex": "795D4C"
        },
        {
          "name": "Old Lavender",
          "hex": "796878"
        },
        {
          "name": "Rum",
          "hex": "796989"
        },
        {
          "name": "Fedora",
          "hex": "796A78"
        },
        {
          "name": "Sandstone",
          "hex": "796D62"
        },
        {
          "name": "Spray",
          "hex": "79DEEC"
        },
        {
          "name": "Siren",
          "hex": "7A013A"
        },
        {
          "name": "Fuchsia Blue",
          "hex": "7A58C1"
        },
        {
          "name": "Boulder",
          "hex": "7A7A7A"
        },
        {
          "name": "Wild Blue Yonder",
          "hex": "7A89B8"
        },
        {
          "name": "De York",
          "hex": "7AC488"
        },
        {
          "name": "Red Beech",
          "hex": "7B3801"
        },
        {
          "name": "Cinnamon",
          "hex": "7B3F00"
        },
        {
          "name": "Yukon Gold",
          "hex": "7B6608"
        },
        {
          "name": "Tapa",
          "hex": "7B7874"
        },
        {
          "name": "Waterloo ",
          "hex": "7B7C94"
        },
        {
          "name": "Flax Smoke",
          "hex": "7B8265"
        },
        {
          "name": "Amulet",
          "hex": "7B9F80"
        },
        {
          "name": "Asparagus",
          "hex": "7BA05B"
        },
        {
          "name": "Kenyan Copper",
          "hex": "7C1C05"
        },
        {
          "name": "Pesto",
          "hex": "7C7631"
        },
        {
          "name": "Topaz",
          "hex": "7C778A"
        },
        {
          "name": "Concord",
          "hex": "7C7B7A"
        },
        {
          "name": "Jumbo",
          "hex": "7C7B82"
        },
        {
          "name": "Trendy Green",
          "hex": "7C881A"
        },
        {
          "name": "Gumbo",
          "hex": "7CA1A6"
        },
        {
          "name": "Acapulco",
          "hex": "7CB0A1"
        },
        {
          "name": "Neptune",
          "hex": "7CB7BB"
        },
        {
          "name": "Pueblo",
          "hex": "7D2C14"
        },
        {
          "name": "Bay Leaf",
          "hex": "7DA98D"
        },
        {
          "name": "Malibu",
          "hex": "7DC8F7"
        },
        {
          "name": "Bermuda",
          "hex": "7DD8C6"
        },
        {
          "name": "Copper Canyon",
          "hex": "7E3A15"
        },
        {
          "name": "Claret",
          "hex": "7F1734"
        },
        {
          "name": "Peru Tan",
          "hex": "7F3A02"
        },
        {
          "name": "Falcon",
          "hex": "7F626D"
        },
        {
          "name": "Mobster",
          "hex": "7F7589"
        },
        {
          "name": "Moody Blue",
          "hex": "7F76D3"
        },
        {
          "name": "Chartreuse",
          "hex": "7FFF00"
        },
        {
          "name": "Aquamarine",
          "hex": "7FFFD4"
        },
        {
          "name": "Maroon",
          "hex": "800000"
        },
        {
          "name": "Rose Bud Cherry",
          "hex": "800B47"
        },
        {
          "name": "Falu Red",
          "hex": "801818"
        },
        {
          "name": "Red Robin",
          "hex": "80341F"
        },
        {
          "name": "Vivid Violet",
          "hex": "803790"
        },
        {
          "name": "Russet",
          "hex": "80461B"
        },
        {
          "name": "Friar Gray",
          "hex": "807E79"
        },
        {
          "name": "Olive",
          "hex": "808000"
        },
        {
          "name": "Gray",
          "hex": "808080"
        },
        {
          "name": "Gulf Stream",
          "hex": "80B3AE"
        },
        {
          "name": "Glacier",
          "hex": "80B3C4"
        },
        {
          "name": "Seagull",
          "hex": "80CCEA"
        },
        {
          "name": "Nutmeg",
          "hex": "81422C"
        },
        {
          "name": "Spicy Pink",
          "hex": "816E71"
        },
        {
          "name": "Empress",
          "hex": "817377"
        },
        {
          "name": "Spanish Green",
          "hex": "819885"
        },
        {
          "name": "Sand Dune",
          "hex": "826F65"
        },
        {
          "name": "Gunsmoke",
          "hex": "828685"
        },
        {
          "name": "Battleship Gray",
          "hex": "828F72"
        },
        {
          "name": "Merlot",
          "hex": "831923"
        },
        {
          "name": "Shadow",
          "hex": "837050"
        },
        {
          "name": "Chelsea Cucumber",
          "hex": "83AA5D"
        },
        {
          "name": "Monte Carlo",
          "hex": "83D0C6"
        },
        {
          "name": "Plum",
          "hex": "843179"
        },
        {
          "name": "Granny Smith",
          "hex": "84A0A0"
        },
        {
          "name": "Chetwode Blue",
          "hex": "8581D9"
        },
        {
          "name": "Bandicoot",
          "hex": "858470"
        },
        {
          "name": "Bali Hai",
          "hex": "859FAF"
        },
        {
          "name": "Half Baked",
          "hex": "85C4CC"
        },
        {
          "name": "Red Devil",
          "hex": "860111"
        },
        {
          "name": "Lotus",
          "hex": "863C3C"
        },
        {
          "name": "Ironstone",
          "hex": "86483C"
        },
        {
          "name": "Bull Shot",
          "hex": "864D1E"
        },
        {
          "name": "Rusty Nail",
          "hex": "86560A"
        },
        {
          "name": "Bitter",
          "hex": "868974"
        },
        {
          "name": "Regent Gray",
          "hex": "86949F"
        },
        {
          "name": "Disco",
          "hex": "871550"
        },
        {
          "name": "Americano",
          "hex": "87756E"
        },
        {
          "name": "Hurricane",
          "hex": "877C7B"
        },
        {
          "name": "Oslo Gray",
          "hex": "878D91"
        },
        {
          "name": "Sushi",
          "hex": "87AB39"
        },
        {
          "name": "Spicy Mix",
          "hex": "885342"
        },
        {
          "name": "Kumera",
          "hex": "886221"
        },
        {
          "name": "Suva Gray",
          "hex": "888387"
        },
        {
          "name": "Avocado",
          "hex": "888D65"
        },
        {
          "name": "Camelot",
          "hex": "893456"
        },
        {
          "name": "Solid Pink",
          "hex": "893843"
        },
        {
          "name": "Cannon Pink",
          "hex": "894367"
        },
        {
          "name": "Makara",
          "hex": "897D6D"
        },
        {
          "name": "Burnt Umber",
          "hex": "8A3324"
        },
        {
          "name": "True V",
          "hex": "8A73D6"
        },
        {
          "name": "Clay Creek",
          "hex": "8A8360"
        },
        {
          "name": "Monsoon",
          "hex": "8A8389"
        },
        {
          "name": "Stack",
          "hex": "8A8F8A"
        },
        {
          "name": "Jordy Blue",
          "hex": "8AB9F1"
        },
        {
          "name": "Electric Violet",
          "hex": "8B00FF"
        },
        {
          "name": "Monarch",
          "hex": "8B0723"
        },
        {
          "name": "Corn Harvest",
          "hex": "8B6B0B"
        },
        {
          "name": "Olive Haze",
          "hex": "8B8470"
        },
        {
          "name": "Schooner",
          "hex": "8B847E"
        },
        {
          "name": "Natural Gray",
          "hex": "8B8680"
        },
        {
          "name": "Mantle",
          "hex": "8B9C90"
        },
        {
          "name": "Portage",
          "hex": "8B9FEE"
        },
        {
          "name": "Envy",
          "hex": "8BA690"
        },
        {
          "name": "Cascade",
          "hex": "8BA9A5"
        },
        {
          "name": "Riptide",
          "hex": "8BE6D8"
        },
        {
          "name": "Cardinal Pink",
          "hex": "8C055E"
        },
        {
          "name": "Mule Fawn",
          "hex": "8C472F"
        },
        {
          "name": "Potters Clay",
          "hex": "8C5738"
        },
        {
          "name": "Trendy Pink",
          "hex": "8C6495"
        },
        {
          "name": "Paprika",
          "hex": "8D0226"
        },
        {
          "name": "Sanguine Brown",
          "hex": "8D3D38"
        },
        {
          "name": "Tosca",
          "hex": "8D3F3F"
        },
        {
          "name": "Cement",
          "hex": "8D7662"
        },
        {
          "name": "Granite Green",
          "hex": "8D8974"
        },
        {
          "name": "Manatee",
          "hex": "8D90A1"
        },
        {
          "name": "Polo Blue",
          "hex": "8DA8CC"
        },
        {
          "name": "Red Berry",
          "hex": "8E0000"
        },
        {
          "name": "Rope",
          "hex": "8E4D1E"
        },
        {
          "name": "Opium",
          "hex": "8E6F70"
        },
        {
          "name": "Domino",
          "hex": "8E775E"
        },
        {
          "name": "Mamba",
          "hex": "8E8190"
        },
        {
          "name": "Nepal",
          "hex": "8EABC1"
        },
        {
          "name": "Pohutukawa",
          "hex": "8F021C"
        },
        {
          "name": "El Salva",
          "hex": "8F3E33"
        },
        {
          "name": "Korma",
          "hex": "8F4B0E"
        },
        {
          "name": "Squirrel",
          "hex": "8F8176"
        },
        {
          "name": "Vista Blue",
          "hex": "8FD6B4"
        },
        {
          "name": "Burgundy",
          "hex": "900020"
        },
        {
          "name": "Old Brick",
          "hex": "901E1E"
        },
        {
          "name": "Hemp",
          "hex": "907874"
        },
        {
          "name": "Almond Frost",
          "hex": "907B71"
        },
        {
          "name": "Sycamore",
          "hex": "908D39"
        },
        {
          "name": "Sangria",
          "hex": "92000A"
        },
        {
          "name": "Cumin",
          "hex": "924321"
        },
        {
          "name": "Beaver",
          "hex": "926F5B"
        },
        {
          "name": "Stonewall",
          "hex": "928573"
        },
        {
          "name": "Venus",
          "hex": "928590"
        },
        {
          "name": "Medium Purple",
          "hex": "9370DB"
        },
        {
          "name": "Cornflower",
          "hex": "93CCEA"
        },
        {
          "name": "Algae Green",
          "hex": "93DFB8"
        },
        {
          "name": "Copper Rust",
          "hex": "944747"
        },
        {
          "name": "Arrowtown",
          "hex": "948771"
        },
        {
          "name": "Scarlett",
          "hex": "950015"
        },
        {
          "name": "Strikemaster",
          "hex": "956387"
        },
        {
          "name": "Mountain Mist",
          "hex": "959396"
        },
        {
          "name": "Carmine",
          "hex": "960018"
        },
        {
          "name": "Brown",
          "hex": "964B00"
        },
        {
          "name": "Leather",
          "hex": "967059"
        },
        {
          "name": "Purple Mountain's Majesty",
          "hex": "9678B6"
        },
        {
          "name": "Lavender Purple",
          "hex": "967BB6"
        },
        {
          "name": "Pewter",
          "hex": "96A8A1"
        },
        {
          "name": "Summer Green",
          "hex": "96BBAB"
        },
        {
          "name": "Au Chico",
          "hex": "97605D"
        },
        {
          "name": "Wisteria",
          "hex": "9771B5"
        },
        {
          "name": "Atlantis",
          "hex": "97CD2D"
        },
        {
          "name": "Vin Rouge",
          "hex": "983D61"
        },
        {
          "name": "Lilac Bush",
          "hex": "9874D3"
        },
        {
          "name": "Bazaar",
          "hex": "98777B"
        },
        {
          "name": "Hacienda",
          "hex": "98811B"
        },
        {
          "name": "Pale Oyster",
          "hex": "988D77"
        },
        {
          "name": "Mint Green",
          "hex": "98FF98"
        },
        {
          "name": "Fresh Eggplant",
          "hex": "990066"
        },
        {
          "name": "Violet Eggplant",
          "hex": "991199"
        },
        {
          "name": "Tamarillo",
          "hex": "991613"
        },
        {
          "name": "Totem Pole",
          "hex": "991B07"
        },
        {
          "name": "Copper Rose",
          "hex": "996666"
        },
        {
          "name": "Amethyst",
          "hex": "9966CC"
        },
        {
          "name": "Mountbatten Pink",
          "hex": "997A8D"
        },
        {
          "name": "Blue Bell",
          "hex": "9999CC"
        },
        {
          "name": "Prairie Sand",
          "hex": "9A3820"
        },
        {
          "name": "Toast",
          "hex": "9A6E61"
        },
        {
          "name": "Gurkha",
          "hex": "9A9577"
        },
        {
          "name": "Olivine",
          "hex": "9AB973"
        },
        {
          "name": "Shadow Green",
          "hex": "9AC2B8"
        },
        {
          "name": "Oregon",
          "hex": "9B4703"
        },
        {
          "name": "Lemon Grass",
          "hex": "9B9E8F"
        },
        {
          "name": "Stiletto",
          "hex": "9C3336"
        },
        {
          "name": "Hawaiian Tan",
          "hex": "9D5616"
        },
        {
          "name": "Gull Gray",
          "hex": "9DACB7"
        },
        {
          "name": "Pistachio",
          "hex": "9DC209"
        },
        {
          "name": "Granny Smith Apple",
          "hex": "9DE093"
        },
        {
          "name": "Anakiwa",
          "hex": "9DE5FF"
        },
        {
          "name": "Chelsea Gem",
          "hex": "9E5302"
        },
        {
          "name": "Sepia Skin",
          "hex": "9E5B40"
        },
        {
          "name": "Sage",
          "hex": "9EA587"
        },
        {
          "name": "Citron",
          "hex": "9EA91F"
        },
        {
          "name": "Rock Blue",
          "hex": "9EB1CD"
        },
        {
          "name": "Morning Glory",
          "hex": "9EDEE0"
        },
        {
          "name": "Cognac",
          "hex": "9F381D"
        },
        {
          "name": "Reef Gold",
          "hex": "9F821C"
        },
        {
          "name": "Star Dust",
          "hex": "9F9F9C"
        },
        {
          "name": "Santas Gray",
          "hex": "9FA0B1"
        },
        {
          "name": "Sinbad",
          "hex": "9FD7D3"
        },
        {
          "name": "Feijoa",
          "hex": "9FDD8C"
        },
        {
          "name": "Tabasco",
          "hex": "A02712"
        },
        {
          "name": "Buttered Rum",
          "hex": "A1750D"
        },
        {
          "name": "Hit Gray",
          "hex": "A1ADB5"
        },
        {
          "name": "Citrus",
          "hex": "A1C50A"
        },
        {
          "name": "Aqua Island",
          "hex": "A1DAD7"
        },
        {
          "name": "Water Leaf",
          "hex": "A1E9DE"
        },
        {
          "name": "Flirt",
          "hex": "A2006D"
        },
        {
          "name": "Rouge",
          "hex": "A23B6C"
        },
        {
          "name": "Cape Palliser",
          "hex": "A26645"
        },
        {
          "name": "Gray Chateau",
          "hex": "A2AAB3"
        },
        {
          "name": "Edward",
          "hex": "A2AEAB"
        },
        {
          "name": "Pharlap",
          "hex": "A3807B"
        },
        {
          "name": "Amethyst Smoke",
          "hex": "A397B4"
        },
        {
          "name": "Blizzard Blue",
          "hex": "A3E3ED"
        },
        {
          "name": "Delta",
          "hex": "A4A49D"
        },
        {
          "name": "Wistful",
          "hex": "A4A6D3"
        },
        {
          "name": "Green Smoke",
          "hex": "A4AF6E"
        },
        {
          "name": "Jazzberry Jam",
          "hex": "A50B5E"
        },
        {
          "name": "Zorba",
          "hex": "A59B91"
        },
        {
          "name": "Bahia",
          "hex": "A5CB0C"
        },
        {
          "name": "Roof Terracotta",
          "hex": "A62F20"
        },
        {
          "name": "Paarl",
          "hex": "A65529"
        },
        {
          "name": "Barley Corn",
          "hex": "A68B5B"
        },
        {
          "name": "Donkey Brown",
          "hex": "A69279"
        },
        {
          "name": "Dawn",
          "hex": "A6A29A"
        },
        {
          "name": "Mexican Red",
          "hex": "A72525"
        },
        {
          "name": "Luxor Gold",
          "hex": "A7882C"
        },
        {
          "name": "Rich Gold",
          "hex": "A85307"
        },
        {
          "name": "Reno Sand",
          "hex": "A86515"
        },
        {
          "name": "Coral Tree",
          "hex": "A86B6B"
        },
        {
          "name": "Dusty Gray",
          "hex": "A8989B"
        },
        {
          "name": "Dull Lavender",
          "hex": "A899E6"
        },
        {
          "name": "Tallow",
          "hex": "A8A589"
        },
        {
          "name": "Bud",
          "hex": "A8AE9C"
        },
        {
          "name": "Locust",
          "hex": "A8AF8E"
        },
        {
          "name": "Norway",
          "hex": "A8BD9F"
        },
        {
          "name": "Chinook",
          "hex": "A8E3BD"
        },
        {
          "name": "Gray Olive",
          "hex": "A9A491"
        },
        {
          "name": "Aluminium",
          "hex": "A9ACB6"
        },
        {
          "name": "Cadet Blue",
          "hex": "A9B2C3"
        },
        {
          "name": "Schist",
          "hex": "A9B497"
        },
        {
          "name": "Tower Gray",
          "hex": "A9BDBF"
        },
        {
          "name": "Perano",
          "hex": "A9BEF2"
        },
        {
          "name": "Opal",
          "hex": "A9C6C2"
        },
        {
          "name": "Night Shadz",
          "hex": "AA375A"
        },
        {
          "name": "Fire",
          "hex": "AA4203"
        },
        {
          "name": "Muesli",
          "hex": "AA8B5B"
        },
        {
          "name": "Sandal",
          "hex": "AA8D6F"
        },
        {
          "name": "Shady Lady",
          "hex": "AAA5A9"
        },
        {
          "name": "Logan",
          "hex": "AAA9CD"
        },
        {
          "name": "Spun Pearl",
          "hex": "AAABB7"
        },
        {
          "name": "Regent St Blue",
          "hex": "AAD6E6"
        },
        {
          "name": "Magic Mint",
          "hex": "AAF0D1"
        },
        {
          "name": "Lipstick",
          "hex": "AB0563"
        },
        {
          "name": "Royal Heath",
          "hex": "AB3472"
        },
        {
          "name": "Sandrift",
          "hex": "AB917A"
        },
        {
          "name": "Cold Purple",
          "hex": "ABA0D9"
        },
        {
          "name": "Bronco",
          "hex": "ABA196"
        },
        {
          "name": "Limed Oak",
          "hex": "AC8A56"
        },
        {
          "name": "East Side",
          "hex": "AC91CE"
        },
        {
          "name": "Lemon Ginger",
          "hex": "AC9E22"
        },
        {
          "name": "Napa",
          "hex": "ACA494"
        },
        {
          "name": "Hillary",
          "hex": "ACA586"
        },
        {
          "name": "Cloudy",
          "hex": "ACA59F"
        },
        {
          "name": "Silver Chalice",
          "hex": "ACACAC"
        },
        {
          "name": "Swamp Green",
          "hex": "ACB78E"
        },
        {
          "name": "Spring Rain",
          "hex": "ACCBB1"
        },
        {
          "name": "Conifer",
          "hex": "ACDD4D"
        },
        {
          "name": "Celadon",
          "hex": "ACE1AF"
        },
        {
          "name": "Mandalay",
          "hex": "AD781B"
        },
        {
          "name": "Casper",
          "hex": "ADBED1"
        },
        {
          "name": "Moss Green",
          "hex": "ADDFAD"
        },
        {
          "name": "Padua",
          "hex": "ADE6C4"
        },
        {
          "name": "Green Yellow",
          "hex": "ADFF2F"
        },
        {
          "name": "Hippie Pink",
          "hex": "AE4560"
        },
        {
          "name": "Desert",
          "hex": "AE6020"
        },
        {
          "name": "Bouquet",
          "hex": "AE809E"
        },
        {
          "name": "Medium Carmine",
          "hex": "AF4035"
        },
        {
          "name": "Apple Blossom",
          "hex": "AF4D43"
        },
        {
          "name": "Brown Rust",
          "hex": "AF593E"
        },
        {
          "name": "Driftwood",
          "hex": "AF8751"
        },
        {
          "name": "Alpine",
          "hex": "AF8F2C"
        },
        {
          "name": "Lucky",
          "hex": "AF9F1C"
        },
        {
          "name": "Martini",
          "hex": "AFA09E"
        },
        {
          "name": "Bombay",
          "hex": "AFB1B8"
        },
        {
          "name": "Pigeon Post",
          "hex": "AFBDD9"
        },
        {
          "name": "Cadillac",
          "hex": "B04C6A"
        },
        {
          "name": "Matrix",
          "hex": "B05D54"
        },
        {
          "name": "Tapestry",
          "hex": "B05E81"
        },
        {
          "name": "Mai Tai",
          "hex": "B06608"
        },
        {
          "name": "Del Rio",
          "hex": "B09A95"
        },
        {
          "name": "Powder Blue",
          "hex": "B0E0E6"
        },
        {
          "name": "Inch Worm",
          "hex": "B0E313"
        },
        {
          "name": "Bright Red",
          "hex": "B10000"
        },
        {
          "name": "Vesuvius",
          "hex": "B14A0B"
        },
        {
          "name": "Pumpkin Skin",
          "hex": "B1610B"
        },
        {
          "name": "Santa Fe",
          "hex": "B16D52"
        },
        {
          "name": "Teak",
          "hex": "B19461"
        },
        {
          "name": "Fringy Flower",
          "hex": "B1E2C1"
        },
        {
          "name": "Ice Cold",
          "hex": "B1F4E7"
        },
        {
          "name": "Shiraz",
          "hex": "B20931"
        },
        {
          "name": "Biloba Flower",
          "hex": "B2A1EA"
        },
        {
          "name": "Tall Poppy",
          "hex": "B32D29"
        },
        {
          "name": "Fiery Orange",
          "hex": "B35213"
        },
        {
          "name": "Hot Toddy",
          "hex": "B38007"
        },
        {
          "name": "Taupe Gray",
          "hex": "B3AF95"
        },
        {
          "name": "La Rioja",
          "hex": "B3C110"
        },
        {
          "name": "Well Read",
          "hex": "B43332"
        },
        {
          "name": "Blush",
          "hex": "B44668"
        },
        {
          "name": "Jungle Mist",
          "hex": "B4CFD3"
        },
        {
          "name": "Turkish Rose",
          "hex": "B57281"
        },
        {
          "name": "Lavender",
          "hex": "B57EDC"
        },
        {
          "name": "Mongoose",
          "hex": "B5A27F"
        },
        {
          "name": "Olive Green",
          "hex": "B5B35C"
        },
        {
          "name": "Jet Stream",
          "hex": "B5D2CE"
        },
        {
          "name": "Cruise",
          "hex": "B5ECDF"
        },
        {
          "name": "Hibiscus",
          "hex": "B6316C"
        },
        {
          "name": "Thatch",
          "hex": "B69D98"
        },
        {
          "name": "Heathered Gray",
          "hex": "B6B095"
        },
        {
          "name": "Eagle",
          "hex": "B6BAA4"
        },
        {
          "name": "Spindle",
          "hex": "B6D1EA"
        },
        {
          "name": "Gum Leaf",
          "hex": "B6D3BF"
        },
        {
          "name": "Rust",
          "hex": "B7410E"
        },
        {
          "name": "Muddy Waters",
          "hex": "B78E5C"
        },
        {
          "name": "Sahara",
          "hex": "B7A214"
        },
        {
          "name": "Husk",
          "hex": "B7A458"
        },
        {
          "name": "Nobel",
          "hex": "B7B1B1"
        },
        {
          "name": "Heather",
          "hex": "B7C3D0"
        },
        {
          "name": "Madang",
          "hex": "B7F0BE"
        },
        {
          "name": "Milano Red",
          "hex": "B81104"
        },
        {
          "name": "Copper",
          "hex": "B87333"
        },
        {
          "name": "Gimblet",
          "hex": "B8B56A"
        },
        {
          "name": "Green Spring",
          "hex": "B8C1B1"
        },
        {
          "name": "Celery",
          "hex": "B8C25D"
        },
        {
          "name": "Sail",
          "hex": "B8E0F9"
        },
        {
          "name": "Chestnut",
          "hex": "B94E48"
        },
        {
          "name": "Crail",
          "hex": "B95140"
        },
        {
          "name": "Marigold",
          "hex": "B98D28"
        },
        {
          "name": "Wild Willow",
          "hex": "B9C46A"
        },
        {
          "name": "Rainee",
          "hex": "B9C8AC"
        },
        {
          "name": "Guardsman Red",
          "hex": "BA0101"
        },
        {
          "name": "Rock Spray",
          "hex": "BA450C"
        },
        {
          "name": "Bourbon",
          "hex": "BA6F1E"
        },
        {
          "name": "Pirate Gold",
          "hex": "BA7F03"
        },
        {
          "name": "Nomad",
          "hex": "BAB1A2"
        },
        {
          "name": "Submarine",
          "hex": "BAC7C9"
        },
        {
          "name": "Charlotte",
          "hex": "BAEEF9"
        },
        {
          "name": "Medium Red Violet",
          "hex": "BB3385"
        },
        {
          "name": "Brandy Rose",
          "hex": "BB8983"
        },
        {
          "name": "Rio Grande",
          "hex": "BBD009"
        },
        {
          "name": "Surf",
          "hex": "BBD7C1"
        },
        {
          "name": "Powder Ash",
          "hex": "BCC9C2"
        },
        {
          "name": "Tuscany",
          "hex": "BD5E2E"
        },
        {
          "name": "Quicksand",
          "hex": "BD978E"
        },
        {
          "name": "Silk",
          "hex": "BDB1A8"
        },
        {
          "name": "Malta",
          "hex": "BDB2A1"
        },
        {
          "name": "Chatelle",
          "hex": "BDB3C7"
        },
        {
          "name": "Lavender Gray",
          "hex": "BDBBD7"
        },
        {
          "name": "French Gray",
          "hex": "BDBDC6"
        },
        {
          "name": "Clay Ash",
          "hex": "BDC8B3"
        },
        {
          "name": "Loblolly",
          "hex": "BDC9CE"
        },
        {
          "name": "French Pass",
          "hex": "BDEDFD"
        },
        {
          "name": "London Hue",
          "hex": "BEA6C3"
        },
        {
          "name": "Pink Swan",
          "hex": "BEB5B7"
        },
        {
          "name": "Fuego",
          "hex": "BEDE0D"
        },
        {
          "name": "Rose of Sharon",
          "hex": "BF5500"
        },
        {
          "name": "Tide",
          "hex": "BFB8B0"
        },
        {
          "name": "Blue Haze",
          "hex": "BFBED8"
        },
        {
          "name": "Silver Sand",
          "hex": "BFC1C2"
        },
        {
          "name": "Key Lime Pie",
          "hex": "BFC921"
        },
        {
          "name": "Ziggurat",
          "hex": "BFDBE2"
        },
        {
          "name": "Lime",
          "hex": "BFFF00"
        },
        {
          "name": "Thunderbird",
          "hex": "C02B18"
        },
        {
          "name": "Mojo",
          "hex": "C04737"
        },
        {
          "name": "Old Rose",
          "hex": "C08081"
        },
        {
          "name": "Silver",
          "hex": "C0C0C0"
        },
        {
          "name": "Pale Leaf",
          "hex": "C0D3B9"
        },
        {
          "name": "Pixie Green",
          "hex": "C0D8B6"
        },
        {
          "name": "Tia Maria",
          "hex": "C1440E"
        },
        {
          "name": "Fuchsia Pink",
          "hex": "C154C1"
        },
        {
          "name": "Buddha Gold",
          "hex": "C1A004"
        },
        {
          "name": "Bison Hide",
          "hex": "C1B7A4"
        },
        {
          "name": "Tea",
          "hex": "C1BAB0"
        },
        {
          "name": "Gray Suit",
          "hex": "C1BECD"
        },
        {
          "name": "Sprout",
          "hex": "C1D7B0"
        },
        {
          "name": "Sulu",
          "hex": "C1F07C"
        },
        {
          "name": "Indochine",
          "hex": "C26B03"
        },
        {
          "name": "Twine",
          "hex": "C2955D"
        },
        {
          "name": "Cotton Seed",
          "hex": "C2BDB6"
        },
        {
          "name": "Pumice",
          "hex": "C2CAC4"
        },
        {
          "name": "Jagged Ice",
          "hex": "C2E8E5"
        },
        {
          "name": "Maroon Flush",
          "hex": "C32148"
        },
        {
          "name": "Indian Khaki",
          "hex": "C3B091"
        },
        {
          "name": "Pale Slate",
          "hex": "C3BFC1"
        },
        {
          "name": "Gray Nickel",
          "hex": "C3C3BD"
        },
        {
          "name": "Periwinkle Gray",
          "hex": "C3CDE6"
        },
        {
          "name": "Tiara",
          "hex": "C3D1D1"
        },
        {
          "name": "Tropical Blue",
          "hex": "C3DDF9"
        },
        {
          "name": "Cardinal",
          "hex": "C41E3A"
        },
        {
          "name": "Fuzzy Wuzzy Brown",
          "hex": "C45655"
        },
        {
          "name": "Orange Roughy",
          "hex": "C45719"
        },
        {
          "name": "Mist Gray",
          "hex": "C4C4BC"
        },
        {
          "name": "Coriander",
          "hex": "C4D0B0"
        },
        {
          "name": "Mint Tulip",
          "hex": "C4F4EB"
        },
        {
          "name": "Mulberry",
          "hex": "C54B8C"
        },
        {
          "name": "Nugget",
          "hex": "C59922"
        },
        {
          "name": "Tussock",
          "hex": "C5994B"
        },
        {
          "name": "Sea Mist",
          "hex": "C5DBCA"
        },
        {
          "name": "Yellow Green",
          "hex": "C5E17A"
        },
        {
          "name": "Brick Red",
          "hex": "C62D42"
        },
        {
          "name": "Contessa",
          "hex": "C6726B"
        },
        {
          "name": "Oriental Pink",
          "hex": "C69191"
        },
        {
          "name": "Roti",
          "hex": "C6A84B"
        },
        {
          "name": "Ash",
          "hex": "C6C3B5"
        },
        {
          "name": "Kangaroo",
          "hex": "C6C8BD"
        },
        {
          "name": "Las Palmas",
          "hex": "C6E610"
        },
        {
          "name": "Monza",
          "hex": "C7031E"
        },
        {
          "name": "Red Violet",
          "hex": "C71585"
        },
        {
          "name": "Coral Reef",
          "hex": "C7BCA2"
        },
        {
          "name": "Melrose",
          "hex": "C7C1FF"
        },
        {
          "name": "Cloud",
          "hex": "C7C4BF"
        },
        {
          "name": "Ghost",
          "hex": "C7C9D5"
        },
        {
          "name": "Pine Glade",
          "hex": "C7CD90"
        },
        {
          "name": "Botticelli",
          "hex": "C7DDE5"
        },
        {
          "name": "Antique Brass",
          "hex": "C88A65"
        },
        {
          "name": "Lilac",
          "hex": "C8A2C8"
        },
        {
          "name": "Hokey Pokey",
          "hex": "C8A528"
        },
        {
          "name": "Lily",
          "hex": "C8AABF"
        },
        {
          "name": "Laser",
          "hex": "C8B568"
        },
        {
          "name": "Edgewater",
          "hex": "C8E3D7"
        },
        {
          "name": "Piper",
          "hex": "C96323"
        },
        {
          "name": "Pizza",
          "hex": "C99415"
        },
        {
          "name": "Light Wisteria",
          "hex": "C9A0DC"
        },
        {
          "name": "Rodeo Dust",
          "hex": "C9B29B"
        },
        {
          "name": "Sundance",
          "hex": "C9B35B"
        },
        {
          "name": "Earls Green",
          "hex": "C9B93B"
        },
        {
          "name": "Silver Rust",
          "hex": "C9C0BB"
        },
        {
          "name": "Conch",
          "hex": "C9D9D2"
        },
        {
          "name": "Reef",
          "hex": "C9FFA2"
        },
        {
          "name": "Aero Blue",
          "hex": "C9FFE5"
        },
        {
          "name": "Flush Mahogany",
          "hex": "CA3435"
        },
        {
          "name": "Turmeric",
          "hex": "CABB48"
        },
        {
          "name": "Paris White",
          "hex": "CADCD4"
        },
        {
          "name": "Bitter Lemon",
          "hex": "CAE00D"
        },
        {
          "name": "Skeptic",
          "hex": "CAE6DA"
        },
        {
          "name": "Viola",
          "hex": "CB8FA9"
        },
        {
          "name": "Foggy Gray",
          "hex": "CBCAB6"
        },
        {
          "name": "Green Mist",
          "hex": "CBD3B0"
        },
        {
          "name": "Nebula",
          "hex": "CBDBD6"
        },
        {
          "name": "Persian Red",
          "hex": "CC3333"
        },
        {
          "name": "Burnt Orange",
          "hex": "CC5500"
        },
        {
          "name": "Ochre",
          "hex": "CC7722"
        },
        {
          "name": "Puce",
          "hex": "CC8899"
        },
        {
          "name": "Thistle Green",
          "hex": "CCCAA8"
        },
        {
          "name": "Periwinkle",
          "hex": "CCCCFF"
        },
        {
          "name": "Electric Lime",
          "hex": "CCFF00"
        },
        {
          "name": "Tenn",
          "hex": "CD5700"
        },
        {
          "name": "Chestnut Rose",
          "hex": "CD5C5C"
        },
        {
          "name": "Brandy Punch",
          "hex": "CD8429"
        },
        {
          "name": "Onahau",
          "hex": "CDF4FF"
        },
        {
          "name": "Sorrell Brown",
          "hex": "CEB98F"
        },
        {
          "name": "Cold Turkey",
          "hex": "CEBABA"
        },
        {
          "name": "Yuma",
          "hex": "CEC291"
        },
        {
          "name": "Chino",
          "hex": "CEC7A7"
        },
        {
          "name": "Eunry",
          "hex": "CFA39D"
        },
        {
          "name": "Old Gold",
          "hex": "CFB53B"
        },
        {
          "name": "Tasman",
          "hex": "CFDCCF"
        },
        {
          "name": "Surf Crest",
          "hex": "CFE5D2"
        },
        {
          "name": "Humming Bird",
          "hex": "CFF9F3"
        },
        {
          "name": "Scandal",
          "hex": "CFFAF4"
        },
        {
          "name": "Red Stage",
          "hex": "D05F04"
        },
        {
          "name": "Hopbush",
          "hex": "D06DA1"
        },
        {
          "name": "Meteor",
          "hex": "D07D12"
        },
        {
          "name": "Perfume",
          "hex": "D0BEF8"
        },
        {
          "name": "Prelude",
          "hex": "D0C0E5"
        },
        {
          "name": "Tea Green",
          "hex": "D0F0C0"
        },
        {
          "name": "Geebung",
          "hex": "D18F1B"
        },
        {
          "name": "Vanilla",
          "hex": "D1BEA8"
        },
        {
          "name": "Soft Amber",
          "hex": "D1C6B4"
        },
        {
          "name": "Celeste",
          "hex": "D1D2CA"
        },
        {
          "name": "Mischka",
          "hex": "D1D2DD"
        },
        {
          "name": "Pear",
          "hex": "D1E231"
        },
        {
          "name": "Hot Cinnamon",
          "hex": "D2691E"
        },
        {
          "name": "Raw Sienna",
          "hex": "D27D46"
        },
        {
          "name": "Careys Pink",
          "hex": "D29EAA"
        },
        {
          "name": "Tan",
          "hex": "D2B48C"
        },
        {
          "name": "Deco",
          "hex": "D2DA97"
        },
        {
          "name": "Blue Romance",
          "hex": "D2F6DE"
        },
        {
          "name": "Gossip",
          "hex": "D2F8B0"
        },
        {
          "name": "Sisal",
          "hex": "D3CBBA"
        },
        {
          "name": "Swirl",
          "hex": "D3CDC5"
        },
        {
          "name": "Charm",
          "hex": "D47494"
        },
        {
          "name": "Clam Shell",
          "hex": "D4B6AF"
        },
        {
          "name": "Straw",
          "hex": "D4BF8D"
        },
        {
          "name": "Akaroa",
          "hex": "D4C4A8"
        },
        {
          "name": "Bird Flower",
          "hex": "D4CD16"
        },
        {
          "name": "Iron",
          "hex": "D4D7D9"
        },
        {
          "name": "Geyser",
          "hex": "D4DFE2"
        },
        {
          "name": "Hawkes Blue",
          "hex": "D4E2FC"
        },
        {
          "name": "Grenadier",
          "hex": "D54600"
        },
        {
          "name": "Can Can",
          "hex": "D591A4"
        },
        {
          "name": "Whiskey",
          "hex": "D59A6F"
        },
        {
          "name": "Winter Hazel",
          "hex": "D5D195"
        },
        {
          "name": "Granny Apple",
          "hex": "D5F6E3"
        },
        {
          "name": "My Pink",
          "hex": "D69188"
        },
        {
          "name": "Tacha",
          "hex": "D6C562"
        },
        {
          "name": "Moon Raker",
          "hex": "D6CEF6"
        },
        {
          "name": "Quill Gray",
          "hex": "D6D6D1"
        },
        {
          "name": "Snowy Mint",
          "hex": "D6FFDB"
        },
        {
          "name": "New York Pink",
          "hex": "D7837F"
        },
        {
          "name": "Pavlova",
          "hex": "D7C498"
        },
        {
          "name": "Fog",
          "hex": "D7D0FF"
        },
        {
          "name": "Valencia",
          "hex": "D84437"
        },
        {
          "name": "Japonica",
          "hex": "D87C63"
        },
        {
          "name": "Thistle",
          "hex": "D8BFD8"
        },
        {
          "name": "Maverick",
          "hex": "D8C2D5"
        },
        {
          "name": "Foam",
          "hex": "D8FCFA"
        },
        {
          "name": "Cabaret",
          "hex": "D94972"
        },
        {
          "name": "Burning Sand",
          "hex": "D99376"
        },
        {
          "name": "Cameo",
          "hex": "D9B99B"
        },
        {
          "name": "Timberwolf",
          "hex": "D9D6CF"
        },
        {
          "name": "Tana",
          "hex": "D9DCC1"
        },
        {
          "name": "Link Water",
          "hex": "D9E4F5"
        },
        {
          "name": "Mabel",
          "hex": "D9F7FF"
        },
        {
          "name": "Cerise",
          "hex": "DA3287"
        },
        {
          "name": "Flame Pea",
          "hex": "DA5B38"
        },
        {
          "name": "Bamboo",
          "hex": "DA6304"
        },
        {
          "name": "Red Damask",
          "hex": "DA6A41"
        },
        {
          "name": "Orchid",
          "hex": "DA70D6"
        },
        {
          "name": "Copperfield",
          "hex": "DA8A67"
        },
        {
          "name": "Golden Grass",
          "hex": "DAA520"
        },
        {
          "name": "Zanah",
          "hex": "DAECD6"
        },
        {
          "name": "Iceberg",
          "hex": "DAF4F0"
        },
        {
          "name": "Oyster Bay",
          "hex": "DAFAFF"
        },
        {
          "name": "Cranberry",
          "hex": "DB5079"
        },
        {
          "name": "Petite Orchid",
          "hex": "DB9690"
        },
        {
          "name": "Di Serria",
          "hex": "DB995E"
        },
        {
          "name": "Alto",
          "hex": "DBDBDB"
        },
        {
          "name": "Frosted Mint",
          "hex": "DBFFF8"
        },
        {
          "name": "Crimson",
          "hex": "DC143C"
        },
        {
          "name": "Punch",
          "hex": "DC4333"
        },
        {
          "name": "Galliano",
          "hex": "DCB20C"
        },
        {
          "name": "Blossom",
          "hex": "DCB4BC"
        },
        {
          "name": "Wattle",
          "hex": "DCD747"
        },
        {
          "name": "Westar",
          "hex": "DCD9D2"
        },
        {
          "name": "Moon Mist",
          "hex": "DCDDCC"
        },
        {
          "name": "Caper",
          "hex": "DCEDB4"
        },
        {
          "name": "Swans Down",
          "hex": "DCF0EA"
        },
        {
          "name": "Swiss Coffee",
          "hex": "DDD6D5"
        },
        {
          "name": "White Ice",
          "hex": "DDF9F1"
        },
        {
          "name": "Cerise Red",
          "hex": "DE3163"
        },
        {
          "name": "Roman",
          "hex": "DE6360"
        },
        {
          "name": "Tumbleweed",
          "hex": "DEA681"
        },
        {
          "name": "Gold Tips",
          "hex": "DEBA13"
        },
        {
          "name": "Brandy",
          "hex": "DEC196"
        },
        {
          "name": "Wafer",
          "hex": "DECBC6"
        },
        {
          "name": "Sapling",
          "hex": "DED4A4"
        },
        {
          "name": "Barberry",
          "hex": "DED717"
        },
        {
          "name": "Beryl Green",
          "hex": "DEE5C0"
        },
        {
          "name": "Pattens Blue",
          "hex": "DEF5FF"
        },
        {
          "name": "Heliotrope",
          "hex": "DF73FF"
        },
        {
          "name": "Apache",
          "hex": "DFBE6F"
        },
        {
          "name": "Chenin",
          "hex": "DFCD6F"
        },
        {
          "name": "Lola",
          "hex": "DFCFDB"
        },
        {
          "name": "Willow Brook",
          "hex": "DFECDA"
        },
        {
          "name": "Chartreuse Yellow",
          "hex": "DFFF00"
        },
        {
          "name": "Mauve",
          "hex": "E0B0FF"
        },
        {
          "name": "Anzac",
          "hex": "E0B646"
        },
        {
          "name": "Harvest Gold",
          "hex": "E0B974"
        },
        {
          "name": "Calico",
          "hex": "E0C095"
        },
        {
          "name": "Baby Blue",
          "hex": "E0FFFF"
        },
        {
          "name": "Sunglo",
          "hex": "E16865"
        },
        {
          "name": "Equator",
          "hex": "E1BC64"
        },
        {
          "name": "Pink Flare",
          "hex": "E1C0C8"
        },
        {
          "name": "Periglacial Blue",
          "hex": "E1E6D6"
        },
        {
          "name": "Kidnapper",
          "hex": "E1EAD4"
        },
        {
          "name": "Tara",
          "hex": "E1F6E8"
        },
        {
          "name": "Mandy",
          "hex": "E25465"
        },
        {
          "name": "Terracotta",
          "hex": "E2725B"
        },
        {
          "name": "Golden Bell",
          "hex": "E28913"
        },
        {
          "name": "Shocking",
          "hex": "E292C0"
        },
        {
          "name": "Dixie",
          "hex": "E29418"
        },
        {
          "name": "Light Orchid",
          "hex": "E29CD2"
        },
        {
          "name": "Snuff",
          "hex": "E2D8ED"
        },
        {
          "name": "Mystic",
          "hex": "E2EBED"
        },
        {
          "name": "Apple Green",
          "hex": "E2F3EC"
        },
        {
          "name": "Razzmatazz",
          "hex": "E30B5C"
        },
        {
          "name": "Alizarin Crimson",
          "hex": "E32636"
        },
        {
          "name": "Cinnabar",
          "hex": "E34234"
        },
        {
          "name": "Cavern Pink",
          "hex": "E3BEBE"
        },
        {
          "name": "Peppermint",
          "hex": "E3F5E1"
        },
        {
          "name": "Mindaro",
          "hex": "E3F988"
        },
        {
          "name": "Deep Blush",
          "hex": "E47698"
        },
        {
          "name": "Gamboge",
          "hex": "E49B0F"
        },
        {
          "name": "Melanie",
          "hex": "E4C2D5"
        },
        {
          "name": "Twilight",
          "hex": "E4CFDE"
        },
        {
          "name": "Bone",
          "hex": "E4D1C0"
        },
        {
          "name": "Sunflower",
          "hex": "E4D422"
        },
        {
          "name": "Grain Brown",
          "hex": "E4D5B7"
        },
        {
          "name": "Zombie",
          "hex": "E4D69B"
        },
        {
          "name": "Frostee",
          "hex": "E4F6E7"
        },
        {
          "name": "Snow Flurry",
          "hex": "E4FFD1"
        },
        {
          "name": "Amaranth",
          "hex": "E52B50"
        },
        {
          "name": "Zest",
          "hex": "E5841B"
        },
        {
          "name": "Dust Storm",
          "hex": "E5CCC9"
        },
        {
          "name": "Stark White",
          "hex": "E5D7BD"
        },
        {
          "name": "Hampton",
          "hex": "E5D8AF"
        },
        {
          "name": "Bon Jour",
          "hex": "E5E0E1"
        },
        {
          "name": "Mercury",
          "hex": "E5E5E5"
        },
        {
          "name": "Polar",
          "hex": "E5F9F6"
        },
        {
          "name": "Trinidad",
          "hex": "E64E03"
        },
        {
          "name": "Gold Sand",
          "hex": "E6BE8A"
        },
        {
          "name": "Cashmere",
          "hex": "E6BEA5"
        },
        {
          "name": "Double Spanish White",
          "hex": "E6D7B9"
        },
        {
          "name": "Satin Linen",
          "hex": "E6E4D4"
        },
        {
          "name": "Harp",
          "hex": "E6F2EA"
        },
        {
          "name": "Off Green",
          "hex": "E6F8F3"
        },
        {
          "name": "Hint of Green",
          "hex": "E6FFE9"
        },
        {
          "name": "Tranquil",
          "hex": "E6FFFF"
        },
        {
          "name": "Mango Tango",
          "hex": "E77200"
        },
        {
          "name": "Christine",
          "hex": "E7730A"
        },
        {
          "name": "Tonys Pink",
          "hex": "E79F8C"
        },
        {
          "name": "Kobi",
          "hex": "E79FC4"
        },
        {
          "name": "Rose Fog",
          "hex": "E7BCB4"
        },
        {
          "name": "Corn",
          "hex": "E7BF05"
        },
        {
          "name": "Putty",
          "hex": "E7CD8C"
        },
        {
          "name": "Gray Nurse",
          "hex": "E7ECE6"
        },
        {
          "name": "Lily White",
          "hex": "E7F8FF"
        },
        {
          "name": "Bubbles",
          "hex": "E7FEFF"
        },
        {
          "name": "Fire Bush",
          "hex": "E89928"
        },
        {
          "name": "Shilo",
          "hex": "E8B9B3"
        },
        {
          "name": "Pearl Bush",
          "hex": "E8E0D5"
        },
        {
          "name": "Green White",
          "hex": "E8EBE0"
        },
        {
          "name": "Chrome White",
          "hex": "E8F1D4"
        },
        {
          "name": "Gin",
          "hex": "E8F2EB"
        },
        {
          "name": "Aqua Squeeze",
          "hex": "E8F5F2"
        },
        {
          "name": "Clementine",
          "hex": "E96E00"
        },
        {
          "name": "Burnt Sienna",
          "hex": "E97451"
        },
        {
          "name": "Tahiti Gold",
          "hex": "E97C07"
        },
        {
          "name": "Oyster Pink",
          "hex": "E9CECD"
        },
        {
          "name": "Confetti",
          "hex": "E9D75A"
        },
        {
          "name": "Ebb",
          "hex": "E9E3E3"
        },
        {
          "name": "Ottoman",
          "hex": "E9F8ED"
        },
        {
          "name": "Clear Day",
          "hex": "E9FFFD"
        },
        {
          "name": "Carissma",
          "hex": "EA88A8"
        },
        {
          "name": "Porsche",
          "hex": "EAAE69"
        },
        {
          "name": "Tulip Tree",
          "hex": "EAB33B"
        },
        {
          "name": "Rob Roy",
          "hex": "EAC674"
        },
        {
          "name": "Raffia",
          "hex": "EADAB8"
        },
        {
          "name": "White Rock",
          "hex": "EAE8D4"
        },
        {
          "name": "Panache",
          "hex": "EAF6EE"
        },
        {
          "name": "Solitude",
          "hex": "EAF6FF"
        },
        {
          "name": "Aqua Spring",
          "hex": "EAF9F5"
        },
        {
          "name": "Dew",
          "hex": "EAFFFE"
        },
        {
          "name": "Apricot",
          "hex": "EB9373"
        },
        {
          "name": "Zinnwaldite",
          "hex": "EBC2AF"
        },
        {
          "name": "Fuel Yellow",
          "hex": "ECA927"
        },
        {
          "name": "Ronchi",
          "hex": "ECC54E"
        },
        {
          "name": "French Lilac",
          "hex": "ECC7EE"
        },
        {
          "name": "Just Right",
          "hex": "ECCDB9"
        },
        {
          "name": "Wild Rice",
          "hex": "ECE090"
        },
        {
          "name": "Fall Green",
          "hex": "ECEBBD"
        },
        {
          "name": "Aths Special",
          "hex": "ECEBCE"
        },
        {
          "name": "Starship",
          "hex": "ECF245"
        },
        {
          "name": "Red Ribbon",
          "hex": "ED0A3F"
        },
        {
          "name": "Tango",
          "hex": "ED7A1C"
        },
        {
          "name": "Carrot Orange",
          "hex": "ED9121"
        },
        {
          "name": "Sea Pink",
          "hex": "ED989E"
        },
        {
          "name": "Tacao",
          "hex": "EDB381"
        },
        {
          "name": "Desert Sand",
          "hex": "EDC9AF"
        },
        {
          "name": "Pancho",
          "hex": "EDCDAB"
        },
        {
          "name": "Chamois",
          "hex": "EDDCB1"
        },
        {
          "name": "Primrose",
          "hex": "EDEA99"
        },
        {
          "name": "Frost",
          "hex": "EDF5DD"
        },
        {
          "name": "Aqua Haze",
          "hex": "EDF5F5"
        },
        {
          "name": "Zumthor",
          "hex": "EDF6FF"
        },
        {
          "name": "Narvik",
          "hex": "EDF9F1"
        },
        {
          "name": "Honeysuckle",
          "hex": "EDFC84"
        },
        {
          "name": "Lavender Magenta",
          "hex": "EE82EE"
        },
        {
          "name": "Beauty Bush",
          "hex": "EEC1BE"
        },
        {
          "name": "Chalky",
          "hex": "EED794"
        },
        {
          "name": "Almond",
          "hex": "EED9C4"
        },
        {
          "name": "Flax",
          "hex": "EEDC82"
        },
        {
          "name": "Bizarre",
          "hex": "EEDEDA"
        },
        {
          "name": "Double Colonial White",
          "hex": "EEE3AD"
        },
        {
          "name": "Cararra",
          "hex": "EEEEE8"
        },
        {
          "name": "Manz",
          "hex": "EEEF78"
        },
        {
          "name": "Tahuna Sands",
          "hex": "EEF0C8"
        },
        {
          "name": "Athens Gray",
          "hex": "EEF0F3"
        },
        {
          "name": "Tusk",
          "hex": "EEF3C3"
        },
        {
          "name": "Loafer",
          "hex": "EEF4DE"
        },
        {
          "name": "Catskill White",
          "hex": "EEF6F7"
        },
        {
          "name": "Twilight Blue",
          "hex": "EEFDFF"
        },
        {
          "name": "Jonquil",
          "hex": "EEFF9A"
        },
        {
          "name": "Rice Flower",
          "hex": "EEFFE2"
        },
        {
          "name": "Jaffa",
          "hex": "EF863F"
        },
        {
          "name": "Gallery",
          "hex": "EFEFEF"
        },
        {
          "name": "Porcelain",
          "hex": "EFF2F3"
        },
        {
          "name": "Mauvelous",
          "hex": "F091A9"
        },
        {
          "name": "Golden Dream",
          "hex": "F0D52D"
        },
        {
          "name": "Golden Sand",
          "hex": "F0DB7D"
        },
        {
          "name": "Buff",
          "hex": "F0DC82"
        },
        {
          "name": "Prim",
          "hex": "F0E2EC"
        },
        {
          "name": "Khaki",
          "hex": "F0E68C"
        },
        {
          "name": "Selago",
          "hex": "F0EEFD"
        },
        {
          "name": "Titan White",
          "hex": "F0EEFF"
        },
        {
          "name": "Alice Blue",
          "hex": "F0F8FF"
        },
        {
          "name": "Feta",
          "hex": "F0FCEA"
        },
        {
          "name": "Gold Drop",
          "hex": "F18200"
        },
        {
          "name": "Wewak",
          "hex": "F19BAB"
        },
        {
          "name": "Sahara Sand",
          "hex": "F1E788"
        },
        {
          "name": "Parchment",
          "hex": "F1E9D2"
        },
        {
          "name": "Blue Chalk",
          "hex": "F1E9FF"
        },
        {
          "name": "Mint Julep",
          "hex": "F1EEC1"
        },
        {
          "name": "Seashell",
          "hex": "F1F1F1"
        },
        {
          "name": "Saltpan",
          "hex": "F1F7F2"
        },
        {
          "name": "Tidal",
          "hex": "F1FFAD"
        },
        {
          "name": "Chiffon",
          "hex": "F1FFC8"
        },
        {
          "name": "Flamingo",
          "hex": "F2552A"
        },
        {
          "name": "Tangerine",
          "hex": "F28500"
        },
        {
          "name": "Mandys Pink",
          "hex": "F2C3B2"
        },
        {
          "name": "Concrete",
          "hex": "F2F2F2"
        },
        {
          "name": "Black Squeeze",
          "hex": "F2FAFA"
        },
        {
          "name": "Pomegranate",
          "hex": "F34723"
        },
        {
          "name": "Buttercup",
          "hex": "F3AD16"
        },
        {
          "name": "New Orleans",
          "hex": "F3D69D"
        },
        {
          "name": "Vanilla Ice",
          "hex": "F3D9DF"
        },
        {
          "name": "Sidecar",
          "hex": "F3E7BB"
        },
        {
          "name": "Dawn Pink",
          "hex": "F3E9E5"
        },
        {
          "name": "Wheatfield",
          "hex": "F3EDCF"
        },
        {
          "name": "Canary",
          "hex": "F3FB62"
        },
        {
          "name": "Orinoco",
          "hex": "F3FBD4"
        },
        {
          "name": "Carla",
          "hex": "F3FFD8"
        },
        {
          "name": "Hollywood Cerise",
          "hex": "F400A1"
        },
        {
          "name": "Sandy brown",
          "hex": "F4A460"
        },
        {
          "name": "Saffron",
          "hex": "F4C430"
        },
        {
          "name": "Ripe Lemon",
          "hex": "F4D81C"
        },
        {
          "name": "Janna",
          "hex": "F4EBD3"
        },
        {
          "name": "Pampas",
          "hex": "F4F2EE"
        },
        {
          "name": "Wild Sand",
          "hex": "F4F4F4"
        },
        {
          "name": "Zircon",
          "hex": "F4F8FF"
        },
        {
          "name": "Froly",
          "hex": "F57584"
        },
        {
          "name": "Cream Can",
          "hex": "F5C85C"
        },
        {
          "name": "Manhattan",
          "hex": "F5C999"
        },
        {
          "name": "Maize",
          "hex": "F5D5A0"
        },
        {
          "name": "Wheat",
          "hex": "F5DEB3"
        },
        {
          "name": "Sandwisp",
          "hex": "F5E7A2"
        },
        {
          "name": "Pot Pourri",
          "hex": "F5E7E2"
        },
        {
          "name": "Albescent White",
          "hex": "F5E9D3"
        },
        {
          "name": "Soft Peach",
          "hex": "F5EDEF"
        },
        {
          "name": "Ecru White",
          "hex": "F5F3E5"
        },
        {
          "name": "Beige",
          "hex": "F5F5DC"
        },
        {
          "name": "Golden Fizz",
          "hex": "F5FB3D"
        },
        {
          "name": "Australian Mint",
          "hex": "F5FFBE"
        },
        {
          "name": "French Rose",
          "hex": "F64A8A"
        },
        {
          "name": "Brilliant Rose",
          "hex": "F653A6"
        },
        {
          "name": "Illusion",
          "hex": "F6A4C9"
        },
        {
          "name": "Merino",
          "hex": "F6F0E6"
        },
        {
          "name": "Black Haze",
          "hex": "F6F7F7"
        },
        {
          "name": "Spring Sun",
          "hex": "F6FFDC"
        },
        {
          "name": "Violet Red",
          "hex": "F7468A"
        },
        {
          "name": "Chilean Fire",
          "hex": "F77703"
        },
        {
          "name": "Persian Pink",
          "hex": "F77FBE"
        },
        {
          "name": "Rajah",
          "hex": "F7B668"
        },
        {
          "name": "Azalea",
          "hex": "F7C8DA"
        },
        {
          "name": "We Peep",
          "hex": "F7DBE6"
        },
        {
          "name": "Quarter Spanish White",
          "hex": "F7F2E1"
        },
        {
          "name": "Whisper",
          "hex": "F7F5FA"
        },
        {
          "name": "Snow Drift",
          "hex": "F7FAF7"
        },
        {
          "name": "Casablanca",
          "hex": "F8B853"
        },
        {
          "name": "Chantilly",
          "hex": "F8C3DF"
        },
        {
          "name": "Cherub",
          "hex": "F8D9E9"
        },
        {
          "name": "Marzipan",
          "hex": "F8DB9D"
        },
        {
          "name": "Energy Yellow",
          "hex": "F8DD5C"
        },
        {
          "name": "Givry",
          "hex": "F8E4BF"
        },
        {
          "name": "White Linen",
          "hex": "F8F0E8"
        },
        {
          "name": "Magnolia",
          "hex": "F8F4FF"
        },
        {
          "name": "Spring Wood",
          "hex": "F8F6F1"
        },
        {
          "name": "Coconut Cream",
          "hex": "F8F7DC"
        },
        {
          "name": "White Lilac",
          "hex": "F8F7FC"
        },
        {
          "name": "Desert Storm",
          "hex": "F8F8F7"
        },
        {
          "name": "Texas",
          "hex": "F8F99C"
        },
        {
          "name": "Corn Field",
          "hex": "F8FACD"
        },
        {
          "name": "Mimosa",
          "hex": "F8FDD3"
        },
        {
          "name": "Carnation",
          "hex": "F95A61"
        },
        {
          "name": "Saffron Mango",
          "hex": "F9BF58"
        },
        {
          "name": "Carousel Pink",
          "hex": "F9E0ED"
        },
        {
          "name": "Dairy Cream",
          "hex": "F9E4BC"
        },
        {
          "name": "Portica",
          "hex": "F9E663"
        },
        {
          "name": "Amour",
          "hex": "F9EAF3"
        },
        {
          "name": "Rum Swizzle",
          "hex": "F9F8E4"
        },
        {
          "name": "Dolly",
          "hex": "F9FF8B"
        },
        {
          "name": "Sugar Cane",
          "hex": "F9FFF6"
        },
        {
          "name": "Ecstasy",
          "hex": "FA7814"
        },
        {
          "name": "Tan Hide",
          "hex": "FA9D5A"
        },
        {
          "name": "Corvette",
          "hex": "FAD3A2"
        },
        {
          "name": "Peach Yellow",
          "hex": "FADFAD"
        },
        {
          "name": "Turbo",
          "hex": "FAE600"
        },
        {
          "name": "Astra",
          "hex": "FAEAB9"
        },
        {
          "name": "Champagne",
          "hex": "FAECCC"
        },
        {
          "name": "Linen",
          "hex": "FAF0E6"
        },
        {
          "name": "Fantasy",
          "hex": "FAF3F0"
        },
        {
          "name": "Citrine White",
          "hex": "FAF7D6"
        },
        {
          "name": "Alabaster",
          "hex": "FAFAFA"
        },
        {
          "name": "Hint of Yellow",
          "hex": "FAFDE4"
        },
        {
          "name": "Milan",
          "hex": "FAFFA4"
        },
        {
          "name": "Brink Pink",
          "hex": "FB607F"
        },
        {
          "name": "Geraldine",
          "hex": "FB8989"
        },
        {
          "name": "Lavender Rose",
          "hex": "FBA0E3"
        },
        {
          "name": "Sea Buckthorn",
          "hex": "FBA129"
        },
        {
          "name": "Sun",
          "hex": "FBAC13"
        },
        {
          "name": "Lavender Pink",
          "hex": "FBAED2"
        },
        {
          "name": "Rose Bud",
          "hex": "FBB2A3"
        },
        {
          "name": "Cupid",
          "hex": "FBBEDA"
        },
        {
          "name": "Classic Rose",
          "hex": "FBCCE7"
        },
        {
          "name": "Apricot Peach",
          "hex": "FBCEB1"
        },
        {
          "name": "Banana Mania",
          "hex": "FBE7B2"
        },
        {
          "name": "Marigold Yellow",
          "hex": "FBE870"
        },
        {
          "name": "Festival",
          "hex": "FBE96C"
        },
        {
          "name": "Sweet Corn",
          "hex": "FBEA8C"
        },
        {
          "name": "Candy Corn",
          "hex": "FBEC5D"
        },
        {
          "name": "Hint of Red",
          "hex": "FBF9F9"
        },
        {
          "name": "Shalimar",
          "hex": "FBFFBA"
        },
        {
          "name": "Shocking Pink",
          "hex": "FC0FC0"
        },
        {
          "name": "Tickle Me Pink",
          "hex": "FC80A5"
        },
        {
          "name": "Tree Poppy",
          "hex": "FC9C1D"
        },
        {
          "name": "Lightning Yellow",
          "hex": "FCC01E"
        },
        {
          "name": "Goldenrod",
          "hex": "FCD667"
        },
        {
          "name": "Candlelight",
          "hex": "FCD917"
        },
        {
          "name": "Cherokee",
          "hex": "FCDA98"
        },
        {
          "name": "Double Pearl Lusta",
          "hex": "FCF4D0"
        },
        {
          "name": "Pearl Lusta",
          "hex": "FCF4DC"
        },
        {
          "name": "Vista White",
          "hex": "FCF8F7"
        },
        {
          "name": "Bianca",
          "hex": "FCFBF3"
        },
        {
          "name": "Moon Glow",
          "hex": "FCFEDA"
        },
        {
          "name": "China Ivory",
          "hex": "FCFFE7"
        },
        {
          "name": "Ceramic",
          "hex": "FCFFF9"
        },
        {
          "name": "Torch Red",
          "hex": "FD0E35"
        },
        {
          "name": "Wild Watermelon",
          "hex": "FD5B78"
        },
        {
          "name": "Crusta",
          "hex": "FD7B33"
        },
        {
          "name": "Sorbus",
          "hex": "FD7C07"
        },
        {
          "name": "Sweet Pink",
          "hex": "FD9FA2"
        },
        {
          "name": "Light Apricot",
          "hex": "FDD5B1"
        },
        {
          "name": "Pig Pink",
          "hex": "FDD7E4"
        },
        {
          "name": "Cinderella",
          "hex": "FDE1DC"
        },
        {
          "name": "Golden Glow",
          "hex": "FDE295"
        },
        {
          "name": "Lemon",
          "hex": "FDE910"
        },
        {
          "name": "Old Lace",
          "hex": "FDF5E6"
        },
        {
          "name": "Half Colonial White",
          "hex": "FDF6D3"
        },
        {
          "name": "Drover",
          "hex": "FDF7AD"
        },
        {
          "name": "Pale Prim",
          "hex": "FDFEB8"
        },
        {
          "name": "Cumulus",
          "hex": "FDFFD5"
        },
        {
          "name": "Persian Rose",
          "hex": "FE28A2"
        },
        {
          "name": "Sunset Orange",
          "hex": "FE4C40"
        },
        {
          "name": "Bittersweet",
          "hex": "FE6F5E"
        },
        {
          "name": "California",
          "hex": "FE9D04"
        },
        {
          "name": "Yellow Sea",
          "hex": "FEA904"
        },
        {
          "name": "Melon",
          "hex": "FEBAAD"
        },
        {
          "name": "Bright Sun",
          "hex": "FED33C"
        },
        {
          "name": "Dandelion",
          "hex": "FED85D"
        },
        {
          "name": "Salomie",
          "hex": "FEDB8D"
        },
        {
          "name": "Cape Honey",
          "hex": "FEE5AC"
        },
        {
          "name": "Remy",
          "hex": "FEEBF3"
        },
        {
          "name": "Oasis",
          "hex": "FEEFCE"
        },
        {
          "name": "Bridesmaid",
          "hex": "FEF0EC"
        },
        {
          "name": "Beeswax",
          "hex": "FEF2C7"
        },
        {
          "name": "Bleach White",
          "hex": "FEF3D8"
        },
        {
          "name": "Pipi",
          "hex": "FEF4CC"
        },
        {
          "name": "Half Spanish White",
          "hex": "FEF4DB"
        },
        {
          "name": "Wisp Pink",
          "hex": "FEF4F8"
        },
        {
          "name": "Provincial Pink",
          "hex": "FEF5F1"
        },
        {
          "name": "Half Dutch White",
          "hex": "FEF7DE"
        },
        {
          "name": "Solitaire",
          "hex": "FEF8E2"
        },
        {
          "name": "White Pointer",
          "hex": "FEF8FF"
        },
        {
          "name": "Off Yellow",
          "hex": "FEF9E3"
        },
        {
          "name": "Orange White",
          "hex": "FEFCED"
        },
        {
          "name": "Red",
          "hex": "FF0000"
        },
        {
          "name": "Rose",
          "hex": "FF007F"
        },
        {
          "name": "Purple Pizzazz",
          "hex": "FF00CC"
        },
        {
          "name": "Magenta / Fuchsia",
          "hex": "FF00FF"
        },
        {
          "name": "Scarlet",
          "hex": "FF2400"
        },
        {
          "name": "Wild Strawberry",
          "hex": "FF3399"
        },
        {
          "name": "Razzle Dazzle Rose",
          "hex": "FF33CC"
        },
        {
          "name": "Radical Red",
          "hex": "FF355E"
        },
        {
          "name": "Red Orange",
          "hex": "FF3F34"
        },
        {
          "name": "Coral Red",
          "hex": "FF4040"
        },
        {
          "name": "Vermilion",
          "hex": "FF4D00"
        },
        {
          "name": "International Orange",
          "hex": "FF4F00"
        },
        {
          "name": "Outrageous Orange",
          "hex": "FF6037"
        },
        {
          "name": "Blaze Orange",
          "hex": "FF6600"
        },
        {
          "name": "Pink Flamingo",
          "hex": "FF66FF"
        },
        {
          "name": "Orange",
          "hex": "FF681F"
        },
        {
          "name": "Hot Pink",
          "hex": "FF69B4"
        },
        {
          "name": "Persimmon",
          "hex": "FF6B53"
        },
        {
          "name": "Blush Pink",
          "hex": "FF6FFF"
        },
        {
          "name": "Burning Orange",
          "hex": "FF7034"
        },
        {
          "name": "Pumpkin",
          "hex": "FF7518"
        },
        {
          "name": "Flamenco",
          "hex": "FF7D07"
        },
        {
          "name": "Flush Orange",
          "hex": "FF7F00"
        },
        {
          "name": "Coral",
          "hex": "FF7F50"
        },
        {
          "name": "Salmon",
          "hex": "FF8C69"
        },
        {
          "name": "Pizazz",
          "hex": "FF9000"
        },
        {
          "name": "West Side",
          "hex": "FF910F"
        },
        {
          "name": "Pink Salmon",
          "hex": "FF91A4"
        },
        {
          "name": "Neon Carrot",
          "hex": "FF9933"
        },
        {
          "name": "Atomic Tangerine",
          "hex": "FF9966"
        },
        {
          "name": "Vivid Tangerine",
          "hex": "FF9980"
        },
        {
          "name": "Sunshade",
          "hex": "FF9E2C"
        },
        {
          "name": "Orange Peel",
          "hex": "FFA000"
        },
        {
          "name": "Mona Lisa",
          "hex": "FFA194"
        },
        {
          "name": "Web Orange",
          "hex": "FFA500"
        },
        {
          "name": "Carnation Pink",
          "hex": "FFA6C9"
        },
        {
          "name": "Hit Pink",
          "hex": "FFAB81"
        },
        {
          "name": "Yellow Orange",
          "hex": "FFAE42"
        },
        {
          "name": "Cornflower Lilac",
          "hex": "FFB0AC"
        },
        {
          "name": "Sundown",
          "hex": "FFB1B3"
        },
        {
          "name": "My Sin",
          "hex": "FFB31F"
        },
        {
          "name": "Texas Rose",
          "hex": "FFB555"
        },
        {
          "name": "Cotton Candy",
          "hex": "FFB7D5"
        },
        {
          "name": "Macaroni and Cheese",
          "hex": "FFB97B"
        },
        {
          "name": "Selective Yellow",
          "hex": "FFBA00"
        },
        {
          "name": "Koromiko",
          "hex": "FFBD5F"
        },
        {
          "name": "Amber",
          "hex": "FFBF00"
        },
        {
          "name": "Wax Flower",
          "hex": "FFC0A8"
        },
        {
          "name": "Pink",
          "hex": "FFC0CB"
        },
        {
          "name": "Your Pink",
          "hex": "FFC3C0"
        },
        {
          "name": "Supernova",
          "hex": "FFC901"
        },
        {
          "name": "Flesh",
          "hex": "FFCBA4"
        },
        {
          "name": "Sunglow",
          "hex": "FFCC33"
        },
        {
          "name": "Golden Tainoi",
          "hex": "FFCC5C"
        },
        {
          "name": "Peach Orange",
          "hex": "FFCC99"
        },
        {
          "name": "Chardonnay",
          "hex": "FFCD8C"
        },
        {
          "name": "Pastel Pink",
          "hex": "FFD1DC"
        },
        {
          "name": "Romantic",
          "hex": "FFD2B7"
        },
        {
          "name": "Grandis",
          "hex": "FFD38C"
        },
        {
          "name": "Gold",
          "hex": "FFD700"
        },
        {
          "name": "School bus Yellow",
          "hex": "FFD800"
        },
        {
          "name": "Cosmos",
          "hex": "FFD8D9"
        },
        {
          "name": "Mustard",
          "hex": "FFDB58"
        },
        {
          "name": "Peach Schnapps",
          "hex": "FFDCD6"
        },
        {
          "name": "Caramel",
          "hex": "FFDDAF"
        },
        {
          "name": "Tuft Bush",
          "hex": "FFDDCD"
        },
        {
          "name": "Watusi",
          "hex": "FFDDCF"
        },
        {
          "name": "Pink Lace",
          "hex": "FFDDF4"
        },
        {
          "name": "Navajo White",
          "hex": "FFDEAD"
        },
        {
          "name": "Frangipani",
          "hex": "FFDEB3"
        },
        {
          "name": "Pippin",
          "hex": "FFE1DF"
        },
        {
          "name": "Pale Rose",
          "hex": "FFE1F2"
        },
        {
          "name": "Negroni",
          "hex": "FFE2C5"
        },
        {
          "name": "Cream Brulee",
          "hex": "FFE5A0"
        },
        {
          "name": "Peach",
          "hex": "FFE5B4"
        },
        {
          "name": "Tequila",
          "hex": "FFE6C7"
        },
        {
          "name": "Kournikova",
          "hex": "FFE772"
        },
        {
          "name": "Sandy Beach",
          "hex": "FFEAC8"
        },
        {
          "name": "Karry",
          "hex": "FFEAD4"
        },
        {
          "name": "Broom",
          "hex": "FFEC13"
        },
        {
          "name": "Colonial White",
          "hex": "FFEDBC"
        },
        {
          "name": "Derby",
          "hex": "FFEED8"
        },
        {
          "name": "Vis Vis",
          "hex": "FFEFA1"
        },
        {
          "name": "Egg White",
          "hex": "FFEFC1"
        },
        {
          "name": "Papaya Whip",
          "hex": "FFEFD5"
        },
        {
          "name": "Fair Pink",
          "hex": "FFEFEC"
        },
        {
          "name": "Peach Cream",
          "hex": "FFF0DB"
        },
        {
          "name": "Lavender blush",
          "hex": "FFF0F5"
        },
        {
          "name": "Gorse",
          "hex": "FFF14F"
        },
        {
          "name": "Buttermilk",
          "hex": "FFF1B5"
        },
        {
          "name": "Pink Lady",
          "hex": "FFF1D8"
        },
        {
          "name": "Forget Me Not",
          "hex": "FFF1EE"
        },
        {
          "name": "Tutu",
          "hex": "FFF1F9"
        },
        {
          "name": "Picasso",
          "hex": "FFF39D"
        },
        {
          "name": "Chardon",
          "hex": "FFF3F1"
        },
        {
          "name": "Paris Daisy",
          "hex": "FFF46E"
        },
        {
          "name": "Barley White",
          "hex": "FFF4CE"
        },
        {
          "name": "Egg Sour",
          "hex": "FFF4DD"
        },
        {
          "name": "Sazerac",
          "hex": "FFF4E0"
        },
        {
          "name": "Serenade",
          "hex": "FFF4E8"
        },
        {
          "name": "Chablis",
          "hex": "FFF4F3"
        },
        {
          "name": "Seashell Peach",
          "hex": "FFF5EE"
        },
        {
          "name": "Sauvignon",
          "hex": "FFF5F3"
        },
        {
          "name": "Milk Punch",
          "hex": "FFF6D4"
        },
        {
          "name": "Varden",
          "hex": "FFF6DF"
        },
        {
          "name": "Rose White",
          "hex": "FFF6F5"
        },
        {
          "name": "Baja White",
          "hex": "FFF8D1"
        },
        {
          "name": "Gin Fizz",
          "hex": "FFF9E2"
        },
        {
          "name": "Early Dawn",
          "hex": "FFF9E6"
        },
        {
          "name": "Lemon Chiffon",
          "hex": "FFFACD"
        },
        {
          "name": "Bridal Heath",
          "hex": "FFFAF4"
        },
        {
          "name": "Scotch Mist",
          "hex": "FFFBDC"
        },
        {
          "name": "Soapstone",
          "hex": "FFFBF9"
        },
        {
          "name": "Witch Haze",
          "hex": "FFFC99"
        },
        {
          "name": "Buttery White",
          "hex": "FFFCEA"
        },
        {
          "name": "Island Spice",
          "hex": "FFFCEE"
        },
        {
          "name": "Cream",
          "hex": "FFFDD0"
        },
        {
          "name": "Chilean Heath",
          "hex": "FFFDE6"
        },
        {
          "name": "Travertine",
          "hex": "FFFDE8"
        },
        {
          "name": "Orchid White",
          "hex": "FFFDF3"
        },
        {
          "name": "Quarter Pearl Lusta",
          "hex": "FFFDF4"
        },
        {
          "name": "Half and Half",
          "hex": "FFFEE1"
        },
        {
          "name": "Apricot White",
          "hex": "FFFEEC"
        },
        {
          "name": "Rice Cake",
          "hex": "FFFEF0"
        },
        {
          "name": "Black White",
          "hex": "FFFEF6"
        },
        {
          "name": "Romance",
          "hex": "FFFEFD"
        },
        {
          "name": "Yellow",
          "hex": "FFFF00"
        },
        {
          "name": "Laser Lemon",
          "hex": "FFFF66"
        },
        {
          "name": "Pale Canary",
          "hex": "FFFF99"
        },
        {
          "name": "Portafino",
          "hex": "FFFFB4"
        },
        {
          "name": "Ivory",
          "hex": "FFFFF0"
        },
        {
          "name": "White",
          "hex": "FFFFFF"
        }
      ];
    }
  });

  // node_modules/color-namer-sdk/lib/colors/pantone.js
  var require_pantone = __commonJS({
    "node_modules/color-namer-sdk/lib/colors/pantone.js"(exports, module) {
      module.exports = [{
        "name": "Mahogany",
        "hex": "#CD4A4A"
      }, {
        "name": "Fuzzy Wuzzy Brown",
        "hex": "#CC6666"
      }, {
        "name": "Chestnut",
        "hex": "#BC5D58"
      }, {
        "name": "Red Orange",
        "hex": "#FF5349"
      }, {
        "name": "Sunset Orange",
        "hex": "#FD5E53"
      }, {
        "name": "Bittersweet",
        "hex": "#FD7C6E"
      }, {
        "name": "Melon",
        "hex": "#FDBCB4"
      }, {
        "name": "Outrageous Orange",
        "hex": "#FF6E4A"
      }, {
        "name": "Vivid Tangerine",
        "hex": "#FFA089"
      }, {
        "name": "Burnt Sienna",
        "hex": "#EA7E5D"
      }, {
        "name": "Brown",
        "hex": "#B4674D"
      }, {
        "name": "Sepia",
        "hex": "#A5694F"
      }, {
        "name": "Orange",
        "hex": "#FF7538"
      }, {
        "name": "Burnt Orange",
        "hex": "#FF7F49"
      }, {
        "name": "Copper",
        "hex": "#DD9475"
      }, {
        "name": "Mango Tango",
        "hex": "#FF8243"
      }, {
        "name": "Atomic Tangerine",
        "hex": "#FFA474"
      }, {
        "name": "Beaver",
        "hex": "#9F8170"
      }, {
        "name": "Antique Brass",
        "hex": "#CD9575"
      }, {
        "name": "Desert Sand",
        "hex": "#EFCDB8"
      }, {
        "name": "Raw Sienna",
        "hex": "#D68A59"
      }, {
        "name": "Tumbleweed",
        "hex": "#DEAA88"
      }, {
        "name": "Tan",
        "hex": "#FAA76C"
      }, {
        "name": "Peach",
        "hex": "#FFCFAB"
      }, {
        "name": "Macaroni and Cheese",
        "hex": "#FFBD88"
      }, {
        "name": "Apricot",
        "hex": "#FDD9B5"
      }, {
        "name": "Neon Carrot",
        "hex": "#FFA343"
      }, {
        "name": "Almond",
        "hex": "#EFDBC5"
      }, {
        "name": "Yellow Orange",
        "hex": "#FFB653"
      }, {
        "name": "Gold",
        "hex": "#E7C697"
      }, {
        "name": "Shadow",
        "hex": "#8A795D"
      }, {
        "name": "Banana Mania",
        "hex": "#FAE7B5"
      }, {
        "name": "Sunglow",
        "hex": "#FFCF48"
      }, {
        "name": "Goldenrod",
        "hex": "#FCD975"
      }, {
        "name": "Dandelion",
        "hex": "#FDDB6D"
      }, {
        "name": "Yellow",
        "hex": "#FCE883"
      }, {
        "name": "Green Yellow",
        "hex": "#F0E891"
      }, {
        "name": "Spring Green",
        "hex": "#ECEABE"
      }, {
        "name": "Olive Green",
        "hex": "#BAB86C"
      }, {
        "name": "Laser Lemon",
        "hex": "#FDFC74"
      }, {
        "name": "Unmellow Yellow",
        "hex": "#FDFC74"
      }, {
        "name": "Canary",
        "hex": "#FFFF99"
      }, {
        "name": "Yellow Green",
        "hex": "#C5E384"
      }, {
        "name": "Inch Worm",
        "hex": "#B2EC5D"
      }, {
        "name": "Asparagus",
        "hex": "#87A96B"
      }, {
        "name": "Granny Smith Apple",
        "hex": "#A8E4A0"
      }, {
        "name": "Electric Lime",
        "hex": "#1DF914"
      }, {
        "name": "Screamin Green",
        "hex": "#76FF7A"
      }, {
        "name": "Fern",
        "hex": "#71BC78"
      }, {
        "name": "Forest Green",
        "hex": "#6DAE81"
      }, {
        "name": "Sea Green",
        "hex": "#9FE2BF"
      }, {
        "name": "Green",
        "hex": "#1CAC78"
      }, {
        "name": "Mountain Meadow",
        "hex": "#30BA8F"
      }, {
        "name": "Shamrock",
        "hex": "#45CEA2"
      }, {
        "name": "Jungle Green",
        "hex": "#3BB08F"
      }, {
        "name": "Caribbean Green",
        "hex": "#1CD3A2"
      }, {
        "name": "Tropical Rain Forest",
        "hex": "#17806D"
      }, {
        "name": "Pine Green",
        "hex": "#158078"
      }, {
        "name": "Robin Egg Blue",
        "hex": "#1FCECB"
      }, {
        "name": "Aquamarine",
        "hex": "#78DBE2"
      }, {
        "name": "Turquoise Blue",
        "hex": "#77DDE7"
      }, {
        "name": "Sky Blue",
        "hex": "#80DAEB"
      }, {
        "name": "Outer Space",
        "hex": "#414A4C"
      }, {
        "name": "Blue Green",
        "hex": "#199EBD"
      }, {
        "name": "Pacific Blue",
        "hex": "#1CA9C9"
      }, {
        "name": "Cerulean",
        "hex": "#1DACD6"
      }, {
        "name": "Cornflower",
        "hex": "#9ACEEB"
      }, {
        "name": "Midnight Blue",
        "hex": "#1A4876"
      }, {
        "name": "Navy Blue",
        "hex": "#1974D2"
      }, {
        "name": "Denim",
        "hex": "#2B6CC4"
      }, {
        "name": "Blue",
        "hex": "#1F75FE"
      }, {
        "name": "Periwinkle",
        "hex": "#C5D0E6"
      }, {
        "name": "Cadet Blue",
        "hex": "#B0B7C6"
      }, {
        "name": "Indigo",
        "hex": "#5D76CB"
      }, {
        "name": "Wild Blue Yonder",
        "hex": "#A2ADD0"
      }, {
        "name": "Manatee",
        "hex": "#979AAA"
      }, {
        "name": "Blue Bell",
        "hex": "#ADADD6"
      }, {
        "name": "Blue Violet",
        "hex": "#7366BD"
      }, {
        "name": "Purple Heart",
        "hex": "#7442C8"
      }, {
        "name": "Royal Purple",
        "hex": "#7851A9"
      }, {
        "name": "Purple Mountains\u2019 Majesty",
        "hex": "#9D81BA"
      }, {
        "name": "Violet (Purple)",
        "hex": "#926EAE"
      }, {
        "name": "Wisteria",
        "hex": "#CDA4DE"
      }, {
        "name": "Vivid Violet",
        "hex": "#8F509D"
      }, {
        "name": "Fuchsia",
        "hex": "#C364C5"
      }, {
        "name": "Shocking Pink",
        "hex": "#FB7EFD"
      }, {
        "name": "Pink Flamingo",
        "hex": "#FC74FD"
      }, {
        "name": "Plum",
        "hex": "#8E4585"
      }, {
        "name": "Hot Magenta",
        "hex": "#FF1DCE"
      }, {
        "name": "Purple Pizzazz",
        "hex": "#FF1DCE"
      }, {
        "name": "Razzle Dazzle Rose",
        "hex": "#FF48D0"
      }, {
        "name": "Orchid",
        "hex": "#E6A8D7"
      }, {
        "name": "Red Violet",
        "hex": "#C0448F"
      }, {
        "name": "Eggplant",
        "hex": "#6E5160"
      }, {
        "name": "Cerise",
        "hex": "#DD4492"
      }, {
        "name": "Wild Strawberry",
        "hex": "#FF43A4"
      }, {
        "name": "Magenta",
        "hex": "#F664AF"
      }, {
        "name": "Lavender",
        "hex": "#FCB4D5"
      }, {
        "name": "Cotton Candy",
        "hex": "#FFBCD9"
      }, {
        "name": "Violet Red",
        "hex": "#F75394"
      }, {
        "name": "Carnation Pink",
        "hex": "#FFAACC"
      }, {
        "name": "Razzmatazz",
        "hex": "#E3256B"
      }, {
        "name": "Piggy Pink",
        "hex": "#FDD7E4"
      }, {
        "name": "Jazzberry Jam",
        "hex": "#CA3767"
      }, {
        "name": "Blush",
        "hex": "#DE5D83"
      }, {
        "name": "Tickle Me Pink",
        "hex": "#FC89AC"
      }, {
        "name": "Pink Sherbet",
        "hex": "#F780A1"
      }, {
        "name": "Maroon",
        "hex": "#C8385A"
      }, {
        "name": "Red",
        "hex": "#EE204D"
      }, {
        "name": "Radical Red",
        "hex": "#FF496C"
      }, {
        "name": "Mauvelous",
        "hex": "#EF98AA"
      }, {
        "name": "Wild Watermelon",
        "hex": "#FC6C85"
      }, {
        "name": "Scarlet",
        "hex": "#FC2847"
      }, {
        "name": "Salmon",
        "hex": "#FF9BAA"
      }, {
        "name": "Brick Red",
        "hex": "#CB4154"
      }, {
        "name": "White",
        "hex": "#EDEDED"
      }, {
        "name": "Timberwolf",
        "hex": "#DBD7D2"
      }, {
        "name": "Silver",
        "hex": "#CDC5C2"
      }, {
        "name": "Gray",
        "hex": "#95918C"
      }, {
        "name": "Black",
        "hex": "#232323"
      }];
    }
  });

  // node_modules/color-namer-sdk/lib/colors/roygbiv.js
  var require_roygbiv = __commonJS({
    "node_modules/color-namer-sdk/lib/colors/roygbiv.js"(exports, module) {
      module.exports = [
        { name: "red", hex: "#FF0000" },
        { name: "orange", hex: "#FFA500" },
        { name: "yellow", hex: "#FFFF00" },
        { name: "green", hex: "#008000" },
        { name: "blue", hex: "#0000FF" },
        { name: "indigo", hex: "#4B0082" },
        { name: "violet", hex: "#EE82EE" }
      ];
    }
  });

  // node_modules/color-namer-sdk/lib/colors/x11.js
  var require_x11 = __commonJS({
    "node_modules/color-namer-sdk/lib/colors/x11.js"(exports, module) {
      module.exports = [{
        name: "indigo",
        hex: "#4b0082"
      }, {
        name: "gold",
        hex: "#ffd700"
      }, {
        name: "hotpink",
        hex: "#ff69b4"
      }, {
        name: "firebrick",
        hex: "#b22222"
      }, {
        name: "indianred",
        hex: "#cd5c5c"
      }, {
        name: "yellow",
        hex: "#ffff00"
      }, {
        name: "mistyrose",
        hex: "#ffe4e1"
      }, {
        name: "darkolivegreen",
        hex: "#556b2f"
      }, {
        name: "olive",
        hex: "#808000"
      }, {
        name: "darkseagreen",
        hex: "#8fbc8f"
      }, {
        name: "pink",
        hex: "#ffc0cb"
      }, {
        name: "tomato",
        hex: "#ff6347"
      }, {
        name: "lightcoral",
        hex: "#f08080"
      }, {
        name: "orangered",
        hex: "#ff4500"
      }, {
        name: "navajowhite",
        hex: "#ffdead"
      }, {
        name: "lime",
        hex: "#00ff00"
      }, {
        name: "palegreen",
        hex: "#98fb98"
      }, {
        name: "darkslategrey",
        hex: "#2f4f4f"
      }, {
        name: "greenyellow",
        hex: "#adff2f"
      }, {
        name: "burlywood",
        hex: "#deb887"
      }, {
        name: "seashell",
        hex: "#fff5ee"
      }, {
        name: "mediumspringgreen",
        hex: "#00fa9a"
      }, {
        name: "fuchsia",
        hex: "#ff00ff"
      }, {
        name: "papayawhip",
        hex: "#ffefd5"
      }, {
        name: "blanchedalmond",
        hex: "#ffebcd"
      }, {
        name: "chartreuse",
        hex: "#7fff00"
      }, {
        name: "dimgray",
        hex: "#696969"
      }, {
        name: "black",
        hex: "#000000"
      }, {
        name: "peachpuff",
        hex: "#ffdab9"
      }, {
        name: "springgreen",
        hex: "#00ff7f"
      }, {
        name: "aquamarine",
        hex: "#7fffd4"
      }, {
        name: "white",
        hex: "#ffffff"
      }, {
        name: "orange",
        hex: "#ffa500"
      }, {
        name: "lightsalmon",
        hex: "#ffa07a"
      }, {
        name: "darkslategray",
        hex: "#2f4f4f"
      }, {
        name: "brown",
        hex: "#a52a2a"
      }, {
        name: "ivory",
        hex: "#fffff0"
      }, {
        name: "dodgerblue",
        hex: "#1e90ff"
      }, {
        name: "peru",
        hex: "#cd853f"
      }, {
        name: "lawngreen",
        hex: "#7cfc00"
      }, {
        name: "chocolate",
        hex: "#d2691e"
      }, {
        name: "crimson",
        hex: "#dc143c"
      }, {
        name: "forestgreen",
        hex: "#228b22"
      }, {
        name: "darkgrey",
        hex: "#a9a9a9"
      }, {
        name: "lightseagreen",
        hex: "#20b2aa"
      }, {
        name: "cyan",
        hex: "#00ffff"
      }, {
        name: "mintcream",
        hex: "#f5fffa"
      }, {
        name: "silver",
        hex: "#c0c0c0"
      }, {
        name: "antiquewhite",
        hex: "#faebd7"
      }, {
        name: "mediumorchid",
        hex: "#ba55d3"
      }, {
        name: "skyblue",
        hex: "#87ceeb"
      }, {
        name: "gray",
        hex: "#808080"
      }, {
        name: "darkturquoise",
        hex: "#00ced1"
      }, {
        name: "goldenrod",
        hex: "#daa520"
      }, {
        name: "darkgreen",
        hex: "#006400"
      }, {
        name: "floralwhite",
        hex: "#fffaf0"
      }, {
        name: "darkviolet",
        hex: "#9400d3"
      }, {
        name: "darkgray",
        hex: "#a9a9a9"
      }, {
        name: "moccasin",
        hex: "#ffe4b5"
      }, {
        name: "saddlebrown",
        hex: "#8b4513"
      }, {
        name: "grey",
        hex: "#808080"
      }, {
        name: "darkslateblue",
        hex: "#483d8b"
      }, {
        name: "lightskyblue",
        hex: "#87cefa"
      }, {
        name: "lightpink",
        hex: "#ffb6c1"
      }, {
        name: "mediumvioletred",
        hex: "#c71585"
      }, {
        name: "slategrey",
        hex: "#708090"
      }, {
        name: "red",
        hex: "#ff0000"
      }, {
        name: "deeppink",
        hex: "#ff1493"
      }, {
        name: "limegreen",
        hex: "#32cd32"
      }, {
        name: "darkmagenta",
        hex: "#8b008b"
      }, {
        name: "palegoldenrod",
        hex: "#eee8aa"
      }, {
        name: "plum",
        hex: "#dda0dd"
      }, {
        name: "turquoise",
        hex: "#40e0d0"
      }, {
        name: "lightgrey",
        hex: "#d3d3d3"
      }, {
        name: "lightgoldenrodyellow",
        hex: "#fafad2"
      }, {
        name: "darkgoldenrod",
        hex: "#b8860b"
      }, {
        name: "lavender",
        hex: "#e6e6fa"
      }, {
        name: "maroon",
        hex: "#800000"
      }, {
        name: "yellowgreen",
        hex: "#9acd32"
      }, {
        name: "sandybrown",
        hex: "#f4a460"
      }, {
        name: "thistle",
        hex: "#d8bfd8"
      }, {
        name: "violet",
        hex: "#ee82ee"
      }, {
        name: "navy",
        hex: "#000080"
      }, {
        name: "magenta",
        hex: "#ff00ff"
      }, {
        name: "dimgrey",
        hex: "#696969"
      }, {
        name: "tan",
        hex: "#d2b48c"
      }, {
        name: "rosybrown",
        hex: "#bc8f8f"
      }, {
        name: "olivedrab",
        hex: "#6b8e23"
      }, {
        name: "blue",
        hex: "#0000ff"
      }, {
        name: "lightblue",
        hex: "#add8e6"
      }, {
        name: "ghostwhite",
        hex: "#f8f8ff"
      }, {
        name: "honeydew",
        hex: "#f0fff0"
      }, {
        name: "cornflowerblue",
        hex: "#6495ed"
      }, {
        name: "slateblue",
        hex: "#6a5acd"
      }, {
        name: "linen",
        hex: "#faf0e6"
      }, {
        name: "darkblue",
        hex: "#00008b"
      }, {
        name: "powderblue",
        hex: "#b0e0e6"
      }, {
        name: "seagreen",
        hex: "#2e8b57"
      }, {
        name: "darkkhaki",
        hex: "#bdb76b"
      }, {
        name: "snow",
        hex: "#fffafa"
      }, {
        name: "sienna",
        hex: "#a0522d"
      }, {
        name: "mediumblue",
        hex: "#0000cd"
      }, {
        name: "royalblue",
        hex: "#4169e1"
      }, {
        name: "lightcyan",
        hex: "#e0ffff"
      }, {
        name: "green",
        hex: "#008000"
      }, {
        name: "mediumpurple",
        hex: "#9370db"
      }, {
        name: "midnightblue",
        hex: "#191970"
      }, {
        name: "cornsilk",
        hex: "#fff8dc"
      }, {
        name: "paleturquoise",
        hex: "#afeeee"
      }, {
        name: "bisque",
        hex: "#ffe4c4"
      }, {
        name: "slategray",
        hex: "#708090"
      }, {
        name: "darkcyan",
        hex: "#008b8b"
      }, {
        name: "khaki",
        hex: "#f0e68c"
      }, {
        name: "wheat",
        hex: "#f5deb3"
      }, {
        name: "teal",
        hex: "#008080"
      }, {
        name: "darkorchid",
        hex: "#9932cc"
      }, {
        name: "deepskyblue",
        hex: "#00bfff"
      }, {
        name: "salmon",
        hex: "#fa8072"
      }, {
        name: "darkred",
        hex: "#8b0000"
      }, {
        name: "steelblue",
        hex: "#4682b4"
      }, {
        name: "palevioletred",
        hex: "#db7093"
      }, {
        name: "lightslategray",
        hex: "#778899"
      }, {
        name: "aliceblue",
        hex: "#f0f8ff"
      }, {
        name: "lightslategrey",
        hex: "#778899"
      }, {
        name: "lightgreen",
        hex: "#90ee90"
      }, {
        name: "orchid",
        hex: "#da70d6"
      }, {
        name: "gainsboro",
        hex: "#dcdcdc"
      }, {
        name: "mediumseagreen",
        hex: "#3cb371"
      }, {
        name: "lightgray",
        hex: "#d3d3d3"
      }, {
        name: "mediumturquoise",
        hex: "#48d1cc"
      }, {
        name: "lemonchiffon",
        hex: "#fffacd"
      }, {
        name: "cadetblue",
        hex: "#5f9ea0"
      }, {
        name: "lightyellow",
        hex: "#ffffe0"
      }, {
        name: "lavenderblush",
        hex: "#fff0f5"
      }, {
        name: "coral",
        hex: "#ff7f50"
      }, {
        name: "purple",
        hex: "#800080"
      }, {
        name: "aqua",
        hex: "#00ffff"
      }, {
        name: "whitesmoke",
        hex: "#f5f5f5"
      }, {
        name: "mediumslateblue",
        hex: "#7b68ee"
      }, {
        name: "darkorange",
        hex: "#ff8c00"
      }, {
        name: "mediumaquamarine",
        hex: "#66cdaa"
      }, {
        name: "darksalmon",
        hex: "#e9967a"
      }, {
        name: "beige",
        hex: "#f5f5dc"
      }, {
        name: "blueviolet",
        hex: "#8a2be2"
      }, {
        name: "azure",
        hex: "#f0ffff"
      }, {
        name: "lightsteelblue",
        hex: "#b0c4de"
      }, {
        name: "oldlace",
        hex: "#fdf5e6"
      }];
    }
  });

  // node_modules/color-namer-sdk/index.js
  var require_color_namer_sdk = __commonJS({
    "node_modules/color-namer-sdk/index.js"(exports, module) {
      "use strict";
      var chroma = require_chroma();
      var WeakMap2 = require_es6_weak_map();
      var lists = {
        basic: require_basic(),
        html: require_html(),
        ntc: require_ntc(),
        pantone: require_pantone(),
        roygbiv: require_roygbiv(),
        x11: require_x11()
      };
      var cache = new WeakMap2();
      var namer2 = module.exports = function(color, options) {
        options = options || {};
        var cacheKey = { color, options };
        if (cache.has(cacheKey)) {
          return cache.get(cacheKey);
        }
        var deltaE = String(options.distance).toLowerCase() === "deltae";
        color = chroma(color);
        var results = {};
        for (var key in lists) {
          if (options.pick && options.pick.indexOf(key) === -1) {
            continue;
          }
          if (options.omit && options.omit.indexOf(key) !== -1) {
            continue;
          }
          results[key] = lists[key].map(function(name) {
            name.distance = deltaE ? chroma.deltaE(color, chroma(name.hex)) : chroma.distance(color, chroma(name.hex));
            return name;
          }).sort(function(a2, b2) {
            return a2.distance - b2.distance;
          });
        }
        cache.set(cacheKey, results);
        return results;
      };
      namer2.chroma = chroma;
      namer2.lists = lists;
    }
  });

  // node_modules/prettysize/index.js
  var require_prettysize = __commonJS({
    "node_modules/prettysize/index.js"(exports, module) {
      "use strict";
      var sizes = [
        "Bytes",
        "kB",
        "MB",
        "GB",
        "TB",
        "PB",
        "EB"
      ];
      module.exports = function(size, nospace, one, places, numOnly) {
        if (typeof nospace === "object") {
          var opts = nospace;
          nospace = opts.nospace;
          one = opts.one;
          places = opts.places || 1;
          numOnly = opts.numOnly;
        } else {
          places = places || 1;
        }
        var mysize;
        for (var id = 0; id < sizes.length; ++id) {
          var unit = sizes[id];
          if (one) {
            unit = unit.slice(0, 1);
          }
          var s2 = Math.pow(1024, id);
          var fixed;
          if (size >= s2) {
            fixed = String((size / s2).toFixed(places));
            if (fixed.indexOf(".0") === fixed.length - 2) {
              fixed = fixed.slice(0, -2);
            }
            mysize = fixed + (nospace ? "" : " ") + unit;
          }
        }
        if (!mysize) {
          var _unit = one ? sizes[0].slice(0, 1) : sizes[0];
          mysize = "0" + (nospace ? "" : " ") + _unit;
        }
        if (numOnly) {
          mysize = Number.parseFloat(mysize);
        }
        return mysize;
      };
    }
  });

  // src/client/index.tsx
  var import_react27 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // src/client/App.tsx
  var import_react26 = __toESM(require_react());

  // src/shared/audioProcessor.ts
  var import_lodash = __toESM(require_lodash());

  // src/shared/logger.ts
  var import_moment = __toESM(require_moment());
  var import_chalk = __toESM(require_source());
  var { white, yellow, red } = import_chalk.default;
  var nextFunction;
  var Logger = class {
    static getTime() {
      const date = import_moment.default.utc().toDate();
      const text = (0, import_moment.default)(date).format("MMMM Do YYYY, HH:mm:ss");
      return text;
    }
    static debug(message, ...optionalParams) {
      if (false)
        return;
      const text = this.getTime();
      const args = [yellow(`${text}`), white("[debug]"), message, ...optionalParams].filter((a2) => a2);
      if (nextFunction) {
        nextFunction.apply(null, ["debug", message, ...optionalParams]);
      }
      console.debug.apply(null, args);
    }
    static log(message, ...optionalParams) {
      if (false)
        return;
      const text = this.getTime();
      const args = [yellow(`${text}`), white("[log]"), message, ...optionalParams].filter((a2) => a2);
      if (nextFunction) {
        nextFunction.apply(null, ["log", message, ...optionalParams]);
      }
      console.log.apply(null, args);
    }
    static info(message, ...optionalParams) {
      const text = this.getTime();
      const args = [yellow(`${text}`), yellow("[INFO]"), message, ...optionalParams].filter((a2) => a2);
      if (nextFunction) {
        nextFunction.apply(null, ["info", message, ...optionalParams]);
      }
      console.info.apply(null, args);
    }
    static warn(message, ...optionalParams) {
      const text = this.getTime();
      const args = [yellow(`${text}`), red("[WARN]"), message, ...optionalParams].filter((a2) => a2);
      if (nextFunction) {
        nextFunction.apply(null, ["warn", message, ...optionalParams]);
      }
      console.warn.apply(null, args);
    }
    static error(message, ...optionalParams) {
      const text = this.getTime();
      const args = [yellow(`${text}`), red("[ERROR]"), message, ...optionalParams].filter((a2) => a2);
      if (nextFunction) {
        nextFunction.apply(null, ["error", message, ...optionalParams]);
      }
      console.error.apply(null, [...args, new Error().stack]);
    }
    static fatal(message, ...optionalParams) {
      const text = this.getTime();
      const args = [yellow(`${text}`), red("[FATAL]"), message, ...optionalParams].filter((a2) => a2);
      if (nextFunction) {
        nextFunction.apply(null, ["fatal", message, ...optionalParams]);
      }
      console.error.apply(null, [...args, new Error().stack]);
    }
    static setNext(next) {
      nextFunction = next;
    }
  };

  // src/shared/audioProcessor.ts
  var AudioProcessor = class {
    constructor(smoothingSize = 3) {
      this.smoothingSize = smoothingSize;
      this.Int16Array = new Int16Array(128);
      this.leftSpeaker = new Int16Array(128);
      this.rightSpeaker = new Int16Array(128);
      this.merged = new Int16Array(128);
      this.smooth = [];
      this.rgbProcessorMax = 150;
      this.amplify = false;
      this.maxValue = 32767;
    }
    pipe(arrayBuffer) {
      if (arrayBuffer.length !== this.Int16Array.length) {
        const originalArray = this.Int16Array;
        this.Int16Array = new Int16Array(arrayBuffer.length);
        const half = Math.round(arrayBuffer.length * 0.5);
        this.leftSpeaker = new Int16Array(half);
        this.rightSpeaker = new Int16Array(half);
        this.merged = new Int16Array(half);
        Logger.debug(`Array buffer has been resized ${this.Int16Array.length}`);
        this.smooth.length = 0;
        for (let i2 = 0; i2 < this.Int16Array.length; i2++) {
          this.Int16Array[i2] = originalArray[i2] || 0;
        }
      }
      this.addNewValues(arrayBuffer);
    }
    get arrayBuffer() {
      return this.Int16Array;
    }
    get leftBuffer() {
      return this.leftSpeaker;
    }
    get rightBuffer() {
      return this.rightSpeaker;
    }
    get mergedBuffer() {
      return this.merged;
    }
    get rgbBuffer() {
      const array = this.merged;
      const len = this.rgbProcessorMax > this.merged.length ? this.merged.length : this.rgbProcessorMax;
      const buffer = new Int16Array(len);
      for (let i2 = 0; i2 < len; i2++) {
        buffer[i2] = array[i2];
      }
      return buffer;
    }
    getFrequency(arrayBuffer) {
      arrayBuffer = arrayBuffer ? arrayBuffer : this.arrayBuffer;
      const len = arrayBuffer.length;
      let last = arrayBuffer[0];
      let oscillations = 0;
      let seekingHigh = false;
      for (let i2 = 1; i2 < len; i2++) {
        const value = arrayBuffer[i2];
        if (value > last && value > 0) {
          if (!seekingHigh) {
            oscillations++;
          }
          seekingHigh = true;
        } else if (value < last && value < 0) {
          seekingHigh = false;
        }
        last = value;
      }
      const magicNumber = 23;
      return Math.round(oscillations * magicNumber);
    }
    getRgbColor() {
      const data = this.rgbBuffer;
      const chuckLength = data.length / 3;
      const arrayLike = [...this.rgbBuffer].map((e2) => Math.abs(e2));
      const max = Math.max.apply(null, arrayLike);
      const min = Math.min.apply(null, arrayLike);
      let minIndex = arrayLike.indexOf(min);
      let maxIndex = arrayLike.indexOf(max);
      if (minIndex > maxIndex) {
        const temp = maxIndex;
        maxIndex = minIndex;
        minIndex = temp;
      }
      const distance = maxIndex - minIndex;
      const RGB_MAX = 255;
      const redRaw = [0, 0];
      const greenRaw = [0, 0];
      const blueRaw = [0, 0];
      for (let i2 = 0; i2 < arrayLike.length; i2++) {
        const value = data[i2];
        const setRed = i2 < chuckLength;
        const setGreen = i2 < chuckLength * 2 && i2 > chuckLength;
        const setBlue = i2 < chuckLength * 3 && i2 > chuckLength * 2;
        if (setRed) {
          redRaw[0] += value;
          redRaw[1]++;
        } else if (setGreen) {
          greenRaw[0] += value;
          greenRaw[1]++;
        } else if (setBlue) {
          blueRaw[0] += value;
          blueRaw[1]++;
        }
      }
      const sum = data.reduce((a2, v2) => a2 + v2) + distance;
      const red2 = redRaw[0] / redRaw[1];
      const green = greenRaw[0] / greenRaw[1];
      const blue = blueRaw[0] / blueRaw[1];
      const r2 = Math.round((red2 / this.maxValue * RGB_MAX + sum) % 255);
      const g2 = Math.round((green / this.maxValue * RGB_MAX + sum + 64) % 255);
      const b2 = Math.round((blue / this.maxValue * RGB_MAX + distance + 64 * 2) % 255);
      if (sum < 255) {
        return { r: 0, g: 0, b: 0 };
      }
      return { r: r2, g: g2, b: b2 };
    }
    // getBoostedRbgColours() {
    //   const {r, g, b} = this.getBoostedRbgColours();
    // }
    get bufferLength() {
      return this.merged.length;
    }
    noiseFreeArrayBuffer(maxAttempts = 8, range, arrayBuffer) {
      range = range ? range : this.maxValue * 0.1;
      arrayBuffer = arrayBuffer ? arrayBuffer : this.merged;
      const buff = [];
      let last = arrayBuffer[0];
      let attempt = 0;
      for (let i2 = 0; i2 < arrayBuffer.length; i2++) {
        const value = arrayBuffer[i2];
        if (this.isInRange(value, last, range)) {
          buff.push(value);
          last = value;
          attempt = 0;
        } else {
          attempt++;
          if (attempt > maxAttempts) {
            buff.push(value);
            last = value;
            attempt = 0;
          }
        }
      }
      const array = new Int16Array(buff.length);
      for (let i2 = 0; i2 < buff.length; i2++) {
        array[i2] = buff[i2];
      }
      return array;
    }
    findPattern(size = 100, accuracy = "exact", array) {
      array = array ? array : this.merged;
      const sample2 = [];
      for (let i2 = 0; i2 < size; i2++) {
        sample2.push(this.Int16Array[i2]);
      }
      const match = [];
      let skip = 0;
      const lowChecker = this.maxValue * 0.25;
      const mediumChecker = this.maxValue * 0.15;
      const highChecker = this.maxValue * 0.5;
      for (let i2 = 0; i2 < this.Int16Array.length; i2++) {
        const index2 = match.length - 1;
        if (match.length >= size) {
          const intArray = new Int16Array(match.length);
          for (let j2 = 0; j2 < match.length; j2++) {
            intArray[j2] = match[j2];
          }
          return intArray;
        }
        const checker = sample2[index2];
        const looking = this.Int16Array[i2];
        if (looking === checker) {
          match.push(checker);
          skip = 0;
        } else if (accuracy === "low" && this.isInRange(looking, checker, lowChecker)) {
          match.push(checker);
          skip = 0;
        } else if (accuracy === "medium" && this.isInRange(looking, checker, mediumChecker)) {
          match.push(checker);
          skip = 0;
        } else if (accuracy === "heigh" && this.isInRange(looking, checker, highChecker)) {
          match.push(checker);
          skip = 0;
        } else {
          if (skip > 4) {
            match.length = 0;
            skip = 0;
          }
          skip++;
        }
      }
      return this.Int16Array;
    }
    setSmoothSampling(value) {
      this.smoothingSize = value;
    }
    get smoothSampling() {
      return this.smoothingSize;
    }
    isInRange(number, check, range) {
      return number <= check + range && number >= check - range;
    }
    addNewValues(arrayBuffer) {
      if (this.smooth.length > this.smoothingSize) {
        this.smooth.shift();
      }
      this.smooth.push(arrayBuffer);
      if (this.amplify) {
        const max = Math.max.apply(Math, [...arrayBuffer]);
        const amplifySize = (this.maxValue - max) / this.maxValue;
        for (let i2 = 0; i2 < arrayBuffer.length; i2++) {
          const value = arrayBuffer[i2];
          if (value >= 0) {
            arrayBuffer[i2] += max * amplifySize;
          } else {
            arrayBuffer[i2] -= -(max * amplifySize);
          }
        }
      }
      let j2 = 0;
      let last = 0;
      for (let i2 = 0; i2 < this.Int16Array.length; i2++) {
        if (this.smoothingSize === 0) {
          const value2 = arrayBuffer[i2];
          this.Int16Array[i2] = arrayBuffer[i2];
          if (i2 % 2) {
            this.rightSpeaker[j2] = value2;
            last = value2;
          } else {
            this.leftSpeaker[j2] = value2;
            this.merged[j2] = (last + value2) / 2;
            j2++;
          }
          continue;
        }
        let sum = 0;
        const len = this.smooth.length;
        for (let j3 = 0; j3 < len; j3++) {
          sum += this.smooth[j3][i2];
        }
        let value = 0;
        const result = Math.round(sum / len);
        if (!isNaN(result)) {
          value = result;
        }
        value = (0, import_lodash.clamp)(value, -this.maxValue, this.maxValue);
        this.Int16Array[i2] = value;
        if (i2 % 2) {
          this.rightSpeaker[j2] = value;
          last = value;
        } else {
          this.leftSpeaker[j2] = value;
          this.merged[j2] = (last + value) / 2;
          j2++;
        }
      }
    }
  };

  // src/client/Utils/BrowserStorage.ts
  var BrowserStorage = class {
    static getString(key) {
      return localStorage.getItem(key);
    }
    static setString(key, value) {
      localStorage.setItem(key, value);
      return value;
    }
    static getNumber(key) {
      const result = localStorage.getItem(key);
      if (!result)
        return null;
      const num = parseFloat(result);
      if (isNaN(num))
        return null;
      return num;
    }
    static setNumber(key, value) {
      localStorage.setItem(key, value.toString());
      return value;
    }
    static getBoolean(key) {
      const result = localStorage.getItem(key);
      if (result && result === "true")
        return true;
      return false;
    }
    static setBoolean(key, value) {
      if (value) {
        localStorage.setItem(key, "true");
      } else {
        localStorage.setItem(key, "false");
      }
      return value;
    }
    static removeItem(key) {
      localStorage.removeItem(key);
    }
  };

  // src/shared/eventEmitter.ts
  var EventEmitter = class {
    constructor() {
      this.map = /* @__PURE__ */ new Map();
    }
    on(key, handler) {
      const data = this.map.get(key) || [];
      if (data.indexOf(handler) === -1) {
        data.push(handler);
      }
      this.map.set(key, data);
    }
    off(key, handler) {
      const data = this.map.get(key) || [];
      const index2 = data.indexOf(handler);
      if (index2 !== -1) {
        data.splice(index2, 1);
      }
      if (!data.length) {
        this.map.delete(key);
      }
    }
    emit(key, ...args) {
      const data = this.map.get(key);
      let count = 0;
      if (data) {
        for (const fn of data) {
          fn(...args);
          count++;
        }
      }
      return count;
    }
  };
  var EventEmitterSingle = class {
    constructor() {
      this.map = /* @__PURE__ */ new Map();
    }
    on(key, handler) {
      if (this.map.has(key)) {
        throw new Error(`Event ${key} already registered`);
      }
      this.map.set(key, handler);
    }
    off(key) {
      this.map.delete(key);
    }
    emit(key, ...args) {
      const data = this.map.get(key);
      if (data) {
        return data(...args);
      }
      throw new Error(`Single function ${key} not registered`);
    }
  };

  // src/shared/clientSocket.ts
  var import_lodash2 = __toESM(require_lodash());

  // src/shared/Messages.ts
  var ServerMessagesRaw = /* @__PURE__ */ ((ServerMessagesRaw2) => {
    ServerMessagesRaw2[ServerMessagesRaw2["RGBSet"] = 0] = "RGBSet";
    ServerMessagesRaw2[ServerMessagesRaw2["RGBGet"] = 1] = "RGBGet";
    ServerMessagesRaw2[ServerMessagesRaw2["ModeSet"] = 2] = "ModeSet";
    ServerMessagesRaw2[ServerMessagesRaw2["ModeGet"] = 3] = "ModeGet";
    ServerMessagesRaw2[ServerMessagesRaw2["Settings"] = 4] = "Settings";
    ServerMessagesRaw2[ServerMessagesRaw2["Config"] = 5] = "Config";
    ServerMessagesRaw2[ServerMessagesRaw2["DoorLog"] = 6] = "DoorLog";
    ServerMessagesRaw2[ServerMessagesRaw2["DoorClear"] = 7] = "DoorClear";
    ServerMessagesRaw2[ServerMessagesRaw2["CamGet"] = 8] = "CamGet";
    ServerMessagesRaw2[ServerMessagesRaw2["CamTake"] = 9] = "CamTake";
    ServerMessagesRaw2[ServerMessagesRaw2["DeviceInfo"] = 10] = "DeviceInfo";
    ServerMessagesRaw2[ServerMessagesRaw2["AudioGetDevices"] = 11] = "AudioGetDevices";
    ServerMessagesRaw2[ServerMessagesRaw2["AudioPcm"] = 12] = "AudioPcm";
    ServerMessagesRaw2[ServerMessagesRaw2["AudioPcmReport"] = 13] = "AudioPcmReport";
    ServerMessagesRaw2[ServerMessagesRaw2["AudioActiveDevice"] = 14] = "AudioActiveDevice";
    ServerMessagesRaw2[ServerMessagesRaw2["AudioAllDevices"] = 15] = "AudioAllDevices";
    ServerMessagesRaw2[ServerMessagesRaw2["AudioSettingsUpdate"] = 16] = "AudioSettingsUpdate";
    ServerMessagesRaw2[ServerMessagesRaw2["AudioIsServerConnected"] = 17] = "AudioIsServerConnected";
    ServerMessagesRaw2[ServerMessagesRaw2["AudioIsInternalAudioProcessing"] = 18] = "AudioIsInternalAudioProcessing";
    ServerMessagesRaw2[ServerMessagesRaw2["AudioApis"] = 19] = "AudioApis";
    ServerMessagesRaw2[ServerMessagesRaw2["PatternGet"] = 20] = "PatternGet";
    ServerMessagesRaw2[ServerMessagesRaw2["PatternSet"] = 21] = "PatternSet";
    ServerMessagesRaw2[ServerMessagesRaw2["ScheduleGet"] = 22] = "ScheduleGet";
    ServerMessagesRaw2[ServerMessagesRaw2["ScheduleSet"] = 23] = "ScheduleSet";
    return ServerMessagesRaw2;
  })(ServerMessagesRaw || {});
  var ClientMessagesRaw = /* @__PURE__ */ ((ClientMessagesRaw3) => {
    ClientMessagesRaw3[ClientMessagesRaw3["Login"] = 0] = "Login";
    ClientMessagesRaw3[ClientMessagesRaw3["RGBUpdate"] = 1] = "RGBUpdate";
    ClientMessagesRaw3[ClientMessagesRaw3["ModeUpdate"] = 2] = "ModeUpdate";
    ClientMessagesRaw3[ClientMessagesRaw3["DoorOpen"] = 3] = "DoorOpen";
    ClientMessagesRaw3[ClientMessagesRaw3["DoorImageAvailable"] = 4] = "DoorImageAvailable";
    ClientMessagesRaw3[ClientMessagesRaw3["SocketLog"] = 5] = "SocketLog";
    ClientMessagesRaw3[ClientMessagesRaw3["SettingsUpdate"] = 6] = "SettingsUpdate";
    ClientMessagesRaw3[ClientMessagesRaw3["PCM"] = 7] = "PCM";
    ClientMessagesRaw3[ClientMessagesRaw3["AudioGetDevices"] = 8] = "AudioGetDevices";
    ClientMessagesRaw3[ClientMessagesRaw3["AudioActiveDevice"] = 9] = "AudioActiveDevice";
    ClientMessagesRaw3[ClientMessagesRaw3["AudioAllDevices"] = 10] = "AudioAllDevices";
    ClientMessagesRaw3[ClientMessagesRaw3["AudioApis"] = 11] = "AudioApis";
    ClientMessagesRaw3[ClientMessagesRaw3["AudioSettingsUpdate"] = 12] = "AudioSettingsUpdate";
    ClientMessagesRaw3[ClientMessagesRaw3["AudioIsInternalAudioProcessing"] = 13] = "AudioIsInternalAudioProcessing";
    ClientMessagesRaw3[ClientMessagesRaw3["AudioServerConnected"] = 14] = "AudioServerConnected";
    ClientMessagesRaw3[ClientMessagesRaw3["AudioServerDisconnected"] = 15] = "AudioServerDisconnected";
    ClientMessagesRaw3[ClientMessagesRaw3["PatternUpdate"] = 16] = "PatternUpdate";
    ClientMessagesRaw3[ClientMessagesRaw3["ScheduleUpdate"] = 17] = "ScheduleUpdate";
    return ClientMessagesRaw3;
  })(ClientMessagesRaw || {});
  var SpecialEvents = /* @__PURE__ */ ((SpecialEvents3) => {
    SpecialEvents3[SpecialEvents3["Connect"] = 251] = "Connect";
    SpecialEvents3[SpecialEvents3["Disconnect"] = 252] = "Disconnect";
    SpecialEvents3[SpecialEvents3["PromiseError"] = 253] = "PromiseError";
    SpecialEvents3[SpecialEvents3["PromiseResolve"] = 254] = "PromiseResolve";
    SpecialEvents3[SpecialEvents3["Promise"] = 255] = "Promise";
    return SpecialEvents3;
  })(SpecialEvents || {});
  var ClientMessages = {
    ...ClientMessagesRaw,
    ...SpecialEvents
  };
  var ServerMessages = {
    ...ServerMessagesRaw,
    ...SpecialEvents
  };

  // src/shared/messages/BinaryBuffer.ts
  var BinaryBuffer = class {
    constructor(bufferOrSize = 32) {
      this._offset = 0;
      const buf = typeof bufferOrSize === "number" ? new ArrayBuffer(bufferOrSize) : bufferOrSize;
      this.view = buf instanceof Uint8Array ? new DataView(buf.buffer, buf.byteOffset, buf.byteLength) : new DataView(buf);
    }
    // getters
    getInt8() {
      const i8 = this.view.getInt8(this.offset);
      this.offset += 1;
      return i8;
    }
    getUint8() {
      const u8 = this.view.getUint8(this.offset);
      this.offset += 1;
      return u8;
    }
    getBool() {
      const data = this.view.getUint8(this.offset);
      this.offset += 1;
      return !!data;
    }
    getInt16LE() {
      this.view.getInt16(this.offset, true);
      this.offset += 2;
      return this;
    }
    getInt16BE() {
      this.view.getInt16(this.offset, false);
      this.offset += 2;
      return this;
    }
    getUint16LE() {
      const u16 = this.view.getUint16(this.offset, true);
      this.offset += 2;
      return u16;
    }
    getUint16BE() {
      const u16 = this.view.getUint16(this.offset, false);
      this.offset += 2;
      return u16;
    }
    getInt32LE() {
      const i32 = this.view.getInt32(this.offset, true);
      this.offset += 4;
      return i32;
    }
    getInt32BE() {
      const i32 = this.view.getInt32(this.offset, false);
      this.offset += 4;
      return i32;
    }
    getUint32LE() {
      const u32 = this.view.getUint32(this.offset, true);
      this.offset += 4;
      return u32;
    }
    getUint32BE() {
      const u32 = this.view.getUint32(this.offset, false);
      this.offset += 4;
      return u32;
    }
    getFloatLE() {
      const float = this.view.getFloat32(this.offset, false);
      this.offset += 4;
      return float;
    }
    getFloatBe() {
      const float = this.view.getFloat32(this.offset, true);
      this.offset += 4;
      return float;
    }
    getDoubleLE() {
      const double = this.view.getFloat64(this.offset, false);
      this.offset += 8;
      return double;
    }
    getDoubleBE() {
      const double = this.view.getFloat64(this.offset, true);
      this.offset += 8;
      return double;
    }
    getLength() {
      let length = 0;
      let shift = 0;
      let b2 = 0;
      do {
        b2 = this.getUint8();
        length = length | (b2 & 127) << shift;
        shift += 7;
      } while (b2 & 128);
      return length - 1;
    }
    getAsciiString() {
      const strLength = this.getLength();
      let str = "";
      for (let i2 = 0; i2 < strLength; i2++) {
        str += String.fromCharCode(this.getUint8());
      }
      return str;
    }
    getUtf8String() {
      const strLength = this.getLength();
      let str = "";
      let i2 = 0;
      while (i2 < strLength) {
        const byte = this.getUint8();
        if (byte < 128) {
          str += String.fromCharCode(byte);
        } else if (byte >= 192 && byte < 224) {
          const secondByte = this.getUint8();
          str += String.fromCharCode((byte & 31) << 6 | secondByte & 63);
        } else if (byte >= 224 && byte < 240) {
          const secondByte = this.getUint8();
          const thirdByte = this.getUint8();
          str += String.fromCharCode((byte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63);
        } else if (byte >= 240 && byte < 248) {
          const secondByte = this.getUint8();
          const thirdByte = this.getUint8();
          const fourthByte = this.getUint8();
          const codePoint = ((byte & 7) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63) - 65536;
          str += String.fromCharCode(55296 | codePoint >> 10, 56320 | codePoint & 1023);
        }
        i2++;
      }
      return str;
    }
    getU8Arr() {
      const length = this.getLength();
      if (length === -1)
        return null;
      return this.getBytes(length);
    }
    getBytes(length) {
      const offset = this.offset;
      this.offset += length;
      return new Uint8Array(this.view.buffer, this.view.byteOffset + offset, length);
    }
    getAny() {
      return JSON.parse(this.getUtf8String());
    }
    // writters
    setInt8(value) {
      this.view.setInt8(this.offset, value);
      this.offset += 1;
      return this;
    }
    setUint8(value) {
      this.view.setUint8(this.offset, value);
      this.offset += 1;
      return this;
    }
    setBool(value) {
      this.view.setUint8(this.offset, value ? 1 : 0);
      this.offset += 1;
      return this;
    }
    setInt16LE(value) {
      this.view.setInt16(this.offset, value, true);
      this.offset += 2;
      return this;
    }
    setInt16BE(value) {
      this.view.setInt16(this.offset, value, false);
      this.offset += 2;
      return this;
    }
    setUint16LE(value) {
      this.view.setUint16(this.offset, value, true);
      this.offset += 2;
      return this;
    }
    setUint16BE(value) {
      this.view.setUint16(this.offset, value, false);
      this.offset += 2;
      return this;
    }
    setInt32LE(value) {
      this.view.setInt32(this.offset, value, true);
      this.offset += 4;
      return this;
    }
    setInt32BE(value) {
      this.view.setInt32(this.offset, value, false);
      this.offset += 4;
      return this;
    }
    setUint32LE(value) {
      this.view.setUint32(this.offset, value, true);
      this.offset += 4;
      return this;
    }
    setUint32BE(value) {
      this.view.setUint32(this.offset, value, false);
      this.offset += 4;
      return this;
    }
    setFloatLE(value) {
      this.view.setFloat32(this.offset, value, true);
      this.offset += 4;
      return this;
    }
    setFloatBE(value) {
      this.view.setFloat32(this.offset, value, false);
      this.offset += 4;
      return this;
    }
    setDoubleLE(value) {
      this.view.setFloat64(this.offset, value, true);
      this.offset += 8;
      return this;
    }
    setDoubleBE(value) {
      this.view.setFloat64(this.offset, value, false);
      this.offset += 8;
      return this;
    }
    setLength(value) {
      if (value < -1 || value > 2147483646)
        throw new Error("Invalid length value");
      value++;
      if (value === 0) {
        this.setUint8(0);
      } else {
        while (value > 0) {
          let byte = value & 127;
          if (value > 127)
            byte |= 128;
          this.setUint8(byte);
          value >>= 7;
        }
      }
      return this;
    }
    setAsciiString(asciiString) {
      const strLength = asciiString.length;
      let asciiLength = 0;
      for (let i2 = 0; i2 < strLength; i2++) {
        const charCode = asciiString.charCodeAt(i2);
        if (charCode <= 127) {
          asciiLength++;
        }
      }
      this.setLength(asciiLength);
      for (let i2 = 0; i2 < strLength; i2++) {
        const charCode = asciiString.charCodeAt(i2);
        if (charCode <= 127) {
          this.setUint8(charCode);
        }
      }
    }
    setUtf8String(str) {
      const strLength = str.length;
      this.setLength(strLength);
      for (let i2 = 0; i2 < strLength; i2++) {
        const charCode = str.charCodeAt(i2);
        if (charCode <= 127) {
          this.setUint8(charCode);
        } else if (charCode <= 2047) {
          this.setUint8(192 | charCode >> 6);
          this.setUint8(128 | charCode & 63);
        } else if (charCode <= 65535) {
          this.setUint8(224 | charCode >> 12);
          this.setUint8(128 | charCode >> 6 & 63);
          this.setUint8(128 | charCode & 63);
        } else if (charCode <= 1114111) {
          this.setUint8(240 | charCode >> 18);
          this.setUint8(128 | charCode >> 12 & 63);
          this.setUint8(128 | charCode >> 6 & 63);
          this.setUint8(128 | charCode & 63);
        }
      }
      return this;
    }
    setU8Arr(arr) {
      this.setLength(arr.byteLength);
      this.setBytes(arr);
      return this;
    }
    setBytes(value) {
      for (let src = 0, length = value.length, dst = this.offset; src < length; src++, dst++) {
        const v2 = value[src];
        if (v2 != null) {
          this.view.setUint8(dst, v2);
        } else {
          throw new Error("value[src] is null");
        }
      }
      this.offset += value.byteLength;
      return this;
    }
    setAny(obj) {
      this.setUtf8String(JSON.stringify(obj));
      return this;
    }
    get offset() {
      return this._offset;
    }
    set offset(value) {
      this._offset = value;
      if (this.view.byteLength < this.offset) {
        const newSize = (this.view.byteLength || 1) * 2;
        const u8Arr = new Uint8Array(newSize);
        const copy = new Uint8Array(this.view.buffer);
        for (let i2 = 0; i2 < copy.length; i2++) {
          u8Arr[i2] = copy[i2];
        }
        this.view = new DataView(u8Arr.buffer);
        console.warn("Buffer resized");
      }
    }
    getBuffer() {
      return new Uint8Array(this.view.buffer, this.view.byteOffset, this.offset);
    }
    getRestOfTheBuffer() {
      return new Uint8Array(this.view.buffer.slice(this.offset));
    }
  };
  function utf8StringLen(str) {
    const strLength = str.length;
    let len = 0;
    let value = strLength;
    value++;
    if (value === 0) {
      len++;
    } else {
      while (value > 0) {
        let byte = value & 127;
        if (value > 127)
          byte |= 128;
        len++;
        value >>= 7;
      }
    }
    for (let i2 = 0; i2 < strLength; i2++) {
      const charCode = str.charCodeAt(i2);
      if (charCode <= 127) {
        len += 1;
      } else if (charCode <= 2047) {
        len += 2;
      } else if (charCode <= 65535) {
        len += 3;
      } else if (charCode <= 1114111) {
        len += 4;
      }
    }
    return len;
  }

  // src/shared/utils.ts
  function cloneDeep(object) {
    return JSON.parse(JSON.stringify(object));
  }
  function randomString(length) {
    let result = "";
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    const charactersLength = characters.length;
    for (let i2 = 0; i2 < length; i2++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  }
  function removeFromArray(array, item) {
    const indexOf = array.indexOf(item);
    if (indexOf === -1) {
      return false;
    }
    array.splice(indexOf, 1);
    return true;
  }
  function pushUniqToArray(array, item) {
    const indexOf = array.indexOf(item);
    if (indexOf === -1) {
      array.push(item);
      return true;
    }
    return false;
  }
  function toInt(number, fallback = 0) {
    const type = typeof number;
    switch (type) {
      case "bigint":
      case "number":
        return Math.round(number);
      case "string":
        const parsed = parseInt(number);
        return isNaN(parsed) ? fallback : parsed;
    }
    return fallback;
  }
  function getDayString(date) {
    const dateString = `${date.getMonth() + 1}-${date.getDate()}-${date.getFullYear()}`;
    return dateString;
  }
  function deffer() {
    let resolve2;
    let reject2;
    const promise = new Promise((_resolve, _reject) => {
      resolve2 = _resolve;
      reject2 = _reject;
    });
    return {
      promise,
      reject: reject2,
      resolve: resolve2
    };
  }
  function quickBuffer(value) {
    switch (typeof value) {
      case "boolean":
        return new BinaryBuffer(1).setBool(value).getBuffer();
      case "string":
        return new BinaryBuffer(utf8StringLen(value)).setUtf8String(value).getBuffer();
      case "number": {
        return new BinaryBuffer(1).setUint8(value).getBuffer();
      }
      case "object": {
        return quickBuffer(JSON.stringify(value));
      }
    }
    return new Uint8Array();
  }

  // src/shared/messages/messageHandle.ts
  var emptyMessage = new Uint8Array();
  var MessageHandleBase = class {
    constructor(handle, client) {
      this.handle = handle;
      this.client = client;
      this.events = new EventEmitter();
      this.promiseEvents = new EventEmitterSingle();
      this.deffered = /* @__PURE__ */ new Map();
      this.messageId = 0;
      this.onConnect = () => {
        return this.events.emit(251 /* Connect */, null, this.client);
      };
      this.onDisconnect = () => {
        this.deffered.forEach((value) => value.reject(new Error("Disconnected")));
        this.deffered.clear();
        return this.events.emit(252 /* Disconnect */, null, this.client);
      };
      this.onMessage = async (reader) => {
        const type = reader.getUint8();
        switch (type) {
          case 255 /* Promise */: {
            const promiseType = reader.getUint8();
            const messageId = reader.getUint32LE();
            const bufferObj = new BinaryBuffer(reader.getRestOfTheBuffer());
            try {
              const data = await this.promiseEvents.emit(promiseType, bufferObj, this.client);
              const buff = new Uint8Array(5 + data.byteLength);
              const buffer = new BinaryBuffer(buff);
              buffer.setUint32LE(messageId);
              buffer.setBytes(data);
              this.send(254 /* PromiseResolve */, buffer.getBuffer());
            } catch (error) {
              Logger.debug(error);
              const errorEncoded = new SocketError(error.message).toBuffer();
              const buff = new Uint8Array(5 + errorEncoded.byteLength);
              const buffer = new BinaryBuffer(buff);
              buffer.setUint32LE(messageId);
              buffer.setBytes(errorEncoded);
              this.send(253 /* PromiseError */, buffer.getBuffer());
            }
            return true;
          }
          case 254 /* PromiseResolve */: {
            const messageId = reader.getUint32LE();
            const data = this.deffered.get(messageId);
            this.deffered.delete(messageId);
            if (data) {
              data.resolve(reader);
            }
            return true;
          }
          case 253 /* PromiseError */: {
            const messageId = reader.getUint32LE();
            const data = this.deffered.get(messageId);
            this.deffered.delete(messageId);
            if (data) {
              console.log(reader["view"]);
              const res = SocketError.fromBuffer(reader);
              data.reject(res);
            }
            return true;
          }
          default:
            const count = this.events.emit(type, reader, this.client);
            return !!count;
        }
      };
      handle.connect = this.onConnect;
      handle.disconnect = this.onDisconnect;
      handle.message = this.onMessage;
    }
    on(key, cb) {
      this.events.on(key, cb);
    }
    onPromise(key, cb) {
      this.promiseEvents.on(key, cb);
    }
    off(key, cb) {
      this.events.off(key, cb);
    }
    offPromise(key) {
      this.promiseEvents.off(key);
    }
    sendPromise(type, message = emptyMessage) {
      const deffered = deffer();
      const id = this.messageId++;
      this.deffered.set(id, deffered);
      const buffer = new BinaryBuffer(message.byteLength + 1 + 1 + 4);
      buffer.setUint8(255 /* Promise */);
      buffer.setUint8(type);
      buffer.setUint32LE(id);
      buffer.setBytes(message);
      this.handle.send(buffer.getBuffer());
      return deffered.promise;
    }
    send(type, message = emptyMessage) {
      const buffer = new Uint8Array(message.byteLength + 1);
      buffer.set(message, 1);
      buffer[0] = type;
      return this.handle.send(buffer);
    }
  };
  var SocketError = class _SocketError extends Error {
    constructor(message) {
      super(message);
    }
    static fromBuffer(reader) {
      const error = new _SocketError(reader.getUtf8String());
      return error;
    }
    static fromU8Array(arr) {
      return _SocketError.fromBuffer(new BinaryBuffer(arr));
    }
    toBuffer() {
      return new BinaryBuffer(
        utf8StringLen(this.message)
        /* + utf8StringLen(stack)*/
      ).setUtf8String(this.message).getBuffer();
    }
  };

  // src/shared/post.ts
  async function post(url, payload) {
    const res = await fetch(url, {
      body: JSON.stringify(payload),
      method: "POST",
      headers: {
        "Content-Type": "Application/json"
      }
    });
    if (!res.ok) {
      const json = await res.json();
      if (json.error) {
        throw new Error(json.error);
      } else {
        throw new Error("Request error");
      }
    }
    if (res.status < 200 && res.status > 300) {
      throw new Error(`Request responded with ${res.status}`);
    }
    return res.json();
  }

  // src/shared/clientSocket.ts
  var ClientSocket = class {
    constructor() {
      this.handle = createClientHandle((buffer) => false);
      this.clientHandle = new ClientMessageHandle(this.handle, this);
      this.onOpen = (_event) => {
        this.handle.connect();
      };
      this.onClose = (_event) => {
        this.handle.disconnect();
      };
      this.onMessage = (event) => {
        const data = event.data;
        if (typeof data === "string") {
          console.error("Received string!", data);
        } else {
          const buffer = new BinaryBuffer(new Uint8Array(data));
          this.handle.message(buffer);
        }
      };
      this.onError = (event) => {
        console.log(event);
      };
    }
    async createSocket(url, password) {
      if (this.socket)
        return;
      const res = await post("/api/v1/request-token", { clientType: "browser-client", password });
      const urlObj = new URL(url);
      const prefix = urlObj.protocol.startsWith("https") ? "wss" : "ws";
      const socketUrl = `${prefix}://${urlObj.host}/?t=${res.data.token}`;
      const socket = new WebSocket(socketUrl);
      socket.binaryType = "arraybuffer";
      socket.addEventListener("open", (event) => {
        this.socket = socket;
        this.handle.send = (message) => {
          this.socket.send(message);
          return true;
        };
        this.onOpen(event);
      });
      socket.addEventListener("message", this.onMessage);
      socket.addEventListener("error", this.onError);
      socket.addEventListener("close", (event) => {
        Logger.info("Socket Closed");
        this.socket = void 0;
        this.onClose(event);
      });
    }
    disconnect(code, reason) {
      if (this.socket) {
        this.socket.close(code, reason);
      }
      this.socket = void 0;
      this.handle = void 0;
      this.clientHandle = void 0;
    }
    get connected() {
      return !!this.socket;
    }
  };
  var ClientMessageHandle = class extends MessageHandleBase {
  };
  function createClientHandle(send) {
    return {
      connect: import_lodash2.noop,
      disconnect: import_lodash2.noop,
      message: import_lodash2.noop,
      send
    };
  }

  // src/shared/constants.ts
  var SECOND = 1e3;
  var MINUTE = SECOND * 60;
  var HOUR = MINUTE * 60;
  var DAY = HOUR * 24;
  var WEEK = DAY * 7;
  var MONTH = Math.floor(DAY * 30.42);
  var YEAR = Math.floor(DAY * 365.25);
  var DAY_NAMES = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
  var MODES = ["fade", "instant"];
  var SCHEDULE_TYPE = ["Pattern", "RGB"];
  var HASH = randomString(16);

  // src/shared/interfaces.ts
  function modeToString(mode) {
    switch (mode) {
      case 0 /* Manual */:
        return "Manual";
      case 1 /* ManualForce */:
        return "Manual Force";
      case 2 /* ManualLocked */:
        return "Manual Locked";
      case 3 /* AutoPilot */:
        return "Auto Pilot";
      case 4 /* Pattern */:
        return "Pattern";
      case 5 /* Audio */:
        return "Audio";
      case 6 /* AudioRaw */:
        return "Audio Raw";
      case 7 /* Door */:
        return "Door";
      default:
        break;
    }
  }
  var clientKeys = [
    "audio-server",
    "browser-client",
    "android-app",
    "android-app-background",
    "unknown"
  ];

  // src/client/Utils/Socket.ts
  var empty = new Uint8Array();
  var LightSocket = class {
    constructor(version, raiseNotification) {
      this.version = version;
      this.raiseNotification = raiseNotification;
      this.TIMEOUT = MINUTE;
      this.eventEmitter = new EventEmitter();
      this.queue = [];
      this._magicHome = false;
      this._activeCamera = false;
      this._doorSensor = false;
      this._mode = 0 /* Manual */;
      this.STORAGE_KEY = "socket-password";
      this.onModeUpdateBin = (data) => {
        this.onModeUpdate(data.getUint8());
      };
      this.onRGBUpdate = (data) => {
        const r2 = data.getUint8();
        const g2 = data.getUint8();
        const b2 = data.getUint8();
        this.eventEmitter.emit("rgb-update", { r: r2, g: g2, b: b2 });
      };
      this.onModeUpdate = (mode) => {
        this._mode = mode;
        this.eventEmitter.emit("mode-update", this._mode);
      };
      this._clientSocket = new ClientSocket();
      this._clientSocket.clientHandle.on(2 /* ModeUpdate */, this.onModeUpdateBin);
      this._clientSocket.clientHandle.on(1 /* RGBUpdate */, this.onRGBUpdate);
      this._clientSocket.clientHandle.on(251 /* Connect */, async (msg) => {
        this.getSettings();
        this.eventEmitter.emit("connect");
      });
      this._clientSocket.clientHandle.on(252 /* Disconnect */, (msg) => {
        this.eventEmitter.emit("disconnect");
        this._magicHome = false;
        this.emptyQueue();
      });
      this.authenticate();
    }
    on(value, listener3) {
      this.eventEmitter.on(value, listener3);
    }
    off(value, listener3) {
      this.eventEmitter.off(value, listener3);
    }
    async getSettings() {
      const settingsBuffer = await this._clientSocket.clientHandle.sendPromise(4 /* Settings */);
      this._settings = JSON.parse(settingsBuffer.getUtf8String());
      try {
        const resultBuffer = await this._clientSocket.clientHandle.sendPromise(5 /* Config */);
        const mode = resultBuffer.getUint8();
        const doorSensor = resultBuffer.getBool();
        const activeCamera = resultBuffer.getBool();
        const magicController = resultBuffer.getBool();
        const version = resultBuffer.getUtf8String();
        console.log(
          mode,
          doorSensor,
          activeCamera,
          magicController,
          version
        );
        this._magicHome = magicController;
        this._doorSensor = doorSensor;
        this._activeCamera = activeCamera;
        if (this._mode !== mode) {
          this._mode = mode;
          this.onModeUpdate(this._mode);
        }
        if (this.version !== version) {
          this.raiseNotification("Invalid app version", `Expected ${version}v using ${this.version}v`);
        }
      } catch (_error) {
        console.log(_error);
        this._magicHome = false;
        this._doorSensor = false;
      }
    }
    async authenticate(password) {
      const pass = password || BrowserStorage.getString(this.STORAGE_KEY);
      if (!pass) {
        new Error("No password provided");
        return;
      }
      await this._clientSocket.createSocket(location.href, pass);
      BrowserStorage.setString(this.STORAGE_KEY, pass);
      this.sendQueue();
    }
    setColor(red2, green, blue) {
      return this._clientSocket.clientHandle.send(
        0 /* RGBSet */,
        new BinaryBuffer(3).setUint8(red2).setUint8(green).setUint8(blue).getBuffer()
      );
    }
    get socket() {
      return this._clientSocket;
    }
    get clientSocket() {
      return this._clientSocket;
    }
    get mode() {
      return this._mode;
    }
    emitIfPossible(event, buffer = empty) {
      if (this.connected) {
        return this.clientSocket.clientHandle.sendPromise(event, buffer);
      } else {
        this.queue.push({
          promise: false,
          args: {
            event,
            buffer
          },
          date: Date.now()
        });
      }
    }
    async emitPromiseIfPossible(event, buffer = empty) {
      if (this.socket.connected) {
        return this.clientSocket.clientHandle.sendPromise(event, buffer);
      } else {
        return new Promise((resolve2, reject2) => {
          this.queue.push({ promise: true, resolve: resolve2, reject: reject2, args: { event, buffer }, date: Date.now() });
        });
      }
    }
    async sendQueue() {
      if (!this.queue.length) {
        return;
      }
      const item = this.queue.shift();
      const args = item.args;
      const dateNow = Date.now();
      const promise = item.promise;
      if (item.date + MINUTE < dateNow) {
        if (promise) {
          item.reject(new Error("Request timed out"));
        }
        this.sendQueue();
        return;
      }
      if (promise) {
        try {
          const result = await this.clientSocket.clientHandle.sendPromise(args.event, args.buffer);
          item.resolve(result);
        } catch (error) {
          item.reject(error);
        }
      } else {
        this.clientSocket.clientHandle.send(args.event, args.buffer);
      }
      this.sendQueue();
    }
    async emptyQueue() {
      if (!this.queue.length) {
        return;
      }
      const item = this.queue.shift();
      if (item.promise) {
        item.reject(new Error("Socket connection lost"));
      }
      this.emptyQueue();
    }
    get isMagicHome() {
      return this._magicHome;
    }
    get hasActiveCamera() {
      return this._activeCamera;
    }
    get doorSensorConnected() {
      return this._doorSensor;
    }
    get connected() {
      return this._clientSocket && this._clientSocket.connected;
    }
    get settings() {
      return this._settings;
    }
  };

  // src/client/Utils/AudioSystem.ts
  var import_events3 = __toESM(require_events());

  // src/shared/colour.ts
  var import_lodash3 = __toESM(require_lodash());
  var MAX_RGB = 16777215;
  function componentToHex(c2) {
    c2 = (0, import_lodash3.clamp)(c2, 0, 255);
    const hex = c2.toString(16);
    return hex.length == 1 ? "0" + hex : hex;
  }
  function rgb2hex(r2, g2, b2) {
    r2 = (0, import_lodash3.clamp)(r2, 0, 255);
    g2 = (0, import_lodash3.clamp)(g2, 0, 255);
    b2 = (0, import_lodash3.clamp)(b2, 0, 255);
    return "#" + componentToHex(r2) + componentToHex(g2) + componentToHex(b2);
  }
  function rgbObj2Hex(obj) {
    return rgb2hex(obj.r, obj.g, obj.b);
  }
  function hsv2rgb(hsv) {
    let h2 = hsv.h;
    let s2 = hsv.s;
    let v2 = hsv.v;
    h2 = Math.max(0, Math.min(360, h2 === 360 ? 0 : h2));
    s2 = Math.max(0, Math.min(1, s2));
    v2 = Math.max(0, Math.min(1, v2));
    let r2 = v2;
    let g2 = v2;
    let b2 = v2;
    if (s2 !== 0) {
      h2 /= 60;
      const i2 = Math.floor(h2);
      const f = h2 - i2;
      const p2 = v2 * (1 - s2);
      const q2 = v2 * (1 - s2 * f);
      const t2 = v2 * (1 - s2 * (1 - f));
      switch (i2) {
        case 0:
          r2 = v2;
          g2 = t2;
          b2 = p2;
          break;
        case 1:
          r2 = q2;
          g2 = v2;
          b2 = p2;
          break;
        case 2:
          r2 = p2;
          g2 = v2;
          b2 = t2;
          break;
        case 3:
          r2 = p2;
          g2 = q2;
          b2 = v2;
          break;
        case 4:
          r2 = t2;
          g2 = p2;
          b2 = v2;
          break;
        default:
          r2 = v2;
          g2 = p2;
          b2 = q2;
      }
    }
    return {
      r: Math.round(r2 * 255),
      g: Math.round(g2 * 255),
      b: Math.round(b2 * 255)
    };
  }
  function rgb2hsv(rgb) {
    const r2 = rgb.r / 255;
    const g2 = rgb.g / 255;
    const b2 = rgb.b / 255;
    let h2 = 1;
    const max = Math.max(r2, g2, b2);
    const min = Math.min(r2, g2, b2);
    const v2 = max;
    const d2 = max - min;
    const s2 = max === 0 ? 0 : d2 / max;
    if (max !== min) {
      switch (max) {
        case r2:
          h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
          break;
        case g2:
          h2 = (b2 - r2) / d2 + 2;
          break;
        case b2:
          h2 = (r2 - g2) / d2 + 4;
          break;
      }
      h2 /= 6;
    }
    return { h: h2 * 360, s: s2, v: v2 };
  }
  function hex2rgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  }
  function getRWithoutAlpha(colour) {
    return colour >> 16 & 255;
  }

  // src/shared/Arrays.ts
  var FixLengthArray = class extends Array {
    constructor(_length) {
      super();
      this._length = _length;
    }
    push(...items) {
      super.push.apply(this, items);
      while (this.length > this._length) {
        this.shift();
      }
      return this.length - 1;
    }
    unshift(...items) {
      super.unshift.apply(this, items);
      while (this.length > this._length) {
        this.pop();
      }
      return this.length - 1;
    }
    setMaxLength(value) {
      this._length = value;
    }
  };
  var FixAverage = class extends FixLengthArray {
    constructor(size) {
      super(size);
    }
    getAvg() {
      return this.reduce((a2, b2) => a2 + b2, 0) / this.length;
    }
  };

  // src/shared/audioAnalyser.ts
  var import_frequencyjs = __toESM(require_frequencyjs());
  var AudioAnalyser = class {
    constructor(audioProcessor, memory = 5) {
      this.audioProcessor = audioProcessor;
      this.memory = memory;
      this.MAX_RGB_VALUE = MAX_RGB;
      this.maxHills = 0;
      this.maxTotalXDistance = 0;
      this.maxTotalYDistance = 0;
      this.maxAvgXDistance = 0;
      this.maxAvgYDistance = 0;
      this.offset = 0;
      this.maxAmplitude = 1;
      this.reds = new FixAverage(memory);
      this.greens = new FixAverage(memory);
      this.blues = new FixAverage(memory);
      this.sample = new FixAverage(10);
    }
    getHills(speaker = "merged") {
      const arrayBuffer = this.getArrayBuffer(speaker);
      const len = arrayBuffer.length;
      let lastValue = arrayBuffer[0];
      const lastPos = {
        x: 0,
        y: arrayBuffer[0]
      };
      let hillCount = 0;
      let totalXDistance = 0;
      let totalYDistance = 0;
      let ascending = arrayBuffer[0] > arrayBuffer[1];
      for (let i2 = 1; i2 < len; i2++) {
        const value = arrayBuffer[i2];
        if (ascending) {
          if (lastValue < value) {
            hillCount++;
            totalXDistance += i2 - lastPos.x;
            let value1 = arrayBuffer[i2];
            let value2 = lastPos.y;
            if (value1 < value2) {
              const temp = value2;
              value2 = value1;
              value1 = temp;
            }
            totalYDistance += value1 - value2;
            ascending = false;
            lastPos.x = i2;
            lastPos.y = arrayBuffer[i2];
          }
        } else {
          if (lastValue > value) {
            ascending = true;
          }
        }
        lastValue = value;
      }
      if (this.maxHills < hillCount) {
        this.maxHills = hillCount;
      }
      if (this.maxTotalXDistance < totalXDistance) {
        this.maxTotalXDistance = totalXDistance;
      }
      if (this.maxTotalYDistance < totalYDistance) {
        this.maxTotalYDistance = totalYDistance;
      }
      const n2 = totalXDistance / hillCount;
      const avgXDistance = isNaN(n2) ? 0 : n2;
      if (this.maxAvgYDistance < avgXDistance) {
        this.maxAvgXDistance = avgXDistance;
      }
      const m = totalYDistance / hillCount;
      const avgYDistance = isNaN(m) ? 0 : m;
      if (this.maxAvgYDistance < avgYDistance) {
        this.maxAvgYDistance = avgYDistance;
      }
      return {
        hillCount,
        totalXDistance,
        totalYDistance,
        avgXDistance,
        avgYDistance
      };
    }
    getRGB() {
      const buffer = this.getArrayBuffer("merged");
      const sample2 = import_frequencyjs.default.Transform.toSpectrum([...buffer], { sampling: 2048, method: "dft" });
      const dom = sample2.dominantFrequency();
      const amp = Math.round(dom.amplitude);
      if (this.maxAmplitude < amp) {
        this.maxAmplitude = amp;
      }
      this.sample.push(amp);
      const aSample = this.sample.getAvg();
      let zero = false;
      if (aSample < 50) {
        this.maxAmplitude = aSample;
        zero = true;
      } else if (aSample > 50) {
        const offsetAdd = Math.round(aSample / 15e3);
        this.offset = (this.offset + offsetAdd) % this.MAX_RGB_VALUE;
      }
      let h2 = Math.round(aSample / this.maxAmplitude * 360 + this.offset) % 720;
      if (h2 > 360) {
        h2 = h2 - 360;
      }
      const color = hsv2rgb({ h: h2, v: zero ? 0 : 1, s: zero ? 0 : 1 });
      const green = color.g;
      const red2 = color.r;
      const blue = color.b;
      this.blues.push(blue);
      this.reds.push(red2);
      this.greens.push(green);
      return { r: this.reds.getAvg(), g: this.greens.getAvg(), b: this.blues.getAvg() };
    }
    getRGBCustom() {
      const { hillCount, avgXDistance, avgYDistance } = this.getHills();
      const green = hillCount / this.maxHills;
      const red2 = avgXDistance / this.maxAvgXDistance;
      const blue = avgYDistance / this.maxAvgYDistance;
      this.reds.push(red2);
      this.blues.push(blue);
      this.greens.push(green);
      const r2 = getRWithoutAlpha(Math.round(this.MAX_RGB_VALUE * this.reds.getAvg()));
      const g2 = getRWithoutAlpha(Math.round(this.MAX_RGB_VALUE * this.greens.getAvg()));
      const b2 = getRWithoutAlpha(Math.round(this.MAX_RGB_VALUE * this.blues.getAvg()));
      return { r: r2, g: g2, b: b2 };
    }
    reset() {
      this.maxHills = 0;
    }
    getArrayBuffer(speaker) {
      switch (speaker) {
        case "left":
          return this.audioProcessor.leftBuffer;
        case "right":
          return this.audioProcessor.rightBuffer;
        default:
          return this.audioProcessor.mergedBuffer;
      }
    }
  };

  // src/client/Utils/Patterns.ts
  var import_events = __toESM(require_events());
  var import_lodash4 = __toESM(require_lodash());
  var PatternService = class {
    constructor(lightSocket) {
      this.lightSocket = lightSocket;
      this.ledPattern = [];
      this.fetched = false;
      this.eventEmitter = new import_events.EventEmitter();
      this.patternUpdateBin = (buffer) => {
        this.patternUpdate(JSON.parse(buffer.getUtf8String()));
      };
      this.patternUpdate = (ledPattern) => {
        this.ledPattern = ledPattern;
        this.eventEmitter.emit("update", this.ledPattern);
      };
      lightSocket.clientSocket.clientHandle.on(16 /* PatternUpdate */, this.patternUpdateBin);
    }
    async fetchPattern(force = false) {
      if (this.fetched && !force) {
        return this.ledPattern;
      }
      try {
        const result = await this.lightSocket.emitPromiseIfPossible(20 /* PatternGet */);
        this.ledPattern = JSON.parse(result.getUtf8String());
      } catch (error) {
        Logger.debug("Fetch pattern", error);
      }
      return this.ledPattern;
    }
    on(type, listener3) {
      return this.eventEmitter.on(type, listener3);
    }
    off(type, listener3) {
      return this.eventEmitter.off(type, listener3);
    }
    update() {
      const json = JSON.stringify(this.ledPattern);
      return this.lightSocket.emitPromiseIfPossible(
        21 /* PatternSet */,
        new BinaryBuffer(utf8StringLen(json)).setUtf8String(json).getBuffer()
      );
    }
    get patterns() {
      return this.ledPattern;
    }
    setPattern(ledPattern) {
      const led = this.ledPattern.find((e2) => e2.name === ledPattern.name);
      if (led) {
        led.ledPattern = ledPattern.ledPattern;
      } else {
        this.ledPattern.push(ledPattern);
      }
    }
    async sendPatterns() {
      await this.lightSocket.emitPromiseIfPossible(21 /* PatternSet */, quickBuffer(this.ledPattern));
    }
    deletePattern(name) {
      const led = this.ledPattern.find((e2) => e2.name === name);
      if (led) {
        removeFromArray(this.ledPattern, led);
      }
    }
    getRandomPatternItem() {
      const ledPattern = {
        delay: (0, import_lodash4.random)(500, 1e3),
        mode: (0, import_lodash4.sample)(MODES),
        rgb: {
          r: (0, import_lodash4.random)(0, 255),
          g: (0, import_lodash4.random)(0, 255),
          b: (0, import_lodash4.random)(0, 255)
        }
      };
      return ledPattern;
    }
    newPattern() {
      const name = "New pattern";
      const pattern = {
        ledPattern: [this.getRandomPatternItem()],
        name
      };
      this.changeName(pattern, name);
      return pattern;
    }
    clonePattern(ledPattern) {
      const clone = cloneDeep(ledPattern);
      this.changeName(clone, clone.name);
      this.patterns.push(clone);
      return clone;
    }
    changeName(ledPattern, name) {
      if (!name) {
        return;
      }
      const originalName = name;
      let i2 = 1;
      while (this.patterns.find((e2) => e2.name.toLowerCase() === name.toLowerCase())) {
        name = `${originalName} (${i2})`;
        i2++;
      }
      ledPattern.name = name;
    }
    destroy() {
    }
  };

  // src/client/Utils/ScheduleService.ts
  var import_events2 = __toESM(require_events());

  // src/shared/PatternAnimator.ts
  var PatternAnimator = class {
    constructor() {
      this.patternReference = {
        ledPattern: [],
        name: "empty pattern"
      };
      this.pattern = cloneDeep(this.patternReference);
      this.patternIndex = 0;
      this.time = 0;
      this.patternTime = 0;
      this._state = { b: 0, g: 0, r: 0 };
      this.draw = () => {
        const pat = this.pattern.ledPattern;
        if (pat.length > 1) {
          this.time++;
          this.patternTime++;
          const currentPattern = pat[this.patternIndex];
          const targetPattern = pat[(this.patternIndex + 1) % pat.length];
          if (this.time >= targetPattern.delay) {
            this.patternIndex = (this.patternIndex + 1) % pat.length;
            this._state.r = targetPattern.rgb.r;
            this._state.g = targetPattern.rgb.g;
            this._state.b = targetPattern.rgb.b;
            this.time = 0;
            if (this.patternIndex === 0) {
              this.patternTime = 0;
            }
          } else if (targetPattern.mode === "fade") {
            const percent = this.time / (targetPattern.delay + 1);
            this._state.r = this.calc(percent, currentPattern.rgb.r, targetPattern.rgb.r);
            this._state.g = this.calc(percent, currentPattern.rgb.g, targetPattern.rgb.g);
            this._state.b = this.calc(percent, currentPattern.rgb.b, targetPattern.rgb.b);
          }
        } else if (pat.length === 1) {
          this._state.r = pat[0].rgb.r;
          this._state.g = pat[0].rgb.g;
          this._state.b = pat[0].rgb.b;
        }
      };
    }
    loadPattern(ledPattern) {
      this.patternReference = ledPattern;
      this.pattern = cloneDeep(ledPattern);
      this.reset();
    }
    reset() {
      this.time = 0;
      this.patternIndex = 0;
      this.patternTime = 0;
    }
    start() {
      if (this.frame === void 0) {
        this.frame = setInterval(this.draw, 1);
      }
    }
    stop() {
      if (this.frame !== void 0) {
        clearInterval(this.frame);
        this.frame = void 0;
      }
    }
    destroy() {
      this.stop();
    }
    isPatternActive(ledPattern) {
      return this.patternReference === ledPattern;
    }
    get state() {
      return this._state;
    }
    get totalTime() {
      let count = 0;
      for (let i2 = 0; i2 < this.pattern.ledPattern.length; i2++) {
        count += this.pattern.ledPattern[i2].delay;
      }
      return count;
    }
    get patternExecutionTime() {
      return this.patternTime;
    }
    get index() {
      return this.patternIndex;
    }
    get frames() {
      return this.pattern.ledPattern.length;
    }
    get indexTime() {
      return this.time;
    }
    get nextIndexTime() {
      const pat = this.pattern.ledPattern;
      return pat[(this.patternIndex + 1) % pat.length].delay;
    }
    correctNumber(number) {
      return isNaN(number) || number === Infinity ? 0 : number;
    }
    calc(percent, current, target) {
      const max = target - current;
      const value = this.correctNumber(current + max * percent);
      return Math.round(value);
    }
  };

  // src/shared/Scheduler.ts
  var Scheduler = class {
    constructor(schedulerDescription) {
      this.DAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      this.patternAnimator = new PatternAnimator();
      this.map = /* @__PURE__ */ new Map();
      this.RGB = { r: 0, b: 0, g: 0 };
      this.destroy = () => {
        if (this.frame) {
          clearTimeout(this.frame);
        }
      };
      this.getDay = (date) => {
        return this.DAYS[date.getDay()];
      };
      this.tick = () => {
        const date = this.getDate();
        const description = this.parseDay(date);
        const pt = parseTimes(description, this.map);
        this.setLed(date, pt, description);
        this.frame = setTimeout(this.tick, 1);
      };
      this.loadSchedule(schedulerDescription);
      this.tick();
    }
    loadSchedule(schedulerDescription) {
      this.map.clear();
      this.schedulerDescription = cloneDeep(schedulerDescription);
    }
    getDate() {
      return /* @__PURE__ */ new Date();
    }
    get state() {
      return this.RGB;
    }
    parseDay(date) {
      const custom = this.schedulerDescription.custom;
      const dateString = getDayString(date);
      const customValue = custom[dateString];
      if (customValue) {
        return customValue;
      } else {
        const day = this.getDay(date);
        const description = this.schedulerDescription[day];
        return description;
      }
    }
    getMockDate(hours, minutes, seconds) {
      const someDate = /* @__PURE__ */ new Date(0);
      someDate.setHours(hours);
      someDate.setMinutes(minutes);
      someDate.setSeconds(seconds);
      return someDate;
    }
    setLed(date, times, dayDescription) {
      const someDate = this.getMockDate(date.getHours(), date.getMinutes(), date.getSeconds());
      const range = times.filter((o2) => {
        const start = this.getMockDate(o2.start[0], o2.start[1], o2.start[2]);
        const end = this.getMockDate(o2.end[0], o2.end[1], o2.end[2]);
        return someDate >= start && someDate <= end;
      });
      const value = range[0];
      if (value) {
        const description = dayDescription[value.stringTime];
        if (description.type === "Pattern") {
          const data = description.data;
          if (!this.patternAnimator.isPatternActive(data)) {
            this.patternAnimator.loadPattern(data);
          }
          this.patternAnimator.draw();
          this.RGB.r = this.patternAnimator.state.r;
          this.RGB.g = this.patternAnimator.state.g;
          this.RGB.b = this.patternAnimator.state.b;
        } else {
          const data = description.data;
          this.RGB.r = data.r;
          this.RGB.g = data.g;
          this.RGB.b = data.b;
        }
      } else {
        this.RGB.r = 0;
        this.RGB.g = 0;
        this.RGB.b = 0;
      }
    }
  };
  function parseDayDescriptionVague(description, patterns) {
    const entires = Object.entries(description);
    const dayDescription = {};
    for (const [value, data] of entires) {
      if (data.type === "Pattern") {
        const patternName = data.data;
        const pattern = patterns.find((e2) => e2.name === patternName);
        if (pattern) {
          dayDescription[value] = {
            type: data.type,
            data: pattern
          };
        } else {
          Logger.debug("Pattern parser", `Pattern name "${patternName}" not found`);
        }
      } else if (data.type === "RGB") {
        dayDescription[value] = {
          type: data.type,
          data: data.data
        };
      } else {
        Logger.debug("Pattern parser", `Unknown type "${data.type}"`);
      }
    }
    return dayDescription;
  }
  function convertDayDescriptionToVague(description) {
    const entires = Object.entries(description);
    const dayDescription = {};
    for (const [value, data] of entires) {
      if (data.type === "Pattern") {
        const patternName = data.data;
        dayDescription[value] = {
          type: data.type,
          data: patternName.name
        };
      } else if (data.type === "RGB") {
        dayDescription[value] = {
          type: data.type,
          data: data.data
        };
      } else {
        Logger.debug("Pattern parser", `Unknown type "${data.type}"`);
      }
    }
    return dayDescription;
  }
  function convertSchedulerDescription(schedulerDescription, patterns) {
    const entires = Object.entries(schedulerDescription);
    const schedulerDescriptionFull = {};
    for (const [value, descriptor] of entires) {
      if (value === "mode") {
        schedulerDescriptionFull[value] = descriptor;
      } else if (value === "custom") {
        const ent = Object.entries(descriptor);
        schedulerDescriptionFull[value] = {};
        for (const [time, des] of ent) {
          schedulerDescriptionFull[value][time] = parseDayDescriptionVague(des, patterns);
        }
      } else {
        schedulerDescriptionFull[value] = parseDayDescriptionVague(descriptor, patterns);
      }
    }
    return schedulerDescriptionFull;
  }
  function convertSchedulerDescriptionVague(schedulerDescription) {
    const entires = Object.entries(schedulerDescription);
    const schedulerDescriptionFull = {};
    for (const [value, descriptor] of entires) {
      if (value === "mode") {
        schedulerDescriptionFull[value] = descriptor;
      } else if (value === "custom") {
        const ent = Object.entries(descriptor);
        schedulerDescriptionFull[value] = {};
        for (const [time, des] of ent) {
          schedulerDescriptionFull[value][time] = convertDayDescriptionToVague(des);
        }
      } else {
        schedulerDescriptionFull[value] = convertDayDescriptionToVague(descriptor);
      }
    }
    return schedulerDescriptionFull;
  }
  function parseTimes(dayDescription, map) {
    const value = map.get(dayDescription);
    if (value) {
      return value;
    }
    const times = Object.keys(dayDescription);
    const parsedTimes = [];
    for (let i2 = 0; i2 < times.length; i2++) {
      const value2 = parseTime(times[i2]);
      if (!value2) {
        Logger.debug("Scheduler", `Invalid time ${times[i2]}`);
        break;
      }
      parsedTimes.push({
        stringTime: times[i2],
        start: value2.sTime,
        end: value2.eTime
      });
    }
    parsedTimes.sort((a2, b2) => {
      const hour = a2.start[0] < b2.start[0] ? -1 : 1;
      const minute = a2.start[1] < b2.start[1] ? -1 : 1;
      const second = a2.start[2] < b2.start[2] ? -1 : 1;
      return hour + minute + second > 0 ? -1 : 1;
    });
    map.set(dayDescription, parsedTimes);
    Logger.debug("Scheduler", "ParsedTimes", parsedTimes);
    return parsedTimes;
  }
  var TIME_SPLITTER = ":";
  var TIME_SEPARATOR = "-";
  function parseTime(value) {
    const startEnd = value.split(TIME_SEPARATOR);
    if (startEnd.length !== 2) {
      Logger.debug("Scheduler", `Invalid time ${value}`);
      return null;
    }
    const sTime = startEnd[0].split(TIME_SPLITTER).map((e2) => toInt(e2));
    const eTime = startEnd[1].split(TIME_SPLITTER).map((e2) => toInt(e2));
    for (const t2 of [sTime, sTime]) {
      for (let i2 = 0; i2 < t2.length; i2++) {
        if (t2[i2] < 0 || i2 === 0 && t2[i2] > 24 || t2[i2] > 60) {
          return null;
        }
      }
    }
    return { sTime, eTime };
  }

  // src/client/Utils/ScheduleService.ts
  var ScheduleService = class {
    constructor(lightSocket, patternService) {
      this.lightSocket = lightSocket;
      this.patternService = patternService;
      this.schedulerDescription = {
        Friday: {},
        Monday: {},
        Saturday: {},
        Sunday: {},
        Thursday: {},
        Tuesday: {},
        Wednesday: {},
        custom: {},
        mode: "fade"
      };
      this.fetched = false;
      this.eventEmitter = new import_events2.EventEmitter();
      this._updated = true;
      this.scheduleUpdate = async (schedulerDescription) => {
        this.schedulerDescription = schedulerDescription;
        this.eventEmitter.emit("update", this.schedulerDescription);
        this.setUpdate(true);
      };
    }
    async fetchSchedule(force = false) {
      if (this.fetched && !force) {
        return this.schedulerDescription;
      }
      try {
        await this.patternService.fetchPattern();
        const result = await this.lightSocket.emitPromiseIfPossible(22 /* ScheduleGet */);
        this.schedulerDescription = JSON.parse(result.getUtf8String());
      } catch (error) {
        Logger.debug("Fetch Schedule", error);
      }
      return this.schedulerDescription;
    }
    on(type, listener3) {
      return this.eventEmitter.on(type, listener3);
    }
    off(type, listener3) {
      return this.eventEmitter.off(type, listener3);
    }
    get description() {
      return this.schedulerDescription;
    }
    async sendSchedule() {
      console.log(this.schedulerDescription);
      await this.lightSocket.emitPromiseIfPossible(
        23 /* ScheduleSet */,
        quickBuffer(this.schedulerDescription)
      );
      this.setUpdate(true);
    }
    getFullSchedule() {
      return convertSchedulerDescription(this.schedulerDescription, this.patternService.patterns);
    }
    getPattern(name) {
      return this.patternService.patterns.find((e2) => e2.name === name);
    }
    setDescriptionVague(description) {
      this.schedulerDescription = description;
      this.setUpdate(false);
    }
    setDescription(description) {
      this.schedulerDescription = convertSchedulerDescriptionVague(description);
      this.setUpdate(false);
    }
    destroy() {
    }
    get updated() {
      return this._updated;
    }
    setUpdate(value) {
      if (value !== this._updated) {
        this._updated = value;
        this.eventEmitter.emit("on-save-change", this._updated);
      }
    }
  };

  // src/client/Utils/AudioSystem.ts
  var AudioLightSystem = class {
    constructor() {
      this.eventEmitter = new import_events3.EventEmitter();
      this._audioProcessor = new AudioProcessor();
      this._audioAnalyser = new AudioAnalyser(this._audioProcessor);
      this.version = "Unknown";
      this.onPCM = (arrayBuffer) => {
        const intArray = new Int16Array(arrayBuffer);
        this._audioProcessor.pipe(intArray);
        const leftBuffer = this._audioProcessor.leftBuffer;
        const rightBuffer = this._audioProcessor.rightBuffer;
        const mergedBuffer = this._audioProcessor.mergedBuffer;
        const rgbBuffer = this._audioProcessor.rgbBuffer;
        this.eventEmitter.emit("audioUpdate", { leftBuffer, rightBuffer, mergedBuffer, rgbBuffer });
      };
      this._raiseNotificationBin = (binary) => {
        const type = binary.getUtf8String();
        const str = binary.getUtf8String();
        const des = binary.getUtf8String();
        const log2 = { title: str, type, description: des };
        this._raiseNotification(log2);
      };
      this._raiseNotification = (log2) => {
        this.eventEmitter.emit("log", log2);
      };
      const script = document.getElementById("version");
      this.version = script.textContent.trim();
      this._lightSocket = new LightSocket(this.version, this.raiseNotification);
      this._lightSocket.clientSocket.clientHandle.on(5 /* SocketLog */, this._raiseNotificationBin);
      this._pattern = new PatternService(this._lightSocket);
      this._scheduleService = new ScheduleService(this._lightSocket, this._pattern);
    }
    on(type, listener3) {
      return this.eventEmitter.on(type, listener3);
    }
    off(type, listener3) {
      return this.eventEmitter.off(type, listener3);
    }
    destroy() {
      this.eventEmitter.removeAllListeners();
      this._lightSocket.socket.handle.disconnect();
    }
    get connected() {
      return this._lightSocket.socket.connected;
    }
    get lightSocket() {
      return this._lightSocket;
    }
    get audioProcessor() {
      return this._audioProcessor;
    }
    get audioAnalyser() {
      return this._audioAnalyser;
    }
    get patternService() {
      return this._pattern;
    }
    get scheduleService() {
      return this._scheduleService;
    }
    raiseError(error) {
      const title = error.name || "Unknown error";
      const stack = error.stack || new Error().stack || "Unknown error has occurred";
      this._raiseNotification({ type: "error", title, description: stack });
    }
    raiseNotification(title, description) {
      this._raiseNotification({ type: "info", title, description });
    }
  };

  // node_modules/styled-components/dist/styled-components.browser.esm.js
  var import_react_is = __toESM(require_react_is());
  var import_react = __toESM(require_react());
  var import_shallowequal = __toESM(require_shallowequal());

  // node_modules/@emotion/stylis/dist/stylis.browser.esm.js
  function stylis_min(W2) {
    function M2(d2, c2, e2, h2, a2) {
      for (var m = 0, b2 = 0, v2 = 0, n2 = 0, q2, g2, x2 = 0, K2 = 0, k2, u2 = k2 = q2 = 0, l2 = 0, r2 = 0, I2 = 0, t2 = 0, B3 = e2.length, J2 = B3 - 1, y2, f = "", p2 = "", F3 = "", G3 = "", C; l2 < B3; ) {
        g2 = e2.charCodeAt(l2);
        l2 === J2 && 0 !== b2 + n2 + v2 + m && (0 !== b2 && (g2 = 47 === b2 ? 10 : 47), n2 = v2 = m = 0, B3++, J2++);
        if (0 === b2 + n2 + v2 + m) {
          if (l2 === J2 && (0 < r2 && (f = f.replace(N2, "")), 0 < f.trim().length)) {
            switch (g2) {
              case 32:
              case 9:
              case 59:
              case 13:
              case 10:
                break;
              default:
                f += e2.charAt(l2);
            }
            g2 = 59;
          }
          switch (g2) {
            case 123:
              f = f.trim();
              q2 = f.charCodeAt(0);
              k2 = 1;
              for (t2 = ++l2; l2 < B3; ) {
                switch (g2 = e2.charCodeAt(l2)) {
                  case 123:
                    k2++;
                    break;
                  case 125:
                    k2--;
                    break;
                  case 47:
                    switch (g2 = e2.charCodeAt(l2 + 1)) {
                      case 42:
                      case 47:
                        a: {
                          for (u2 = l2 + 1; u2 < J2; ++u2) {
                            switch (e2.charCodeAt(u2)) {
                              case 47:
                                if (42 === g2 && 42 === e2.charCodeAt(u2 - 1) && l2 + 2 !== u2) {
                                  l2 = u2 + 1;
                                  break a;
                                }
                                break;
                              case 10:
                                if (47 === g2) {
                                  l2 = u2 + 1;
                                  break a;
                                }
                            }
                          }
                          l2 = u2;
                        }
                    }
                    break;
                  case 91:
                    g2++;
                  case 40:
                    g2++;
                  case 34:
                  case 39:
                    for (; l2++ < J2 && e2.charCodeAt(l2) !== g2; ) {
                    }
                }
                if (0 === k2)
                  break;
                l2++;
              }
              k2 = e2.substring(t2, l2);
              0 === q2 && (q2 = (f = f.replace(ca, "").trim()).charCodeAt(0));
              switch (q2) {
                case 64:
                  0 < r2 && (f = f.replace(N2, ""));
                  g2 = f.charCodeAt(1);
                  switch (g2) {
                    case 100:
                    case 109:
                    case 115:
                    case 45:
                      r2 = c2;
                      break;
                    default:
                      r2 = O;
                  }
                  k2 = M2(c2, r2, k2, g2, a2 + 1);
                  t2 = k2.length;
                  0 < A2 && (r2 = X2(O, f, I2), C = H2(3, k2, r2, c2, D2, z2, t2, g2, a2, h2), f = r2.join(""), void 0 !== C && 0 === (t2 = (k2 = C.trim()).length) && (g2 = 0, k2 = ""));
                  if (0 < t2)
                    switch (g2) {
                      case 115:
                        f = f.replace(da, ea);
                      case 100:
                      case 109:
                      case 45:
                        k2 = f + "{" + k2 + "}";
                        break;
                      case 107:
                        f = f.replace(fa, "$1 $2");
                        k2 = f + "{" + k2 + "}";
                        k2 = 1 === w3 || 2 === w3 && L2("@" + k2, 3) ? "@-webkit-" + k2 + "@" + k2 : "@" + k2;
                        break;
                      default:
                        k2 = f + k2, 112 === h2 && (k2 = (p2 += k2, ""));
                    }
                  else
                    k2 = "";
                  break;
                default:
                  k2 = M2(c2, X2(c2, f, I2), k2, h2, a2 + 1);
              }
              F3 += k2;
              k2 = I2 = r2 = u2 = q2 = 0;
              f = "";
              g2 = e2.charCodeAt(++l2);
              break;
            case 125:
            case 59:
              f = (0 < r2 ? f.replace(N2, "") : f).trim();
              if (1 < (t2 = f.length))
                switch (0 === u2 && (q2 = f.charCodeAt(0), 45 === q2 || 96 < q2 && 123 > q2) && (t2 = (f = f.replace(" ", ":")).length), 0 < A2 && void 0 !== (C = H2(1, f, c2, d2, D2, z2, p2.length, h2, a2, h2)) && 0 === (t2 = (f = C.trim()).length) && (f = "\0\0"), q2 = f.charCodeAt(0), g2 = f.charCodeAt(1), q2) {
                  case 0:
                    break;
                  case 64:
                    if (105 === g2 || 99 === g2) {
                      G3 += f + e2.charAt(l2);
                      break;
                    }
                  default:
                    58 !== f.charCodeAt(t2 - 1) && (p2 += P3(f, q2, g2, f.charCodeAt(2)));
                }
              I2 = r2 = u2 = q2 = 0;
              f = "";
              g2 = e2.charCodeAt(++l2);
          }
        }
        switch (g2) {
          case 13:
          case 10:
            47 === b2 ? b2 = 0 : 0 === 1 + q2 && 107 !== h2 && 0 < f.length && (r2 = 1, f += "\0");
            0 < A2 * Y2 && H2(0, f, c2, d2, D2, z2, p2.length, h2, a2, h2);
            z2 = 1;
            D2++;
            break;
          case 59:
          case 125:
            if (0 === b2 + n2 + v2 + m) {
              z2++;
              break;
            }
          default:
            z2++;
            y2 = e2.charAt(l2);
            switch (g2) {
              case 9:
              case 32:
                if (0 === n2 + m + b2)
                  switch (x2) {
                    case 44:
                    case 58:
                    case 9:
                    case 32:
                      y2 = "";
                      break;
                    default:
                      32 !== g2 && (y2 = " ");
                  }
                break;
              case 0:
                y2 = "\\0";
                break;
              case 12:
                y2 = "\\f";
                break;
              case 11:
                y2 = "\\v";
                break;
              case 38:
                0 === n2 + b2 + m && (r2 = I2 = 1, y2 = "\f" + y2);
                break;
              case 108:
                if (0 === n2 + b2 + m + E2 && 0 < u2)
                  switch (l2 - u2) {
                    case 2:
                      112 === x2 && 58 === e2.charCodeAt(l2 - 3) && (E2 = x2);
                    case 8:
                      111 === K2 && (E2 = K2);
                  }
                break;
              case 58:
                0 === n2 + b2 + m && (u2 = l2);
                break;
              case 44:
                0 === b2 + v2 + n2 + m && (r2 = 1, y2 += "\r");
                break;
              case 34:
              case 39:
                0 === b2 && (n2 = n2 === g2 ? 0 : 0 === n2 ? g2 : n2);
                break;
              case 91:
                0 === n2 + b2 + v2 && m++;
                break;
              case 93:
                0 === n2 + b2 + v2 && m--;
                break;
              case 41:
                0 === n2 + b2 + m && v2--;
                break;
              case 40:
                if (0 === n2 + b2 + m) {
                  if (0 === q2)
                    switch (2 * x2 + 3 * K2) {
                      case 533:
                        break;
                      default:
                        q2 = 1;
                    }
                  v2++;
                }
                break;
              case 64:
                0 === b2 + v2 + n2 + m + u2 + k2 && (k2 = 1);
                break;
              case 42:
              case 47:
                if (!(0 < n2 + m + v2))
                  switch (b2) {
                    case 0:
                      switch (2 * g2 + 3 * e2.charCodeAt(l2 + 1)) {
                        case 235:
                          b2 = 47;
                          break;
                        case 220:
                          t2 = l2, b2 = 42;
                      }
                      break;
                    case 42:
                      47 === g2 && 42 === x2 && t2 + 2 !== l2 && (33 === e2.charCodeAt(t2 + 2) && (p2 += e2.substring(t2, l2 + 1)), y2 = "", b2 = 0);
                  }
            }
            0 === b2 && (f += y2);
        }
        K2 = x2;
        x2 = g2;
        l2++;
      }
      t2 = p2.length;
      if (0 < t2) {
        r2 = c2;
        if (0 < A2 && (C = H2(2, p2, r2, d2, D2, z2, t2, h2, a2, h2), void 0 !== C && 0 === (p2 = C).length))
          return G3 + p2 + F3;
        p2 = r2.join(",") + "{" + p2 + "}";
        if (0 !== w3 * E2) {
          2 !== w3 || L2(p2, 2) || (E2 = 0);
          switch (E2) {
            case 111:
              p2 = p2.replace(ha, ":-moz-$1") + p2;
              break;
            case 112:
              p2 = p2.replace(Q2, "::-webkit-input-$1") + p2.replace(Q2, "::-moz-$1") + p2.replace(Q2, ":-ms-input-$1") + p2;
          }
          E2 = 0;
        }
      }
      return G3 + p2 + F3;
    }
    function X2(d2, c2, e2) {
      var h2 = c2.trim().split(ia);
      c2 = h2;
      var a2 = h2.length, m = d2.length;
      switch (m) {
        case 0:
        case 1:
          var b2 = 0;
          for (d2 = 0 === m ? "" : d2[0] + " "; b2 < a2; ++b2) {
            c2[b2] = Z2(d2, c2[b2], e2).trim();
          }
          break;
        default:
          var v2 = b2 = 0;
          for (c2 = []; b2 < a2; ++b2) {
            for (var n2 = 0; n2 < m; ++n2) {
              c2[v2++] = Z2(d2[n2] + " ", h2[b2], e2).trim();
            }
          }
      }
      return c2;
    }
    function Z2(d2, c2, e2) {
      var h2 = c2.charCodeAt(0);
      33 > h2 && (h2 = (c2 = c2.trim()).charCodeAt(0));
      switch (h2) {
        case 38:
          return c2.replace(F2, "$1" + d2.trim());
        case 58:
          return d2.trim() + c2.replace(F2, "$1" + d2.trim());
        default:
          if (0 < 1 * e2 && 0 < c2.indexOf("\f"))
            return c2.replace(F2, (58 === d2.charCodeAt(0) ? "" : "$1") + d2.trim());
      }
      return d2 + c2;
    }
    function P3(d2, c2, e2, h2) {
      var a2 = d2 + ";", m = 2 * c2 + 3 * e2 + 4 * h2;
      if (944 === m) {
        d2 = a2.indexOf(":", 9) + 1;
        var b2 = a2.substring(d2, a2.length - 1).trim();
        b2 = a2.substring(0, d2).trim() + b2 + ";";
        return 1 === w3 || 2 === w3 && L2(b2, 1) ? "-webkit-" + b2 + b2 : b2;
      }
      if (0 === w3 || 2 === w3 && !L2(a2, 1))
        return a2;
      switch (m) {
        case 1015:
          return 97 === a2.charCodeAt(10) ? "-webkit-" + a2 + a2 : a2;
        case 951:
          return 116 === a2.charCodeAt(3) ? "-webkit-" + a2 + a2 : a2;
        case 963:
          return 110 === a2.charCodeAt(5) ? "-webkit-" + a2 + a2 : a2;
        case 1009:
          if (100 !== a2.charCodeAt(4))
            break;
        case 969:
        case 942:
          return "-webkit-" + a2 + a2;
        case 978:
          return "-webkit-" + a2 + "-moz-" + a2 + a2;
        case 1019:
        case 983:
          return "-webkit-" + a2 + "-moz-" + a2 + "-ms-" + a2 + a2;
        case 883:
          if (45 === a2.charCodeAt(8))
            return "-webkit-" + a2 + a2;
          if (0 < a2.indexOf("image-set(", 11))
            return a2.replace(ja, "$1-webkit-$2") + a2;
          break;
        case 932:
          if (45 === a2.charCodeAt(4))
            switch (a2.charCodeAt(5)) {
              case 103:
                return "-webkit-box-" + a2.replace("-grow", "") + "-webkit-" + a2 + "-ms-" + a2.replace("grow", "positive") + a2;
              case 115:
                return "-webkit-" + a2 + "-ms-" + a2.replace("shrink", "negative") + a2;
              case 98:
                return "-webkit-" + a2 + "-ms-" + a2.replace("basis", "preferred-size") + a2;
            }
          return "-webkit-" + a2 + "-ms-" + a2 + a2;
        case 964:
          return "-webkit-" + a2 + "-ms-flex-" + a2 + a2;
        case 1023:
          if (99 !== a2.charCodeAt(8))
            break;
          b2 = a2.substring(a2.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
          return "-webkit-box-pack" + b2 + "-webkit-" + a2 + "-ms-flex-pack" + b2 + a2;
        case 1005:
          return ka.test(a2) ? a2.replace(aa, ":-webkit-") + a2.replace(aa, ":-moz-") + a2 : a2;
        case 1e3:
          b2 = a2.substring(13).trim();
          c2 = b2.indexOf("-") + 1;
          switch (b2.charCodeAt(0) + b2.charCodeAt(c2)) {
            case 226:
              b2 = a2.replace(G2, "tb");
              break;
            case 232:
              b2 = a2.replace(G2, "tb-rl");
              break;
            case 220:
              b2 = a2.replace(G2, "lr");
              break;
            default:
              return a2;
          }
          return "-webkit-" + a2 + "-ms-" + b2 + a2;
        case 1017:
          if (-1 === a2.indexOf("sticky", 9))
            break;
        case 975:
          c2 = (a2 = d2).length - 10;
          b2 = (33 === a2.charCodeAt(c2) ? a2.substring(0, c2) : a2).substring(d2.indexOf(":", 7) + 1).trim();
          switch (m = b2.charCodeAt(0) + (b2.charCodeAt(7) | 0)) {
            case 203:
              if (111 > b2.charCodeAt(8))
                break;
            case 115:
              a2 = a2.replace(b2, "-webkit-" + b2) + ";" + a2;
              break;
            case 207:
            case 102:
              a2 = a2.replace(b2, "-webkit-" + (102 < m ? "inline-" : "") + "box") + ";" + a2.replace(b2, "-webkit-" + b2) + ";" + a2.replace(b2, "-ms-" + b2 + "box") + ";" + a2;
          }
          return a2 + ";";
        case 938:
          if (45 === a2.charCodeAt(5))
            switch (a2.charCodeAt(6)) {
              case 105:
                return b2 = a2.replace("-items", ""), "-webkit-" + a2 + "-webkit-box-" + b2 + "-ms-flex-" + b2 + a2;
              case 115:
                return "-webkit-" + a2 + "-ms-flex-item-" + a2.replace(ba, "") + a2;
              default:
                return "-webkit-" + a2 + "-ms-flex-line-pack" + a2.replace("align-content", "").replace(ba, "") + a2;
            }
          break;
        case 973:
        case 989:
          if (45 !== a2.charCodeAt(3) || 122 === a2.charCodeAt(4))
            break;
        case 931:
        case 953:
          if (true === la.test(d2))
            return 115 === (b2 = d2.substring(d2.indexOf(":") + 1)).charCodeAt(0) ? P3(d2.replace("stretch", "fill-available"), c2, e2, h2).replace(":fill-available", ":stretch") : a2.replace(b2, "-webkit-" + b2) + a2.replace(b2, "-moz-" + b2.replace("fill-", "")) + a2;
          break;
        case 962:
          if (a2 = "-webkit-" + a2 + (102 === a2.charCodeAt(5) ? "-ms-" + a2 : "") + a2, 211 === e2 + h2 && 105 === a2.charCodeAt(13) && 0 < a2.indexOf("transform", 10))
            return a2.substring(0, a2.indexOf(";", 27) + 1).replace(ma, "$1-webkit-$2") + a2;
      }
      return a2;
    }
    function L2(d2, c2) {
      var e2 = d2.indexOf(1 === c2 ? ":" : "{"), h2 = d2.substring(0, 3 !== c2 ? e2 : 10);
      e2 = d2.substring(e2 + 1, d2.length - 1);
      return R2(2 !== c2 ? h2 : h2.replace(na, "$1"), e2, c2);
    }
    function ea(d2, c2) {
      var e2 = P3(c2, c2.charCodeAt(0), c2.charCodeAt(1), c2.charCodeAt(2));
      return e2 !== c2 + ";" ? e2.replace(oa, " or ($1)").substring(4) : "(" + c2 + ")";
    }
    function H2(d2, c2, e2, h2, a2, m, b2, v2, n2, q2) {
      for (var g2 = 0, x2 = c2, w4; g2 < A2; ++g2) {
        switch (w4 = S2[g2].call(B2, d2, x2, e2, h2, a2, m, b2, v2, n2, q2)) {
          case void 0:
          case false:
          case true:
          case null:
            break;
          default:
            x2 = w4;
        }
      }
      if (x2 !== c2)
        return x2;
    }
    function T2(d2) {
      switch (d2) {
        case void 0:
        case null:
          A2 = S2.length = 0;
          break;
        default:
          if ("function" === typeof d2)
            S2[A2++] = d2;
          else if ("object" === typeof d2)
            for (var c2 = 0, e2 = d2.length; c2 < e2; ++c2) {
              T2(d2[c2]);
            }
          else
            Y2 = !!d2 | 0;
      }
      return T2;
    }
    function U2(d2) {
      d2 = d2.prefix;
      void 0 !== d2 && (R2 = null, d2 ? "function" !== typeof d2 ? w3 = 1 : (w3 = 2, R2 = d2) : w3 = 0);
      return U2;
    }
    function B2(d2, c2) {
      var e2 = d2;
      33 > e2.charCodeAt(0) && (e2 = e2.trim());
      V2 = e2;
      e2 = [V2];
      if (0 < A2) {
        var h2 = H2(-1, c2, e2, e2, D2, z2, 0, 0, 0, 0);
        void 0 !== h2 && "string" === typeof h2 && (c2 = h2);
      }
      var a2 = M2(O, e2, c2, 0, 0);
      0 < A2 && (h2 = H2(-2, a2, e2, e2, D2, z2, a2.length, 0, 0, 0), void 0 !== h2 && (a2 = h2));
      V2 = "";
      E2 = 0;
      z2 = D2 = 1;
      return a2;
    }
    var ca = /^\0+/g, N2 = /[\0\r\f]/g, aa = /: */g, ka = /zoo|gra/, ma = /([,: ])(transform)/g, ia = /,\r+?/g, F2 = /([\t\r\n ])*\f?&/g, fa = /@(k\w+)\s*(\S*)\s*/, Q2 = /::(place)/g, ha = /:(read-only)/g, G2 = /[svh]\w+-[tblr]{2}/, da = /\(\s*(.*)\s*\)/g, oa = /([\s\S]*?);/g, ba = /-self|flex-/g, na = /[^]*?(:[rp][el]a[\w-]+)[^]*/, la = /stretch|:\s*\w+\-(?:conte|avail)/, ja = /([^-])(image-set\()/, z2 = 1, D2 = 1, E2 = 0, w3 = 1, O = [], S2 = [], A2 = 0, R2 = null, Y2 = 0, V2 = "";
    B2.use = T2;
    B2.set = U2;
    void 0 !== W2 && U2(W2);
    return B2;
  }
  var stylis_browser_esm_default = stylis_min;

  // node_modules/@emotion/unitless/dist/unitless.browser.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var unitless_browser_esm_default = unitlessKeys;

  // node_modules/@emotion/memoize/dist/memoize.browser.esm.js
  function memoize(fn) {
    var cache = {};
    return function(arg) {
      if (cache[arg] === void 0)
        cache[arg] = fn(arg);
      return cache[arg];
    };
  }
  var memoize_browser_esm_default = memoize;

  // node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var index = memoize_browser_esm_default(
    function(prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    }
    /* Z+1 */
  );
  var is_prop_valid_browser_esm_default = index;

  // node_modules/styled-components/dist/styled-components.browser.esm.js
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  function v() {
    return (v = Object.assign || function(e2) {
      for (var t2 = 1; t2 < arguments.length; t2++) {
        var n2 = arguments[t2];
        for (var r2 in n2)
          Object.prototype.hasOwnProperty.call(n2, r2) && (e2[r2] = n2[r2]);
      }
      return e2;
    }).apply(this, arguments);
  }
  var g = function(e2, t2) {
    for (var n2 = [e2[0]], r2 = 0, o2 = t2.length; r2 < o2; r2 += 1)
      n2.push(t2[r2], e2[r2 + 1]);
    return n2;
  };
  var S = function(t2) {
    return null !== t2 && "object" == typeof t2 && "[object Object]" === (t2.toString ? t2.toString() : Object.prototype.toString.call(t2)) && !(0, import_react_is.typeOf)(t2);
  };
  var w = Object.freeze([]);
  var E = Object.freeze({});
  function b(e2) {
    return "function" == typeof e2;
  }
  function _(e2) {
    return "string" == typeof e2 && e2 || e2.displayName || e2.name || "Component";
  }
  function N(e2) {
    return e2 && "string" == typeof e2.styledComponentId;
  }
  var A = "undefined" != typeof process && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled";
  var I = "undefined" != typeof window && "HTMLElement" in window;
  var P = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env.REACT_APP_SC_DISABLE_SPEEDY && "" !== process.env.REACT_APP_SC_DISABLE_SPEEDY ? "false" !== process.env.REACT_APP_SC_DISABLE_SPEEDY && process.env.REACT_APP_SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env.SC_DISABLE_SPEEDY && "" !== process.env.SC_DISABLE_SPEEDY ? "false" !== process.env.SC_DISABLE_SPEEDY && process.env.SC_DISABLE_SPEEDY : true);
  var R = true ? { 1: "Cannot create styled-component for component: %s.\n\n", 2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n", 3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n", 4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n", 5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n", 6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n", 7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n', 8: 'ThemeProvider: Please make your "theme" prop an object.\n\n', 9: "Missing document `<head>`\n\n", 10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n", 11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n", 12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n", 13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n", 14: 'ThemeProvider: "theme" prop is required.\n\n', 15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n", 16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n", 17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n" } : {};
  function D() {
    for (var e2 = arguments.length <= 0 ? void 0 : arguments[0], t2 = [], n2 = 1, r2 = arguments.length; n2 < r2; n2 += 1)
      t2.push(n2 < 0 || arguments.length <= n2 ? void 0 : arguments[n2]);
    return t2.forEach(function(t3) {
      e2 = e2.replace(/%[a-z]/, t3);
    }), e2;
  }
  function j(e2) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
      n2[r2 - 1] = arguments[r2];
    throw false ? new Error("An error occurred. See https://git.io/JUIaE#" + e2 + " for more information." + (n2.length > 0 ? " Args: " + n2.join(", ") : "")) : new Error(D.apply(void 0, [R[e2]].concat(n2)).trim());
  }
  var T = function() {
    function e2(e3) {
      this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e3;
    }
    var t2 = e2.prototype;
    return t2.indexOfGroup = function(e3) {
      for (var t3 = 0, n2 = 0; n2 < e3; n2++)
        t3 += this.groupSizes[n2];
      return t3;
    }, t2.insertRules = function(e3, t3) {
      if (e3 >= this.groupSizes.length) {
        for (var n2 = this.groupSizes, r2 = n2.length, o2 = r2; e3 >= o2; )
          (o2 <<= 1) < 0 && j(16, "" + e3);
        this.groupSizes = new Uint32Array(o2), this.groupSizes.set(n2), this.length = o2;
        for (var s2 = r2; s2 < o2; s2++)
          this.groupSizes[s2] = 0;
      }
      for (var i2 = this.indexOfGroup(e3 + 1), a2 = 0, c2 = t3.length; a2 < c2; a2++)
        this.tag.insertRule(i2, t3[a2]) && (this.groupSizes[e3]++, i2++);
    }, t2.clearGroup = function(e3) {
      if (e3 < this.length) {
        var t3 = this.groupSizes[e3], n2 = this.indexOfGroup(e3), r2 = n2 + t3;
        this.groupSizes[e3] = 0;
        for (var o2 = n2; o2 < r2; o2++)
          this.tag.deleteRule(n2);
      }
    }, t2.getGroup = function(e3) {
      var t3 = "";
      if (e3 >= this.length || 0 === this.groupSizes[e3])
        return t3;
      for (var n2 = this.groupSizes[e3], r2 = this.indexOfGroup(e3), o2 = r2 + n2, s2 = r2; s2 < o2; s2++)
        t3 += this.tag.getRule(s2) + "/*!sc*/\n";
      return t3;
    }, e2;
  }();
  var k = /* @__PURE__ */ new Map();
  var x = /* @__PURE__ */ new Map();
  var V = 1;
  var B = function(e2) {
    if (k.has(e2))
      return k.get(e2);
    for (; x.has(V); )
      V++;
    var t2 = V++;
    return ((0 | t2) < 0 || t2 > 1 << 30) && j(16, "" + t2), k.set(e2, t2), x.set(t2, e2), t2;
  };
  var M = function(e2) {
    return x.get(e2);
  };
  var z = function(e2, t2) {
    k.set(e2, t2), x.set(t2, e2);
  };
  var L = "style[" + A + '][data-styled-version="5.2.1"]';
  var G = new RegExp("^" + A + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)');
  var F = function(e2, t2, n2) {
    for (var r2, o2 = n2.split(","), s2 = 0, i2 = o2.length; s2 < i2; s2++)
      (r2 = o2[s2]) && e2.registerName(t2, r2);
  };
  var Y = function(e2, t2) {
    for (var n2 = t2.innerHTML.split("/*!sc*/\n"), r2 = [], o2 = 0, s2 = n2.length; o2 < s2; o2++) {
      var i2 = n2[o2].trim();
      if (i2) {
        var a2 = i2.match(G);
        if (a2) {
          var c2 = 0 | parseInt(a2[1], 10), u2 = a2[2];
          0 !== c2 && (z(u2, c2), F(e2, u2, a2[3]), e2.getTag().insertRules(c2, r2)), r2.length = 0;
        } else
          r2.push(i2);
      }
    }
  };
  var q = function() {
    return "undefined" != typeof __webpack_nonce__ ? __webpack_nonce__ : null;
  };
  var H = function(e2) {
    var t2 = document.head, n2 = e2 || t2, r2 = document.createElement("style"), o2 = function(e3) {
      for (var t3 = e3.childNodes, n3 = t3.length; n3 >= 0; n3--) {
        var r3 = t3[n3];
        if (r3 && 1 === r3.nodeType && r3.hasAttribute(A))
          return r3;
      }
    }(n2), s2 = void 0 !== o2 ? o2.nextSibling : null;
    r2.setAttribute(A, "active"), r2.setAttribute("data-styled-version", "5.2.1");
    var i2 = q();
    return i2 && r2.setAttribute("nonce", i2), n2.insertBefore(r2, s2), r2;
  };
  var $ = function() {
    function e2(e3) {
      var t3 = this.element = H(e3);
      t3.appendChild(document.createTextNode("")), this.sheet = function(e4) {
        if (e4.sheet)
          return e4.sheet;
        for (var t4 = document.styleSheets, n2 = 0, r2 = t4.length; n2 < r2; n2++) {
          var o2 = t4[n2];
          if (o2.ownerNode === e4)
            return o2;
        }
        j(17);
      }(t3), this.length = 0;
    }
    var t2 = e2.prototype;
    return t2.insertRule = function(e3, t3) {
      try {
        return this.sheet.insertRule(t3, e3), this.length++, true;
      } catch (e4) {
        return false;
      }
    }, t2.deleteRule = function(e3) {
      this.sheet.deleteRule(e3), this.length--;
    }, t2.getRule = function(e3) {
      var t3 = this.sheet.cssRules[e3];
      return void 0 !== t3 && "string" == typeof t3.cssText ? t3.cssText : "";
    }, e2;
  }();
  var W = function() {
    function e2(e3) {
      var t3 = this.element = H(e3);
      this.nodes = t3.childNodes, this.length = 0;
    }
    var t2 = e2.prototype;
    return t2.insertRule = function(e3, t3) {
      if (e3 <= this.length && e3 >= 0) {
        var n2 = document.createTextNode(t3), r2 = this.nodes[e3];
        return this.element.insertBefore(n2, r2 || null), this.length++, true;
      }
      return false;
    }, t2.deleteRule = function(e3) {
      this.element.removeChild(this.nodes[e3]), this.length--;
    }, t2.getRule = function(e3) {
      return e3 < this.length ? this.nodes[e3].textContent : "";
    }, e2;
  }();
  var U = function() {
    function e2(e3) {
      this.rules = [], this.length = 0;
    }
    var t2 = e2.prototype;
    return t2.insertRule = function(e3, t3) {
      return e3 <= this.length && (this.rules.splice(e3, 0, t3), this.length++, true);
    }, t2.deleteRule = function(e3) {
      this.rules.splice(e3, 1), this.length--;
    }, t2.getRule = function(e3) {
      return e3 < this.length ? this.rules[e3] : "";
    }, e2;
  }();
  var J = I;
  var X = { isServer: !I, useCSSOMInjection: !P };
  var Z = function() {
    function e2(e3, t3, n2) {
      void 0 === e3 && (e3 = E), void 0 === t3 && (t3 = {}), this.options = v({}, X, {}, e3), this.gs = t3, this.names = new Map(n2), !this.options.isServer && I && J && (J = false, function(e4) {
        for (var t4 = document.querySelectorAll(L), n3 = 0, r2 = t4.length; n3 < r2; n3++) {
          var o2 = t4[n3];
          o2 && "active" !== o2.getAttribute(A) && (Y(e4, o2), o2.parentNode && o2.parentNode.removeChild(o2));
        }
      }(this));
    }
    e2.registerId = function(e3) {
      return B(e3);
    };
    var t2 = e2.prototype;
    return t2.reconstructWithOptions = function(t3, n2) {
      return void 0 === n2 && (n2 = true), new e2(v({}, this.options, {}, t3), this.gs, n2 && this.names || void 0);
    }, t2.allocateGSInstance = function(e3) {
      return this.gs[e3] = (this.gs[e3] || 0) + 1;
    }, t2.getTag = function() {
      return this.tag || (this.tag = (n2 = (t3 = this.options).isServer, r2 = t3.useCSSOMInjection, o2 = t3.target, e3 = n2 ? new U(o2) : r2 ? new $(o2) : new W(o2), new T(e3)));
      var e3, t3, n2, r2, o2;
    }, t2.hasNameForId = function(e3, t3) {
      return this.names.has(e3) && this.names.get(e3).has(t3);
    }, t2.registerName = function(e3, t3) {
      if (B(e3), this.names.has(e3))
        this.names.get(e3).add(t3);
      else {
        var n2 = /* @__PURE__ */ new Set();
        n2.add(t3), this.names.set(e3, n2);
      }
    }, t2.insertRules = function(e3, t3, n2) {
      this.registerName(e3, t3), this.getTag().insertRules(B(e3), n2);
    }, t2.clearNames = function(e3) {
      this.names.has(e3) && this.names.get(e3).clear();
    }, t2.clearRules = function(e3) {
      this.getTag().clearGroup(B(e3)), this.clearNames(e3);
    }, t2.clearTag = function() {
      this.tag = void 0;
    }, t2.toString = function() {
      return function(e3) {
        for (var t3 = e3.getTag(), n2 = t3.length, r2 = "", o2 = 0; o2 < n2; o2++) {
          var s2 = M(o2);
          if (void 0 !== s2) {
            var i2 = e3.names.get(s2), a2 = t3.getGroup(o2);
            if (void 0 !== i2 && 0 !== a2.length) {
              var c2 = A + ".g" + o2 + '[id="' + s2 + '"]', u2 = "";
              void 0 !== i2 && i2.forEach(function(e4) {
                e4.length > 0 && (u2 += e4 + ",");
              }), r2 += "" + a2 + c2 + '{content:"' + u2 + '"}/*!sc*/\n';
            }
          }
        }
        return r2;
      }(this);
    }, e2;
  }();
  var K = /(a)(d)/gi;
  var Q = function(e2) {
    return String.fromCharCode(e2 + (e2 > 25 ? 39 : 97));
  };
  function ee(e2) {
    var t2, n2 = "";
    for (t2 = Math.abs(e2); t2 > 52; t2 = t2 / 52 | 0)
      n2 = Q(t2 % 52) + n2;
    return (Q(t2 % 52) + n2).replace(K, "$1-$2");
  }
  var te = function(e2, t2) {
    for (var n2 = t2.length; n2; )
      e2 = 33 * e2 ^ t2.charCodeAt(--n2);
    return e2;
  };
  var ne = function(e2) {
    return te(5381, e2);
  };
  function re(e2) {
    for (var t2 = 0; t2 < e2.length; t2 += 1) {
      var n2 = e2[t2];
      if (b(n2) && !N(n2))
        return false;
    }
    return true;
  }
  var oe = ne("5.2.1");
  var se = function() {
    function e2(e3, t2, n2) {
      this.rules = e3, this.staticRulesId = "", this.isStatic = false, this.componentId = t2, this.baseHash = te(oe, t2), this.baseStyle = n2, Z.registerId(t2);
    }
    return e2.prototype.generateAndInjectStyles = function(e3, t2, n2) {
      var r2 = this.componentId, o2 = [];
      if (this.baseStyle && o2.push(this.baseStyle.generateAndInjectStyles(e3, t2, n2)), this.isStatic && !n2.hash)
        if (this.staticRulesId && t2.hasNameForId(r2, this.staticRulesId))
          o2.push(this.staticRulesId);
        else {
          var s2 = Ne(this.rules, e3, t2, n2).join(""), i2 = ee(te(this.baseHash, s2.length) >>> 0);
          if (!t2.hasNameForId(r2, i2)) {
            var a2 = n2(s2, "." + i2, void 0, r2);
            t2.insertRules(r2, i2, a2);
          }
          o2.push(i2), this.staticRulesId = i2;
        }
      else {
        for (var c2 = this.rules.length, u2 = te(this.baseHash, n2.hash), l2 = "", d2 = 0; d2 < c2; d2++) {
          var h2 = this.rules[d2];
          if ("string" == typeof h2)
            l2 += h2, u2 = te(u2, h2 + d2);
          else if (h2) {
            var p2 = Ne(h2, e3, t2, n2), f = Array.isArray(p2) ? p2.join("") : p2;
            u2 = te(u2, f + d2), l2 += f;
          }
        }
        if (l2) {
          var m = ee(u2 >>> 0);
          if (!t2.hasNameForId(r2, m)) {
            var y2 = n2(l2, "." + m, void 0, r2);
            t2.insertRules(r2, m, y2);
          }
          o2.push(m);
        }
      }
      return o2.join(" ");
    }, e2;
  }();
  var ie = /^\s*\/\/.*$/gm;
  var ae = [":", "[", ".", "#"];
  function ce(e2) {
    var t2, n2, r2, o2, s2 = void 0 === e2 ? E : e2, i2 = s2.options, a2 = void 0 === i2 ? E : i2, c2 = s2.plugins, u2 = void 0 === c2 ? w : c2, l2 = new stylis_browser_esm_default(a2), d2 = [], h2 = /* @__PURE__ */ function(e3) {
      function t3(t4) {
        if (t4)
          try {
            e3(t4 + "}");
          } catch (e4) {
          }
      }
      return function(n3, r3, o3, s3, i3, a3, c3, u3, l3, d3) {
        switch (n3) {
          case 1:
            if (0 === l3 && 64 === r3.charCodeAt(0))
              return e3(r3 + ";"), "";
            break;
          case 2:
            if (0 === u3)
              return r3 + "/*|*/";
            break;
          case 3:
            switch (u3) {
              case 102:
              case 112:
                return e3(o3[0] + r3), "";
              default:
                return r3 + (0 === d3 ? "/*|*/" : "");
            }
          case -2:
            r3.split("/*|*/}").forEach(t3);
        }
      };
    }(function(e3) {
      d2.push(e3);
    }), f = function(e3, r3, s3) {
      return 0 === r3 && ae.includes(s3[n2.length]) || s3.match(o2) ? e3 : "." + t2;
    };
    function m(e3, s3, i3, a3) {
      void 0 === a3 && (a3 = "&");
      var c3 = e3.replace(ie, ""), u3 = s3 && i3 ? i3 + " " + s3 + " { " + c3 + " }" : c3;
      return t2 = a3, n2 = s3, r2 = new RegExp("\\" + n2 + "\\b", "g"), o2 = new RegExp("(\\" + n2 + "\\b){2,}"), l2(i3 || !s3 ? "" : s3, u3);
    }
    return l2.use([].concat(u2, [function(e3, t3, o3) {
      2 === e3 && o3.length && o3[0].lastIndexOf(n2) > 0 && (o3[0] = o3[0].replace(r2, f));
    }, h2, function(e3) {
      if (-2 === e3) {
        var t3 = d2;
        return d2 = [], t3;
      }
    }])), m.hash = u2.length ? u2.reduce(function(e3, t3) {
      return t3.name || j(15), te(e3, t3.name);
    }, 5381).toString() : "", m;
  }
  var ue = import_react.default.createContext();
  var le = ue.Consumer;
  var de = import_react.default.createContext();
  var he = (de.Consumer, new Z());
  var pe = ce();
  function fe() {
    return (0, import_react.useContext)(ue) || he;
  }
  function me() {
    return (0, import_react.useContext)(de) || pe;
  }
  function ye(e2) {
    var t2 = (0, import_react.useState)(e2.stylisPlugins), n2 = t2[0], s2 = t2[1], c2 = fe(), u2 = (0, import_react.useMemo)(function() {
      var t3 = c2;
      return e2.sheet ? t3 = e2.sheet : e2.target && (t3 = t3.reconstructWithOptions({ target: e2.target }, false)), e2.disableCSSOMInjection && (t3 = t3.reconstructWithOptions({ useCSSOMInjection: false })), t3;
    }, [e2.disableCSSOMInjection, e2.sheet, e2.target]), l2 = (0, import_react.useMemo)(function() {
      return ce({ options: { prefix: !e2.disableVendorPrefixes }, plugins: n2 });
    }, [e2.disableVendorPrefixes, n2]);
    return (0, import_react.useEffect)(function() {
      (0, import_shallowequal.default)(n2, e2.stylisPlugins) || s2(e2.stylisPlugins);
    }, [e2.stylisPlugins]), import_react.default.createElement(ue.Provider, { value: u2 }, import_react.default.createElement(de.Provider, { value: l2 }, true ? import_react.default.Children.only(e2.children) : e2.children));
  }
  var ve = function() {
    function e2(e3, t2) {
      var n2 = this;
      this.inject = function(e4, t3) {
        void 0 === t3 && (t3 = pe);
        var r2 = n2.name + t3.hash;
        e4.hasNameForId(n2.id, r2) || e4.insertRules(n2.id, r2, t3(n2.rules, r2, "@keyframes"));
      }, this.toString = function() {
        return j(12, String(n2.name));
      }, this.name = e3, this.id = "sc-keyframes-" + e3, this.rules = t2;
    }
    return e2.prototype.getName = function(e3) {
      return void 0 === e3 && (e3 = pe), this.name + e3.hash;
    }, e2;
  }();
  var ge = /([A-Z])/;
  var Se = /([A-Z])/g;
  var we = /^ms-/;
  var Ee = function(e2) {
    return "-" + e2.toLowerCase();
  };
  function be(e2) {
    return ge.test(e2) ? e2.replace(Se, Ee).replace(we, "-ms-") : e2;
  }
  var _e = function(e2) {
    return null == e2 || false === e2 || "" === e2;
  };
  function Ne(e2, n2, r2, o2) {
    if (Array.isArray(e2)) {
      for (var s2, i2 = [], a2 = 0, c2 = e2.length; a2 < c2; a2 += 1)
        "" !== (s2 = Ne(e2[a2], n2, r2, o2)) && (Array.isArray(s2) ? i2.push.apply(i2, s2) : i2.push(s2));
      return i2;
    }
    if (_e(e2))
      return "";
    if (N(e2))
      return "." + e2.styledComponentId;
    if (b(e2)) {
      if ("function" != typeof (l2 = e2) || l2.prototype && l2.prototype.isReactComponent || !n2)
        return e2;
      var u2 = e2(n2);
      return (0, import_react_is.isElement)(u2) && console.warn(_(e2) + " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."), Ne(u2, n2, r2, o2);
    }
    var l2;
    return e2 instanceof ve ? r2 ? (e2.inject(r2, o2), e2.getName(o2)) : e2 : S(e2) ? function e3(t2, n3) {
      var r3, o3, s3 = [];
      for (var i3 in t2)
        t2.hasOwnProperty(i3) && !_e(t2[i3]) && (S(t2[i3]) ? s3.push.apply(s3, e3(t2[i3], i3)) : b(t2[i3]) ? s3.push(be(i3) + ":", t2[i3], ";") : s3.push(be(i3) + ": " + (r3 = i3, null == (o3 = t2[i3]) || "boolean" == typeof o3 || "" === o3 ? "" : "number" != typeof o3 || 0 === o3 || r3 in unitless_browser_esm_default ? String(o3).trim() : o3 + "px") + ";"));
      return n3 ? [n3 + " {"].concat(s3, ["}"]) : s3;
    }(e2) : e2.toString();
  }
  function Ae(e2) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
      n2[r2 - 1] = arguments[r2];
    return b(e2) || S(e2) ? Ne(g(w, [e2].concat(n2))) : 0 === n2.length && 1 === e2.length && "string" == typeof e2[0] ? e2 : Ne(g(e2, n2));
  }
  var Ce = /invalid hook call/i;
  var Ie = /* @__PURE__ */ new Set();
  var Pe = function(e2, t2) {
    if (true) {
      var n2 = "The component " + e2 + (t2 ? ' with the id of "' + t2 + '"' : "") + " has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.";
      try {
        (0, import_react.useRef)(), Ie.has(n2) || (console.warn(n2), Ie.add(n2));
      } catch (e3) {
        Ce.test(e3.message) && Ie.delete(n2);
      }
    }
  };
  var Oe = function(e2, t2, n2) {
    return void 0 === n2 && (n2 = E), e2.theme !== n2.theme && e2.theme || t2 || n2.theme;
  };
  var Re = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
  var De = /(^-|-$)/g;
  function je(e2) {
    return e2.replace(Re, "-").replace(De, "");
  }
  var Te = function(e2) {
    return ee(ne(e2) >>> 0);
  };
  function ke(e2) {
    return "string" == typeof e2 && e2.charAt(0) === e2.charAt(0).toLowerCase();
  }
  var xe = function(e2) {
    return "function" == typeof e2 || "object" == typeof e2 && null !== e2 && !Array.isArray(e2);
  };
  var Ve = function(e2) {
    return "__proto__" !== e2 && "constructor" !== e2 && "prototype" !== e2;
  };
  function Be(e2, t2, n2) {
    var r2 = e2[n2];
    xe(t2) && xe(r2) ? Me(r2, t2) : e2[n2] = t2;
  }
  function Me(e2) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
      n2[r2 - 1] = arguments[r2];
    for (var o2 = 0, s2 = n2; o2 < s2.length; o2++) {
      var i2 = s2[o2];
      if (xe(i2))
        for (var a2 in i2)
          Ve(a2) && Be(e2, i2[a2], a2);
    }
    return e2;
  }
  var ze = import_react.default.createContext();
  var Le = ze.Consumer;
  var Fe = {};
  function Ye(e2, t2, n2) {
    var o2 = N(e2), i2 = !ke(e2), a2 = t2.attrs, c2 = void 0 === a2 ? w : a2, d2 = t2.componentId, h2 = void 0 === d2 ? function(e3, t3) {
      var n3 = "string" != typeof e3 ? "sc" : je(e3);
      Fe[n3] = (Fe[n3] || 0) + 1;
      var r2 = n3 + "-" + Te("5.2.1" + n3 + Fe[n3]);
      return t3 ? t3 + "-" + r2 : r2;
    }(t2.displayName, t2.parentComponentId) : d2, p2 = t2.displayName, f = void 0 === p2 ? function(e3) {
      return ke(e3) ? "styled." + e3 : "Styled(" + _(e3) + ")";
    }(e2) : p2, g2 = t2.displayName && t2.componentId ? je(t2.displayName) + "-" + t2.componentId : t2.componentId || h2, S2 = o2 && e2.attrs ? Array.prototype.concat(e2.attrs, c2).filter(Boolean) : c2, A2 = t2.shouldForwardProp;
    o2 && e2.shouldForwardProp && (A2 = t2.shouldForwardProp ? function(n3, r2) {
      return e2.shouldForwardProp(n3, r2) && t2.shouldForwardProp(n3, r2);
    } : e2.shouldForwardProp);
    var C, I2 = new se(n2, g2, o2 ? e2.componentStyle : void 0), P3 = I2.isStatic && 0 === c2.length, O = function(e3, t3) {
      return function(e4, t4, n3, r2) {
        var o3 = e4.attrs, i3 = e4.componentStyle, a3 = e4.defaultProps, c3 = e4.foldedComponentIds, d3 = e4.shouldForwardProp, h3 = e4.styledComponentId, p3 = e4.target;
        (0, import_react.useDebugValue)(h3);
        var f2 = function(e5, t5, n4) {
          void 0 === e5 && (e5 = E);
          var r3 = v({}, t5, { theme: e5 }), o4 = {};
          return n4.forEach(function(e6) {
            var t6, n5, s2, i4 = e6;
            for (t6 in b(i4) && (i4 = i4(r3)), i4)
              r3[t6] = o4[t6] = "className" === t6 ? (n5 = o4[t6], s2 = i4[t6], n5 && s2 ? n5 + " " + s2 : n5 || s2) : i4[t6];
          }), [r3, o4];
        }(Oe(t4, (0, import_react.useContext)(ze), a3) || E, t4, o3), y2 = f2[0], g3 = f2[1], S3 = function(e5, t5, n4, r3) {
          var o4 = fe(), s2 = me(), i4 = t5 ? e5.generateAndInjectStyles(E, o4, s2) : e5.generateAndInjectStyles(n4, o4, s2);
          return (0, import_react.useDebugValue)(i4), !t5 && r3 && r3(i4), i4;
        }(i3, r2, y2, true ? e4.warnTooManyClasses : void 0), w3 = n3, _2 = g3.$as || t4.$as || g3.as || t4.as || p3, N2 = ke(_2), A3 = g3 !== t4 ? v({}, t4, {}, g3) : t4, C2 = {};
        for (var I3 in A3)
          "$" !== I3[0] && "as" !== I3 && ("forwardedAs" === I3 ? C2.as = A3[I3] : (d3 ? d3(I3, is_prop_valid_browser_esm_default) : !N2 || is_prop_valid_browser_esm_default(I3)) && (C2[I3] = A3[I3]));
        return t4.style && g3.style !== t4.style && (C2.style = v({}, t4.style, {}, g3.style)), C2.className = Array.prototype.concat(c3, h3, S3 !== h3 ? S3 : null, t4.className, g3.className).filter(Boolean).join(" "), C2.ref = w3, (0, import_react.createElement)(_2, C2);
      }(C, e3, t3, P3);
    };
    return O.displayName = f, (C = import_react.default.forwardRef(O)).attrs = S2, C.componentStyle = I2, C.displayName = f, C.shouldForwardProp = A2, C.foldedComponentIds = o2 ? Array.prototype.concat(e2.foldedComponentIds, e2.styledComponentId) : w, C.styledComponentId = g2, C.target = o2 ? e2.target : e2, C.withComponent = function(e3) {
      var r2 = t2.componentId, o3 = function(e4, t3) {
        if (null == e4)
          return {};
        var n3, r3, o4 = {}, s3 = Object.keys(e4);
        for (r3 = 0; r3 < s3.length; r3++)
          n3 = s3[r3], t3.indexOf(n3) >= 0 || (o4[n3] = e4[n3]);
        return o4;
      }(t2, ["componentId"]), s2 = r2 && r2 + "-" + (ke(e3) ? e3 : je(_(e3)));
      return Ye(e3, v({}, o3, { attrs: S2, componentId: s2 }), n2);
    }, Object.defineProperty(C, "defaultProps", { get: function() {
      return this._foldedDefaultProps;
    }, set: function(t3) {
      this._foldedDefaultProps = o2 ? Me({}, e2.defaultProps, t3) : t3;
    } }), Pe(f, g2), C.warnTooManyClasses = /* @__PURE__ */ function(e3, t3) {
      var n3 = {}, r2 = false;
      return function(o3) {
        if (!r2 && (n3[o3] = true, Object.keys(n3).length >= 200)) {
          var s2 = t3 ? ' with the id of "' + t3 + '"' : "";
          console.warn("Over 200 classes were generated for component " + e3 + s2 + ".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), r2 = true, n3 = {};
        }
      };
    }(f, g2), C.toString = function() {
      return "." + C.styledComponentId;
    }, i2 && (0, import_hoist_non_react_statics.default)(C, e2, { attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true, withComponent: true }), C;
  }
  var qe = function(e2) {
    return function e3(t2, r2, o2) {
      if (void 0 === o2 && (o2 = E), !(0, import_react_is.isValidElementType)(r2))
        return j(1, String(r2));
      var s2 = function() {
        return t2(r2, o2, Ae.apply(void 0, arguments));
      };
      return s2.withConfig = function(n2) {
        return e3(t2, r2, v({}, o2, {}, n2));
      }, s2.attrs = function(n2) {
        return e3(t2, r2, v({}, o2, { attrs: Array.prototype.concat(o2.attrs, n2).filter(Boolean) }));
      }, s2;
    }(Ye, e2);
  };
  ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"].forEach(function(e2) {
    qe[e2] = qe(e2);
  });
  var He = function() {
    function e2(e3, t3) {
      this.rules = e3, this.componentId = t3, this.isStatic = re(e3), Z.registerId(this.componentId + 1);
    }
    var t2 = e2.prototype;
    return t2.createStyles = function(e3, t3, n2, r2) {
      var o2 = r2(Ne(this.rules, t3, n2, r2).join(""), ""), s2 = this.componentId + e3;
      n2.insertRules(s2, s2, o2);
    }, t2.removeStyles = function(e3, t3) {
      t3.clearRules(this.componentId + e3);
    }, t2.renderStyles = function(e3, t3, n2, r2) {
      e3 > 2 && Z.registerId(this.componentId + e3), this.removeStyles(e3, n2), this.createStyles(e3, t3, n2, r2);
    }, e2;
  }();
  var Ue = function() {
    function e2() {
      var e3 = this;
      this._emitSheetCSS = function() {
        var t3 = e3.instance.toString(), n2 = q();
        return "<style " + [n2 && 'nonce="' + n2 + '"', A + '="true"', 'data-styled-version="5.2.1"'].filter(Boolean).join(" ") + ">" + t3 + "</style>";
      }, this.getStyleTags = function() {
        return e3.sealed ? j(2) : e3._emitSheetCSS();
      }, this.getStyleElement = function() {
        var t3;
        if (e3.sealed)
          return j(2);
        var n2 = ((t3 = {})[A] = "", t3["data-styled-version"] = "5.2.1", t3.dangerouslySetInnerHTML = { __html: e3.instance.toString() }, t3), o2 = q();
        return o2 && (n2.nonce = o2), [import_react.default.createElement("style", v({}, n2, { key: "sc-0-0" }))];
      }, this.seal = function() {
        e3.sealed = true;
      }, this.instance = new Z({ isServer: true }), this.sealed = false;
    }
    var t2 = e2.prototype;
    return t2.collectStyles = function(e3) {
      return this.sealed ? j(2) : import_react.default.createElement(ye, { sheet: this.instance }, e3);
    }, t2.interleaveWithNodeStream = function(e3) {
      return j(3);
    }, e2;
  }();
  "undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"), window["__styled-components-init__"] = window["__styled-components-init__"] || 0, 1 === window["__styled-components-init__"] && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window["__styled-components-init__"] += 1;
  var styled_components_browser_esm_default = qe;

  // src/client/Components/NavigationBar/NavigationBar.tsx
  var import_react2 = __toESM(require_react());
  var Div = styled_components_browser_esm_default.div`
    width: calc(100% - 10px);
    background-color: rgb(0, 0, 0);
    padding: 5px;
    margin: 5px 0 0 0;
    border-top: 5px solid rgb(32, 32, 32);
    border-bottom: 5px solid rgb(32, 32, 32);
`;
  var Button = styled_components_browser_esm_default.button`
    display: inline;
    background-color: transparent;
    color: white;
    border: none;
    padding: 10px 20px;
    margin: 2px;
    outline: none;
    transition: background-color 0.15s;
    :hover {
        background-color: rgba(64, 64, 64, 0.5);
    }
    :disabled {
        background-color: rgba(64, 64, 64, 1);
    }
`;
  var NavigationBar = class extends import_react2.default.Component {
    constructor() {
      super(...arguments);
      this.isDisabled = (tab) => {
        return this.props.tab === tab;
      };
      this.onClick = (tab) => {
        this.props.onChange(tab);
      };
    }
    render() {
      return /* @__PURE__ */ import_react2.default.createElement(Div, null, /* @__PURE__ */ import_react2.default.createElement(Button, { onClick: () => this.onClick("Manual"), disabled: this.isDisabled("Manual") }, "Manual"), /* @__PURE__ */ import_react2.default.createElement(Button, { onClick: () => this.onClick("Audio"), disabled: this.isDisabled("Audio") }, "Audio"), /* @__PURE__ */ import_react2.default.createElement(Button, { onClick: () => this.onClick("AutoPilot"), disabled: this.isDisabled("AutoPilot") }, "AutoPilot"), /* @__PURE__ */ import_react2.default.createElement(Button, { onClick: () => this.onClick("Device"), disabled: this.isDisabled("Device") }, "Device"), this.props.als.lightSocket.isMagicHome ? /* @__PURE__ */ import_react2.default.createElement(Button, { onClick: () => this.onClick("MagicHome"), disabled: this.isDisabled("MagicHome") }, "MagicHome") : null, this.props.als.lightSocket.hasActiveCamera ? /* @__PURE__ */ import_react2.default.createElement(Button, { onClick: () => this.onClick("Camera"), disabled: this.isDisabled("Camera") }, "Camera") : null);
    }
  };

  // src/client/Components/Tabs/Tabs.tsx
  var import_react23 = __toESM(require_react());

  // src/client/Components/Tabs/Audio.tsx
  var import_react5 = __toESM(require_react());

  // src/client/Components/CanvasBase/CanvasBase.tsx
  var import_react3 = __toESM(require_react());
  var BaseCanvas = class extends import_react3.default.Component {
    constructor(props) {
      super(props);
      this.ref = import_react3.default.createRef();
      this._ctx = null;
    }
    get ctx() {
      if (!this._ctx) {
        this._ctx = this.canvas.getContext("2d");
      }
      return this._ctx;
    }
    clear() {
      const { width, height } = this.canvasBounds;
      this.ctx.clearRect(0, 0, width, height);
    }
    get canvas() {
      return this.ref.current;
    }
    get canvasBounds() {
      const width = this.ref.current.width;
      const height = this.ref.current.height;
      return { width, height };
    }
    render() {
      const css2 = this.props.canvasStyle;
      return /* @__PURE__ */ import_react3.default.createElement("canvas", { ref: this.ref, style: css2, height: this.props.height, width: this.props.width });
    }
  };

  // src/client/Components/AudioVisualizer/AudioLine.tsx
  var AudioVisualizerLine = class extends BaseCanvas {
    constructor(props) {
      super(props);
      this.MAX_DRAW_TIME = 500;
      this.last = performance.now();
      this.framesDrawn = 0;
      this.fps = 0;
      this.maxDraw = -1;
      this.lowFPSCount = 0;
      this.bufferLen = 0;
      this.MAX_AVG = 100;
      this.avg = {
        hillCount: new FixAverage(this.MAX_AVG),
        totalXDistance: new FixAverage(this.MAX_AVG),
        totalYDistance: new FixAverage(this.MAX_AVG),
        avgXDistance: new FixAverage(this.MAX_AVG),
        avgYDistance: new FixAverage(this.MAX_AVG)
      };
      this.draw = () => {
        const audioProcessor = this.props.audioSystem.audioProcessor;
        const now = performance.now();
        if (now - this.last - 1e3) {
          this.fps = Math.round(this.framesDrawn * 1e3 / (now - this.last));
          this.framesDrawn = 0;
          this.last = now;
          if (!this.state.forceDrawEveryThing && this.fps < 15) {
            this.lowFPSCount++;
            if (this.lowFPSCount > 5) {
              this.lowFPSCount = 0;
              if (this.maxDraw === -1) {
                this.maxDraw = Math.round(audioProcessor.mergedBuffer.length * 0.7);
              } else {
                this.maxDraw = Math.round(this.maxDraw * 0.7);
              }
            }
          } else {
            this.lowFPSCount = 0;
          }
        }
        if (audioProcessor.mergedBuffer.length !== this.bufferLen) {
          this.maxDraw = -1;
          this.lowFPSCount = 0;
          this.bufferLen = audioProcessor.mergedBuffer.length;
        }
        this.clear();
        this.ctx.fillStyle = "#FFFFFF10";
        const { width, height } = this.canvasBounds;
        this.ctx.fillRect(0, 0, width, height);
        const half = height * 0.5;
        this.ctx.strokeStyle = "#00000064";
        this.ctx.moveTo(0, half);
        this.ctx.lineTo(width, half);
        this.ctx.stroke();
        this.drawBuffer(audioProcessor.leftBuffer, "blue");
        this.drawBuffer(audioProcessor.rightBuffer, "orange");
        this.drawBuffer(audioProcessor.mergedBuffer, "#000000FF");
        this.ctx.fillStyle = "#FFFFFFFF";
        this.ctx.font = "12px serif";
        this.ctx.fillText(`FPS:   ${this.fps}`, 10, 20);
        const hills = this.props.audioAnalyser.getHills();
        this.avg.avgXDistance.push(hills.hillCount);
        this.avg.totalXDistance.push(hills.totalXDistance);
        this.avg.totalYDistance.push(hills.totalYDistance);
        this.avg.avgXDistance.push(hills.avgXDistance);
        this.avg.avgYDistance.push(hills.avgYDistance);
        this.ctx.fillText(`Hills: ${Math.round(this.avg.avgXDistance.getAvg())}`, 10, 32);
        this.ctx.fillText(`XDist: ${Math.round(this.avg.totalXDistance.getAvg())}`, 10, 44);
        this.ctx.fillText(`YDist: ${Math.round(this.avg.totalYDistance.getAvg())}`, 10, 56);
        this.ctx.fillText(`XAvg: ${Math.round(this.avg.avgXDistance.getAvg())}`, 10, 68);
        this.ctx.fillText(`YAvg: ${Math.round(this.avg.avgYDistance.getAvg())}`, 10, 80);
        this.framesDrawn++;
        this.frame = requestAnimationFrame(this.draw);
      };
      this.state = {
        forceDrawEveryThing: false,
        drawFps: true
      };
    }
    componentDidMount() {
      this.frame = requestAnimationFrame(this.draw);
    }
    componentWillUnmount() {
      cancelAnimationFrame(this.frame);
    }
    filterData(array, samples) {
      const blockSize = Math.floor(array.length / samples);
      const filteredData = [];
      for (let i2 = 0; i2 < samples; i2++) {
        const blockStart = blockSize * i2;
        let sum = 0;
        for (let j2 = 0; j2 < blockSize; j2++) {
          sum = sum + Math.abs(array[blockStart + j2]);
        }
        filteredData.push(sum / blockSize);
      }
      return filteredData;
    }
    drawBuffer(data, color) {
      const { height, width } = this.canvasBounds;
      const half = height * 0.5;
      const drawingLen = this.maxDraw === -1 ? data.length : this.maxDraw;
      const len = this.state.forceDrawEveryThing ? data.length : drawingLen;
      const widthDraw = width / len;
      const max = this.audioProcessor.maxValue * 0.8;
      const ctx = this.ctx;
      ctx.strokeStyle = color;
      const lastPos = {
        x: 0,
        y: half
      };
      for (let i2 = 0; i2 < len; i2++) {
        const value = data[i2];
        const drawHeight = half * (value / max);
        ctx.beginPath();
        const x2 = i2 * widthDraw;
        const y2 = half - drawHeight;
        ctx.moveTo(lastPos.x, lastPos.y);
        ctx.lineTo(x2, y2);
        lastPos.x = x2;
        lastPos.y = y2;
        ctx.stroke();
      }
    }
    get audioProcessor() {
      return this.props.audioSystem.audioProcessor;
    }
  };

  // src/client/Components/Tabs/Audio.tsx
  var import_react_loading = __toESM(require_react_loading());

  // src/client/Components/CheckBox/Checkbox.tsx
  var import_react4 = __toESM(require_react());
  var Warper = styled_components_browser_esm_default.div`
    display: inline-block;
    margin: 5px;
    cursor: pointer;
`;
  var Bar = styled_components_browser_esm_default.div`
    width: 50px;
    height: 10px;
    border-radius: 5px;
    margin-left: 5px;
    display: inline-block;
    transition: color 1s;
`;
  var BallWarper = styled_components_browser_esm_default.div`
    position: relative;
`;
  var Ball = styled_components_browser_esm_default.div`
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: white;
    border-radius: 20px;
    bottom: -15px;
    transition: left 0.5s;
`;
  var CheckBox = class extends import_react4.default.Component {
    get ballStyle() {
      return {
        left: this.props.enabled ? `30px` : `0px`
      };
    }
    get backgroundStyle() {
      return {
        backgroundColor: this.props.enabled ? `green` : `red`
      };
    }
    render() {
      const text = this.props.text || "as";
      return /* @__PURE__ */ import_react4.default.createElement(Warper, { onClick: () => this.props.onChange(!this.props.enabled) }, text, /* @__PURE__ */ import_react4.default.createElement(Bar, { style: this.backgroundStyle }, /* @__PURE__ */ import_react4.default.createElement(BallWarper, null, /* @__PURE__ */ import_react4.default.createElement(Ball, { style: this.ballStyle }))));
    }
  };

  // src/client/Components/Tabs/Audio.tsx
  var Div2 = styled_components_browser_esm_default.div`
    width: 100%;
    padding: 4px;
    margin: 10px;
    border: 1px solid white;
    span {
        display: block;
    }

    li {
        margin-left: 50px;
        font-size: 10px;
    }
`;
  var Tab = styled_components_browser_esm_default.div`
    display: flex;
    flex-direction: column;
    height: 100%;
`;
  var MaxDiv = styled_components_browser_esm_default.div`
    height: 100%;
    width: 100%;
    overflow: auto;
    display: flex;
    flex-direction: row;
`;
  var Button2 = styled_components_browser_esm_default.button`
    padding: 5px;
    margin: 5px;
    background-color: black;
    color: white;
    border: none;
    outline: none;
    :hover {
        background-color: rgba(16, 16, 16);
    }
`;
  var AudioTab = class extends import_react5.default.Component {
    constructor(props) {
      super(props);
      this.destroyed = false;
      this.onMode = (mode) => {
        this.setState({ mode });
      };
      this.updateDevices = async () => {
        const result = await this.props.als.lightSocket.emitPromiseIfPossible(17 /* AudioIsServerConnected */);
        if (this.destroyed) {
          return;
        }
        const connected = result.getBool();
        this.setState({ connected });
        if (connected) {
          const deviceInfoBuffer = await this.props.als.lightSocket.emitPromiseIfPossible(
            14 /* AudioActiveDevice */
          );
          if (this.destroyed) {
            return;
          }
          const deviceInfo = JSON.parse(deviceInfoBuffer.getUtf8String());
          this.setState({ deviceInfo });
          const allDevicesBuffer = await this.props.als.lightSocket.emitPromiseIfPossible(
            15 /* AudioAllDevices */
          );
          if (this.destroyed) {
            return;
          }
          const allDevices = JSON.parse(allDevicesBuffer.getUtf8String());
          this.setState({ allDevices });
        }
      };
      this.audioDisconnect = () => {
        this.setState({ connected: false, deviceInfo: void 0 });
      };
      this.fetchInfo = async () => {
        this.setState({ connected: true });
        const ls = this.props.als.lightSocket;
        const deviceInfoBuffer = await ls.emitPromiseIfPossible(14 /* AudioActiveDevice */);
        const onDeviceProcessingBuffer = await ls.emitPromiseIfPossible(
          18 /* AudioIsInternalAudioProcessing */
        );
        const apis = await ls.emitPromiseIfPossible(19 /* AudioApis */);
        if (this.destroyed) {
          return;
        }
        const values = Object.entries(apis);
        const deviceInfo = JSON.parse(deviceInfoBuffer.getUtf8String());
        const onDeviceProcessing = JSON.parse(onDeviceProcessingBuffer.getUtf8String());
        this.setState({ deviceInfo, onDeviceProcessing, apis: values });
        this.updateDevices();
      };
      this.resize = () => {
        this.setState({ width: window.innerWidth });
      };
      this.updateDevice = async () => {
        const c2 = { ...this.state.change };
        c2.updating = true;
        this.setState({ change: c2 });
        const deviceUpdate = {
          type: "audio-device-update",
          data: {
            frameSize: c2.frameSize,
            id: c2.id,
            name: c2.name,
            sampleRate: c2.preferredSampleRate
          }
        };
        try {
          await this.props.als.lightSocket.emitPromiseIfPossible(
            16 /* AudioSettingsUpdate */,
            quickBuffer(deviceUpdate)
          );
          this.setState({ change: void 0 });
          this.fetchInfo();
        } catch (error) {
          alert("Something went wrong");
          console.error(error);
          const c3 = { ...this.state.change };
          c3.updating = false;
          this.setState({ change: c3 });
        }
      };
      this.onModeUpdate = (mode) => {
        this.setState({ mode });
      };
      this.changeMode = (mode, on) => {
        this.props.als.lightSocket.emitPromiseIfPossible(2 /* ModeSet */, quickBuffer(mode));
      };
      this.state = {
        width: window.innerWidth,
        connected: null,
        deviceInfo: void 0,
        allDevices: void 0,
        change: void 0,
        mode: props.als.lightSocket.mode,
        apis: [],
        onDeviceProcessing: false
      };
    }
    async componentDidMount() {
      this.audioAnalyser = new AudioAnalyser(this.props.als.audioProcessor);
      window.addEventListener("resize", this.resize);
      this.socket.on("mode-update", this.onMode);
      this.socket.clientSocket.clientHandle.on(14 /* AudioServerConnected */, this.fetchInfo);
      this.socket.clientSocket.clientHandle.on(15 /* AudioServerDisconnected */, this.audioDisconnect);
      if (this.socket.connected) {
        this.fetchInfo();
        try {
          this.updateDevices();
          this.props.als.lightSocket.emitPromiseIfPossible(13 /* AudioPcmReport */, quickBuffer(true));
        } catch (error) {
          Logger.debug("Socket error pcm-report", error);
        }
      }
    }
    componentWillUnmount() {
      this.destroyed = true;
      window.removeEventListener("resize", this.resize);
      this.props.als.lightSocket.off("mode-update", this.onMode);
      this.props.als.lightSocket.clientSocket.clientHandle.off(
        14 /* AudioServerConnected */,
        this.fetchInfo
      );
      this.props.als.lightSocket.clientSocket.clientHandle.off(
        15 /* AudioServerDisconnected */,
        this.audioDisconnect
      );
      (async () => {
        try {
          await this.props.als.lightSocket.emitPromiseIfPossible(
            13 /* AudioPcmReport */,
            quickBuffer(false)
          );
        } catch (error) {
          Logger.debug("Socket error pcm-report", error);
        }
      })();
    }
    get socket() {
      return this.props.als.lightSocket;
    }
    get activeDevice() {
      if (!this.state.deviceInfo) {
        return /* @__PURE__ */ import_react5.default.createElement(import_react_loading.default, { className: "m-2", type: "bars", color: "#ffffff", height: 50, width: 50 });
      }
      const s2 = this.state;
      const change = s2.allDevices && !s2.change && this ? /* @__PURE__ */ import_react5.default.createElement(
        Button2,
        {
          onClick: () => {
            const device = this.state.allDevices.find((d3) => d3.name === this.state.deviceInfo.device.name);
            const id = this.state.allDevices.indexOf(device);
            this.setState({
              change: { ...device, id, frameSize: s2.deviceInfo.frameSize, updating: false }
            });
          }
        },
        "Change"
      ) : null;
      const updateInterProcessing = s2.allDevices && !s2.change && s2.onDeviceProcessing !== void 0 && this ? /* @__PURE__ */ import_react5.default.createElement(
        Button2,
        {
          style: { backgroundColor: this.state.onDeviceProcessing ? "green" : "gray" },
          onClick: async () => {
            if (this.socket.connected) {
              const b2 = this.state.onDeviceProcessing;
              this.setState({ onDeviceProcessing: void 0 });
              try {
                const result = await this.socket.emitPromiseIfPossible(
                  16 /* AudioSettingsUpdate */,
                  quickBuffer({
                    type: "audi-internal-processing",
                    data: !b2
                  })
                );
                if (!this.destroyed) {
                  this.setState({ onDeviceProcessing: JSON.parse(result.getUtf8String()) });
                }
              } catch (error) {
                console.error(error);
                if (!this.destroyed) {
                  this.setState({ onDeviceProcessing: b2 });
                }
              }
            }
          }
        },
        "on device processing"
      ) : null;
      const d2 = this.state.deviceInfo.device;
      const e2 = this.state.deviceInfo;
      return /* @__PURE__ */ import_react5.default.createElement(Div2, null, /* @__PURE__ */ import_react5.default.createElement("span", null, "Computer name: ", /* @__PURE__ */ import_react5.default.createElement("b", null, e2.computerName)), /* @__PURE__ */ import_react5.default.createElement("span", null, "name: ", /* @__PURE__ */ import_react5.default.createElement("b", null, d2.name)), /* @__PURE__ */ import_react5.default.createElement("span", null, "inputChannels: ", /* @__PURE__ */ import_react5.default.createElement("b", null, d2.inputChannels)), /* @__PURE__ */ import_react5.default.createElement("span", null, "duplexChannels: ", /* @__PURE__ */ import_react5.default.createElement("b", null, d2.duplexChannels)), /* @__PURE__ */ import_react5.default.createElement("span", null, "isDefaultInput: ", /* @__PURE__ */ import_react5.default.createElement("b", null, d2.isDefaultInput ? "True" : "False")), /* @__PURE__ */ import_react5.default.createElement("span", null, "isDefaultOutput: ", /* @__PURE__ */ import_react5.default.createElement("b", null, d2.isDefaultOutput ? "True" : "False")), /* @__PURE__ */ import_react5.default.createElement("span", null, "nativeFormats: ", /* @__PURE__ */ import_react5.default.createElement("b", null, d2.nativeFormats)), /* @__PURE__ */ import_react5.default.createElement("span", null, "outputChannels: ", /* @__PURE__ */ import_react5.default.createElement("b", null, d2.outputChannels)), /* @__PURE__ */ import_react5.default.createElement("span", null, "preferredSampleRate: ", /* @__PURE__ */ import_react5.default.createElement("b", null, d2.preferredSampleRate)), /* @__PURE__ */ import_react5.default.createElement("span", null, "sampleRates:", " ", /* @__PURE__ */ import_react5.default.createElement("ul", null, d2.sampleRates.map((e3, i2) => /* @__PURE__ */ import_react5.default.createElement("li", { key: i2 }, /* @__PURE__ */ import_react5.default.createElement("b", null, e3))))), /* @__PURE__ */ import_react5.default.createElement("br", null), /* @__PURE__ */ import_react5.default.createElement("span", null, "frameSize: ", /* @__PURE__ */ import_react5.default.createElement("b", null, e2.frameSize)), /* @__PURE__ */ import_react5.default.createElement("span", null, "samplingRate: ", /* @__PURE__ */ import_react5.default.createElement("b", null, e2.samplingRate)), change, " ", updateInterProcessing);
    }
    get changeDevice() {
      if (!this.state.change) {
        return null;
      }
      const s2 = this.state;
      const device = (ev) => {
        const int = parseInt(ev.target.value);
        const device2 = this.state.allDevices[int];
        const id = this.state.allDevices.indexOf(device2);
        this.setState({ change: { ...device2, id, frameSize: s2.deviceInfo.frameSize, updating: false } });
      };
      const d2 = this.state.change;
      const deviceDropDown = /* @__PURE__ */ import_react5.default.createElement("select", { name: "devices", id: "devices", onChange: device, value: d2.id }, this.state.allDevices.map((e2, i2) => /* @__PURE__ */ import_react5.default.createElement("option", { key: i2, value: i2 }, e2.name)));
      const sampleRate = (ev) => {
        const int = parseInt(ev.target.value);
        const device2 = d2.sampleRates[int];
        const update = { ...d2 };
        update.preferredSampleRate = device2;
        this.setState({ change: { ...update } });
      };
      const sampleDropDown = /* @__PURE__ */ import_react5.default.createElement("select", { name: "SampleRate", onChange: sampleRate, id: "sampleRate" }, this.state.change.sampleRates.map((e2, i2) => /* @__PURE__ */ import_react5.default.createElement("option", { key: i2, value: i2 }, e2)));
      const updateFrameSize = (e2) => {
        let value = parseInt(e2.target.value.replace(/\D/g, ""));
        if (isNaN(value)) {
          value = 920;
        }
        const change = { ...this.state.change };
        change.frameSize = value;
        this.setState({ change });
      };
      const buttons = d2.updating ? /* @__PURE__ */ import_react5.default.createElement(import_react_loading.default, { className: "m-2", type: "bars", color: "#ffffff", height: 50, width: 50 }) : /* @__PURE__ */ import_react5.default.createElement("div", null, /* @__PURE__ */ import_react5.default.createElement(Button2, { onClick: () => this.setState({ change: void 0 }) }, "Cancel"), /* @__PURE__ */ import_react5.default.createElement(Button2, { onClick: this.updateDevice }, "update"));
      return /* @__PURE__ */ import_react5.default.createElement(Div2, null, /* @__PURE__ */ import_react5.default.createElement("div", null, "APIs", this.state.apis.map((a2, i2) => {
        return /* @__PURE__ */ import_react5.default.createElement(
          Button2,
          {
            key: i2,
            onClick: async () => {
              try {
                await this.socket.emitPromiseIfPossible(
                  16 /* AudioSettingsUpdate */,
                  quickBuffer({
                    type: "audio-api-update",
                    data: a2[1]
                  })
                );
                if (!this.destroyed) {
                  this.fetchInfo();
                }
              } catch (error) {
                console.error(error);
              }
            }
          },
          a2[0]
        );
      })), /* @__PURE__ */ import_react5.default.createElement("span", null, "name: ", deviceDropDown), /* @__PURE__ */ import_react5.default.createElement("span", null, "Sample rate: ", sampleDropDown), /* @__PURE__ */ import_react5.default.createElement("span", null, "Frame size: ", /* @__PURE__ */ import_react5.default.createElement("input", { type: "text", onChange: updateFrameSize, value: d2.frameSize })), /* @__PURE__ */ import_react5.default.createElement("br", null), buttons);
    }
    render() {
      if (this.state.connected === null) {
        return /* @__PURE__ */ import_react5.default.createElement(import_react_loading.default, { className: "m-2", type: "bars", color: "#ffffff", height: 50, width: 50 });
      }
      if (!this.state.connected) {
        return /* @__PURE__ */ import_react5.default.createElement("h1", null, "Audio is not connected!");
      }
      return /* @__PURE__ */ import_react5.default.createElement(Tab, null, /* @__PURE__ */ import_react5.default.createElement(
        CheckBox,
        {
          text: "Audio",
          enabled: this.state.mode === 6 /* AudioRaw */ || this.state.mode === 5 /* Audio */,
          onChange: (on) => {
            this.changeMode(
              this.state.onDeviceProcessing ? 5 /* Audio */ : 6 /* AudioRaw */,
              on
            );
          }
        }
      ), /* @__PURE__ */ import_react5.default.createElement(MaxDiv, null, this.activeDevice, this.changeDevice), /* @__PURE__ */ import_react5.default.createElement(
        AudioVisualizerLine,
        {
          audioAnalyser: this.audioAnalyser,
          audioSystem: this.props.als,
          height: 250,
          width: this.state.width
        }
      ));
    }
  };

  // src/client/Components/Tabs/AutoPilot.tsx
  var import_react18 = __toESM(require_react());

  // src/client/Components/CustomTab/PatternBuilder.tsx
  var import_react10 = __toESM(require_react());

  // src/client/Components/CustomTab/Pattern.tsx
  var import_react9 = __toESM(require_react());

  // src/client/Components/ColourSetter/ColourSetter.tsx
  var import_react8 = __toESM(require_react());

  // src/client/Components/ColourPicker/ColourPicker.tsx
  var import_react7 = __toESM(require_react());
  var import_lodash5 = __toESM(require_lodash());

  // node_modules/@fortawesome/fontawesome-svg-core/index.es.js
  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _objectSpread(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      var ownKeys3 = Object.keys(source);
      if (typeof Object.getOwnPropertySymbols === "function") {
        ownKeys3 = ownKeys3.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }
      ownKeys3.forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    }
    return target;
  }
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _nonIterableRest();
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _iterableToArrayLimit(arr, i2) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e2 = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2)
          break;
      }
    } catch (err) {
      _d = true;
      _e2 = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e2;
      }
    }
    return _arr;
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }
  var noop2 = function noop3() {
  };
  var _WINDOW = {};
  var _DOCUMENT = {};
  var _MUTATION_OBSERVER = null;
  var _PERFORMANCE = {
    mark: noop2,
    measure: noop2
  };
  try {
    if (typeof window !== "undefined")
      _WINDOW = window;
    if (typeof document !== "undefined")
      _DOCUMENT = document;
    if (typeof MutationObserver !== "undefined")
      _MUTATION_OBSERVER = MutationObserver;
    if (typeof performance !== "undefined")
      _PERFORMANCE = performance;
  } catch (e2) {
  }
  var _ref = _WINDOW.navigator || {};
  var _ref$userAgent = _ref.userAgent;
  var userAgent = _ref$userAgent === void 0 ? "" : _ref$userAgent;
  var WINDOW = _WINDOW;
  var DOCUMENT = _DOCUMENT;
  var PERFORMANCE = _PERFORMANCE;
  var IS_BROWSER = !!WINDOW.document;
  var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === "function" && typeof DOCUMENT.createElement === "function";
  var IS_IE = ~userAgent.indexOf("MSIE") || ~userAgent.indexOf("Trident/");
  var NAMESPACE_IDENTIFIER = "___FONT_AWESOME___";
  var DEFAULT_FAMILY_PREFIX = "fa";
  var DEFAULT_REPLACEMENT_CLASS = "svg-inline--fa";
  var DATA_FA_I2SVG = "data-fa-i2svg";
  var PRODUCTION = function() {
    try {
      return false;
    } catch (e2) {
      return false;
    }
  }();
  var oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var oneToTwenty = oneToTen.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
  var DUOTONE_CLASSES = {
    GROUP: "group",
    SWAP_OPACITY: "swap-opacity",
    PRIMARY: "primary",
    SECONDARY: "secondary"
  };
  var RESERVED_CLASSES = ["xs", "sm", "lg", "fw", "ul", "li", "border", "pull-left", "pull-right", "spin", "pulse", "rotate-90", "rotate-180", "rotate-270", "flip-horizontal", "flip-vertical", "flip-both", "stack", "stack-1x", "stack-2x", "inverse", "layers", "layers-text", "layers-counter", DUOTONE_CLASSES.GROUP, DUOTONE_CLASSES.SWAP_OPACITY, DUOTONE_CLASSES.PRIMARY, DUOTONE_CLASSES.SECONDARY].concat(oneToTen.map(function(n2) {
    return "".concat(n2, "x");
  })).concat(oneToTwenty.map(function(n2) {
    return "w-".concat(n2);
  }));
  var initial = WINDOW.FontAwesomeConfig || {};
  function getAttrConfig(attr) {
    var element = DOCUMENT.querySelector("script[" + attr + "]");
    if (element) {
      return element.getAttribute(attr);
    }
  }
  function coerce(val) {
    if (val === "")
      return true;
    if (val === "false")
      return false;
    if (val === "true")
      return true;
    return val;
  }
  if (DOCUMENT && typeof DOCUMENT.querySelector === "function") {
    attrs = [["data-family-prefix", "familyPrefix"], ["data-replacement-class", "replacementClass"], ["data-auto-replace-svg", "autoReplaceSvg"], ["data-auto-add-css", "autoAddCss"], ["data-auto-a11y", "autoA11y"], ["data-search-pseudo-elements", "searchPseudoElements"], ["data-observe-mutations", "observeMutations"], ["data-mutate-approach", "mutateApproach"], ["data-keep-original-source", "keepOriginalSource"], ["data-measure-performance", "measurePerformance"], ["data-show-missing-icons", "showMissingIcons"]];
    attrs.forEach(function(_ref2) {
      var _ref22 = _slicedToArray(_ref2, 2), attr = _ref22[0], key = _ref22[1];
      var val = coerce(getAttrConfig(attr));
      if (val !== void 0 && val !== null) {
        initial[key] = val;
      }
    });
  }
  var attrs;
  var _default = {
    familyPrefix: DEFAULT_FAMILY_PREFIX,
    replacementClass: DEFAULT_REPLACEMENT_CLASS,
    autoReplaceSvg: true,
    autoAddCss: true,
    autoA11y: true,
    searchPseudoElements: false,
    observeMutations: true,
    mutateApproach: "async",
    keepOriginalSource: true,
    measurePerformance: false,
    showMissingIcons: true
  };
  var _config = _objectSpread({}, _default, initial);
  if (!_config.autoReplaceSvg)
    _config.observeMutations = false;
  var config = _objectSpread({}, _config);
  WINDOW.FontAwesomeConfig = config;
  var w2 = WINDOW || {};
  if (!w2[NAMESPACE_IDENTIFIER])
    w2[NAMESPACE_IDENTIFIER] = {};
  if (!w2[NAMESPACE_IDENTIFIER].styles)
    w2[NAMESPACE_IDENTIFIER].styles = {};
  if (!w2[NAMESPACE_IDENTIFIER].hooks)
    w2[NAMESPACE_IDENTIFIER].hooks = {};
  if (!w2[NAMESPACE_IDENTIFIER].shims)
    w2[NAMESPACE_IDENTIFIER].shims = [];
  var namespace = w2[NAMESPACE_IDENTIFIER];
  var functions = [];
  var listener = function listener2() {
    DOCUMENT.removeEventListener("DOMContentLoaded", listener2);
    loaded = 1;
    functions.map(function(fn) {
      return fn();
    });
  };
  var loaded = false;
  if (IS_DOM) {
    loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);
    if (!loaded)
      DOCUMENT.addEventListener("DOMContentLoaded", listener);
  }
  var PENDING = "pending";
  var SETTLED = "settled";
  var FULFILLED = "fulfilled";
  var REJECTED = "rejected";
  var NOOP = function NOOP2() {
  };
  var isNode = typeof global !== "undefined" && typeof global.process !== "undefined" && typeof global.process.emit === "function";
  var asyncSetTimer = typeof setImmediate === "undefined" ? setTimeout : setImmediate;
  var asyncQueue = [];
  var asyncTimer;
  function asyncFlush() {
    for (var i2 = 0; i2 < asyncQueue.length; i2++) {
      asyncQueue[i2][0](asyncQueue[i2][1]);
    }
    asyncQueue = [];
    asyncTimer = false;
  }
  function asyncCall(callback, arg) {
    asyncQueue.push([callback, arg]);
    if (!asyncTimer) {
      asyncTimer = true;
      asyncSetTimer(asyncFlush, 0);
    }
  }
  function invokeResolver(resolver, promise) {
    function resolvePromise(value) {
      resolve(promise, value);
    }
    function rejectPromise(reason) {
      reject(promise, reason);
    }
    try {
      resolver(resolvePromise, rejectPromise);
    } catch (e2) {
      rejectPromise(e2);
    }
  }
  function invokeCallback(subscriber) {
    var owner = subscriber.owner;
    var settled = owner._state;
    var value = owner._data;
    var callback = subscriber[settled];
    var promise = subscriber.then;
    if (typeof callback === "function") {
      settled = FULFILLED;
      try {
        value = callback(value);
      } catch (e2) {
        reject(promise, e2);
      }
    }
    if (!handleThenable(promise, value)) {
      if (settled === FULFILLED) {
        resolve(promise, value);
      }
      if (settled === REJECTED) {
        reject(promise, value);
      }
    }
  }
  function handleThenable(promise, value) {
    var resolved;
    try {
      if (promise === value) {
        throw new TypeError("A promises callback cannot return that same promise.");
      }
      if (value && (typeof value === "function" || _typeof(value) === "object")) {
        var then2 = value.then;
        if (typeof then2 === "function") {
          then2.call(value, function(val) {
            if (!resolved) {
              resolved = true;
              if (value === val) {
                fulfill(promise, val);
              } else {
                resolve(promise, val);
              }
            }
          }, function(reason) {
            if (!resolved) {
              resolved = true;
              reject(promise, reason);
            }
          });
          return true;
        }
      }
    } catch (e2) {
      if (!resolved) {
        reject(promise, e2);
      }
      return true;
    }
    return false;
  }
  function resolve(promise, value) {
    if (promise === value || !handleThenable(promise, value)) {
      fulfill(promise, value);
    }
  }
  function fulfill(promise, value) {
    if (promise._state === PENDING) {
      promise._state = SETTLED;
      promise._data = value;
      asyncCall(publishFulfillment, promise);
    }
  }
  function reject(promise, reason) {
    if (promise._state === PENDING) {
      promise._state = SETTLED;
      promise._data = reason;
      asyncCall(publishRejection, promise);
    }
  }
  function publish(promise) {
    promise._then = promise._then.forEach(invokeCallback);
  }
  function publishFulfillment(promise) {
    promise._state = FULFILLED;
    publish(promise);
  }
  function publishRejection(promise) {
    promise._state = REJECTED;
    publish(promise);
    if (!promise._handled && isNode) {
      global.process.emit("unhandledRejection", promise._data, promise);
    }
  }
  function notifyRejectionHandled(promise) {
    global.process.emit("rejectionHandled", promise);
  }
  function P2(resolver) {
    if (typeof resolver !== "function") {
      throw new TypeError("Promise resolver " + resolver + " is not a function");
    }
    if (this instanceof P2 === false) {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }
    this._then = [];
    invokeResolver(resolver, this);
  }
  P2.prototype = {
    constructor: P2,
    _state: PENDING,
    _then: null,
    _data: void 0,
    _handled: false,
    then: function then(onFulfillment, onRejection) {
      var subscriber = {
        owner: this,
        then: new this.constructor(NOOP),
        fulfilled: onFulfillment,
        rejected: onRejection
      };
      if ((onRejection || onFulfillment) && !this._handled) {
        this._handled = true;
        if (this._state === REJECTED && isNode) {
          asyncCall(notifyRejectionHandled, this);
        }
      }
      if (this._state === FULFILLED || this._state === REJECTED) {
        asyncCall(invokeCallback, subscriber);
      } else {
        this._then.push(subscriber);
      }
      return subscriber.then;
    },
    catch: function _catch(onRejection) {
      return this.then(null, onRejection);
    }
  };
  P2.all = function(promises) {
    if (!Array.isArray(promises)) {
      throw new TypeError("You must pass an array to Promise.all().");
    }
    return new P2(function(resolve2, reject2) {
      var results = [];
      var remaining = 0;
      function resolver(index2) {
        remaining++;
        return function(value) {
          results[index2] = value;
          if (!--remaining) {
            resolve2(results);
          }
        };
      }
      for (var i2 = 0, promise; i2 < promises.length; i2++) {
        promise = promises[i2];
        if (promise && typeof promise.then === "function") {
          promise.then(resolver(i2), reject2);
        } else {
          results[i2] = promise;
        }
      }
      if (!remaining) {
        resolve2(results);
      }
    });
  };
  P2.race = function(promises) {
    if (!Array.isArray(promises)) {
      throw new TypeError("You must pass an array to Promise.race().");
    }
    return new P2(function(resolve2, reject2) {
      for (var i2 = 0, promise; i2 < promises.length; i2++) {
        promise = promises[i2];
        if (promise && typeof promise.then === "function") {
          promise.then(resolve2, reject2);
        } else {
          resolve2(promise);
        }
      }
    });
  };
  P2.resolve = function(value) {
    if (value && _typeof(value) === "object" && value.constructor === P2) {
      return value;
    }
    return new P2(function(resolve2) {
      resolve2(value);
    });
  };
  P2.reject = function(reason) {
    return new P2(function(resolve2, reject2) {
      reject2(reason);
    });
  };
  var meaninglessTransform = {
    size: 16,
    x: 0,
    y: 0,
    rotate: 0,
    flipX: false,
    flipY: false
  };
  function insertCss(css2) {
    if (!css2 || !IS_DOM) {
      return;
    }
    var style = DOCUMENT.createElement("style");
    style.setAttribute("type", "text/css");
    style.innerHTML = css2;
    var headChildren = DOCUMENT.head.childNodes;
    var beforeChild = null;
    for (var i2 = headChildren.length - 1; i2 > -1; i2--) {
      var child = headChildren[i2];
      var tagName = (child.tagName || "").toUpperCase();
      if (["STYLE", "LINK"].indexOf(tagName) > -1) {
        beforeChild = child;
      }
    }
    DOCUMENT.head.insertBefore(style, beforeChild);
    return css2;
  }
  var idPool = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  function nextUniqueId() {
    var size = 12;
    var id = "";
    while (size-- > 0) {
      id += idPool[Math.random() * 62 | 0];
    }
    return id;
  }
  function htmlEscape(str) {
    return "".concat(str).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
  }
  function joinAttributes(attributes) {
    return Object.keys(attributes || {}).reduce(function(acc, attributeName) {
      return acc + "".concat(attributeName, '="').concat(htmlEscape(attributes[attributeName]), '" ');
    }, "").trim();
  }
  function joinStyles(styles2) {
    return Object.keys(styles2 || {}).reduce(function(acc, styleName) {
      return acc + "".concat(styleName, ": ").concat(styles2[styleName], ";");
    }, "");
  }
  function transformIsMeaningful(transform2) {
    return transform2.size !== meaninglessTransform.size || transform2.x !== meaninglessTransform.x || transform2.y !== meaninglessTransform.y || transform2.rotate !== meaninglessTransform.rotate || transform2.flipX || transform2.flipY;
  }
  function transformForSvg(_ref2) {
    var transform2 = _ref2.transform, containerWidth = _ref2.containerWidth, iconWidth = _ref2.iconWidth;
    var outer = {
      transform: "translate(".concat(containerWidth / 2, " 256)")
    };
    var innerTranslate = "translate(".concat(transform2.x * 32, ", ").concat(transform2.y * 32, ") ");
    var innerScale = "scale(".concat(transform2.size / 16 * (transform2.flipX ? -1 : 1), ", ").concat(transform2.size / 16 * (transform2.flipY ? -1 : 1), ") ");
    var innerRotate = "rotate(".concat(transform2.rotate, " 0 0)");
    var inner = {
      transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
    };
    var path = {
      transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
    };
    return {
      outer,
      inner,
      path
    };
  }
  var ALL_SPACE = {
    x: 0,
    y: 0,
    width: "100%",
    height: "100%"
  };
  function fillBlack(abstract) {
    var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    if (abstract.attributes && (abstract.attributes.fill || force)) {
      abstract.attributes.fill = "black";
    }
    return abstract;
  }
  function deGroup(abstract) {
    if (abstract.tag === "g") {
      return abstract.children;
    } else {
      return [abstract];
    }
  }
  function makeIconMasking(_ref2) {
    var children = _ref2.children, attributes = _ref2.attributes, main = _ref2.main, mask = _ref2.mask, explicitMaskId = _ref2.maskId, transform2 = _ref2.transform;
    var mainWidth = main.width, mainPath = main.icon;
    var maskWidth = mask.width, maskPath = mask.icon;
    var trans = transformForSvg({
      transform: transform2,
      containerWidth: maskWidth,
      iconWidth: mainWidth
    });
    var maskRect = {
      tag: "rect",
      attributes: _objectSpread({}, ALL_SPACE, {
        fill: "white"
      })
    };
    var maskInnerGroupChildrenMixin = mainPath.children ? {
      children: mainPath.children.map(fillBlack)
    } : {};
    var maskInnerGroup = {
      tag: "g",
      attributes: _objectSpread({}, trans.inner),
      children: [fillBlack(_objectSpread({
        tag: mainPath.tag,
        attributes: _objectSpread({}, mainPath.attributes, trans.path)
      }, maskInnerGroupChildrenMixin))]
    };
    var maskOuterGroup = {
      tag: "g",
      attributes: _objectSpread({}, trans.outer),
      children: [maskInnerGroup]
    };
    var maskId = "mask-".concat(explicitMaskId || nextUniqueId());
    var clipId = "clip-".concat(explicitMaskId || nextUniqueId());
    var maskTag = {
      tag: "mask",
      attributes: _objectSpread({}, ALL_SPACE, {
        id: maskId,
        maskUnits: "userSpaceOnUse",
        maskContentUnits: "userSpaceOnUse"
      }),
      children: [maskRect, maskOuterGroup]
    };
    var defs = {
      tag: "defs",
      children: [{
        tag: "clipPath",
        attributes: {
          id: clipId
        },
        children: deGroup(maskPath)
      }, maskTag]
    };
    children.push(defs, {
      tag: "rect",
      attributes: _objectSpread({
        fill: "currentColor",
        "clip-path": "url(#".concat(clipId, ")"),
        mask: "url(#".concat(maskId, ")")
      }, ALL_SPACE)
    });
    return {
      children,
      attributes
    };
  }
  function makeIconStandard(_ref2) {
    var children = _ref2.children, attributes = _ref2.attributes, main = _ref2.main, transform2 = _ref2.transform, styles2 = _ref2.styles;
    var styleString = joinStyles(styles2);
    if (styleString.length > 0) {
      attributes["style"] = styleString;
    }
    if (transformIsMeaningful(transform2)) {
      var trans = transformForSvg({
        transform: transform2,
        containerWidth: main.width,
        iconWidth: main.width
      });
      children.push({
        tag: "g",
        attributes: _objectSpread({}, trans.outer),
        children: [{
          tag: "g",
          attributes: _objectSpread({}, trans.inner),
          children: [{
            tag: main.icon.tag,
            children: main.icon.children,
            attributes: _objectSpread({}, main.icon.attributes, trans.path)
          }]
        }]
      });
    } else {
      children.push(main.icon);
    }
    return {
      children,
      attributes
    };
  }
  function asIcon(_ref2) {
    var children = _ref2.children, main = _ref2.main, mask = _ref2.mask, attributes = _ref2.attributes, styles2 = _ref2.styles, transform2 = _ref2.transform;
    if (transformIsMeaningful(transform2) && main.found && !mask.found) {
      var width = main.width, height = main.height;
      var offset = {
        x: width / height / 2,
        y: 0.5
      };
      attributes["style"] = joinStyles(_objectSpread({}, styles2, {
        "transform-origin": "".concat(offset.x + transform2.x / 16, "em ").concat(offset.y + transform2.y / 16, "em")
      }));
    }
    return [{
      tag: "svg",
      attributes,
      children
    }];
  }
  function asSymbol(_ref2) {
    var prefix = _ref2.prefix, iconName = _ref2.iconName, children = _ref2.children, attributes = _ref2.attributes, symbol = _ref2.symbol;
    var id = symbol === true ? "".concat(prefix, "-").concat(config.familyPrefix, "-").concat(iconName) : symbol;
    return [{
      tag: "svg",
      attributes: {
        style: "display: none;"
      },
      children: [{
        tag: "symbol",
        attributes: _objectSpread({}, attributes, {
          id
        }),
        children
      }]
    }];
  }
  function makeInlineSvgAbstract(params) {
    var _params$icons = params.icons, main = _params$icons.main, mask = _params$icons.mask, prefix = params.prefix, iconName = params.iconName, transform2 = params.transform, symbol = params.symbol, title = params.title, maskId = params.maskId, titleId = params.titleId, extra = params.extra, _params$watchable = params.watchable, watchable = _params$watchable === void 0 ? false : _params$watchable;
    var _ref2 = mask.found ? mask : main, width = _ref2.width, height = _ref2.height;
    var isUploadedIcon = prefix === "fak";
    var widthClass = isUploadedIcon ? "" : "fa-w-".concat(Math.ceil(width / height * 16));
    var attrClass = [config.replacementClass, iconName ? "".concat(config.familyPrefix, "-").concat(iconName) : "", widthClass].filter(function(c2) {
      return extra.classes.indexOf(c2) === -1;
    }).filter(function(c2) {
      return c2 !== "" || !!c2;
    }).concat(extra.classes).join(" ");
    var content = {
      children: [],
      attributes: _objectSpread({}, extra.attributes, {
        "data-prefix": prefix,
        "data-icon": iconName,
        "class": attrClass,
        "role": extra.attributes.role || "img",
        "xmlns": "http://www.w3.org/2000/svg",
        "viewBox": "0 0 ".concat(width, " ").concat(height)
      })
    };
    var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf("fa-fw") ? {
      width: "".concat(width / height * 16 * 0.0625, "em")
    } : {};
    if (watchable) {
      content.attributes[DATA_FA_I2SVG] = "";
    }
    if (title)
      content.children.push({
        tag: "title",
        attributes: {
          id: content.attributes["aria-labelledby"] || "title-".concat(titleId || nextUniqueId())
        },
        children: [title]
      });
    var args = _objectSpread({}, content, {
      prefix,
      iconName,
      main,
      mask,
      maskId,
      transform: transform2,
      symbol,
      styles: _objectSpread({}, uploadedIconWidthStyle, extra.styles)
    });
    var _ref22 = mask.found && main.found ? makeIconMasking(args) : makeIconStandard(args), children = _ref22.children, attributes = _ref22.attributes;
    args.children = children;
    args.attributes = attributes;
    if (symbol) {
      return asSymbol(args);
    } else {
      return asIcon(args);
    }
  }
  var noop$1 = function noop4() {
  };
  var p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {
    mark: noop$1,
    measure: noop$1
  };
  var bindInternal4 = function bindInternal42(func, thisContext) {
    return function(a2, b2, c2, d2) {
      return func.call(thisContext, a2, b2, c2, d2);
    };
  };
  var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {
    var keys = Object.keys(subject), length = keys.length, iterator = thisContext !== void 0 ? bindInternal4(fn, thisContext) : fn, i2, key, result;
    if (initialValue === void 0) {
      i2 = 1;
      result = subject[keys[0]];
    } else {
      i2 = 0;
      result = initialValue;
    }
    for (; i2 < length; i2++) {
      key = keys[i2];
      result = iterator(result, subject[key], key, subject);
    }
    return result;
  };
  function defineIcons(prefix, icons) {
    var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var _params$skipHooks = params.skipHooks, skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
    var normalized = Object.keys(icons).reduce(function(acc, iconName) {
      var icon2 = icons[iconName];
      var expanded = !!icon2.icon;
      if (expanded) {
        acc[icon2.iconName] = icon2.icon;
      } else {
        acc[iconName] = icon2;
      }
      return acc;
    }, {});
    if (typeof namespace.hooks.addPack === "function" && !skipHooks) {
      namespace.hooks.addPack(prefix, normalized);
    } else {
      namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, normalized);
    }
    if (prefix === "fas") {
      defineIcons("fa", icons);
    }
  }
  var styles = namespace.styles;
  var shims = namespace.shims;
  var _byUnicode = {};
  var _byLigature = {};
  var _byOldName = {};
  var build = function build2() {
    var lookup = function lookup2(reducer) {
      return reduce(styles, function(o2, style, prefix) {
        o2[prefix] = reduce(style, reducer, {});
        return o2;
      }, {});
    };
    _byUnicode = lookup(function(acc, icon2, iconName) {
      if (icon2[3]) {
        acc[icon2[3]] = iconName;
      }
      return acc;
    });
    _byLigature = lookup(function(acc, icon2, iconName) {
      var ligatures = icon2[2];
      acc[iconName] = iconName;
      ligatures.forEach(function(ligature) {
        acc[ligature] = iconName;
      });
      return acc;
    });
    var hasRegular = "far" in styles;
    _byOldName = reduce(shims, function(acc, shim) {
      var oldName = shim[0];
      var prefix = shim[1];
      var iconName = shim[2];
      if (prefix === "far" && !hasRegular) {
        prefix = "fas";
      }
      acc[oldName] = {
        prefix,
        iconName
      };
      return acc;
    }, {});
  };
  build();
  var styles$1 = namespace.styles;
  function iconFromMapping(mapping, prefix, iconName) {
    if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
      return {
        prefix,
        iconName,
        icon: mapping[prefix][iconName]
      };
    }
  }
  function toHtml(abstractNodes) {
    var tag = abstractNodes.tag, _abstractNodes$attrib = abstractNodes.attributes, attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib, _abstractNodes$childr = abstractNodes.children, children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;
    if (typeof abstractNodes === "string") {
      return htmlEscape(abstractNodes);
    } else {
      return "<".concat(tag, " ").concat(joinAttributes(attributes), ">").concat(children.map(toHtml).join(""), "</").concat(tag, ">");
    }
  }
  var parseTransformString = function parseTransformString2(transformString) {
    var transform2 = {
      size: 16,
      x: 0,
      y: 0,
      flipX: false,
      flipY: false,
      rotate: 0
    };
    if (!transformString) {
      return transform2;
    } else {
      return transformString.toLowerCase().split(" ").reduce(function(acc, n2) {
        var parts = n2.toLowerCase().split("-");
        var first = parts[0];
        var rest = parts.slice(1).join("-");
        if (first && rest === "h") {
          acc.flipX = true;
          return acc;
        }
        if (first && rest === "v") {
          acc.flipY = true;
          return acc;
        }
        rest = parseFloat(rest);
        if (isNaN(rest)) {
          return acc;
        }
        switch (first) {
          case "grow":
            acc.size = acc.size + rest;
            break;
          case "shrink":
            acc.size = acc.size - rest;
            break;
          case "left":
            acc.x = acc.x - rest;
            break;
          case "right":
            acc.x = acc.x + rest;
            break;
          case "up":
            acc.y = acc.y - rest;
            break;
          case "down":
            acc.y = acc.y + rest;
            break;
          case "rotate":
            acc.rotate = acc.rotate + rest;
            break;
        }
        return acc;
      }, transform2);
    }
  };
  function MissingIcon(error) {
    this.name = "MissingIcon";
    this.message = error || "Icon unavailable";
    this.stack = new Error().stack;
  }
  MissingIcon.prototype = Object.create(Error.prototype);
  MissingIcon.prototype.constructor = MissingIcon;
  var FILL = {
    fill: "currentColor"
  };
  var ANIMATION_BASE = {
    attributeType: "XML",
    repeatCount: "indefinite",
    dur: "2s"
  };
  var RING = {
    tag: "path",
    attributes: _objectSpread({}, FILL, {
      d: "M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"
    })
  };
  var OPACITY_ANIMATE = _objectSpread({}, ANIMATION_BASE, {
    attributeName: "opacity"
  });
  var DOT = {
    tag: "circle",
    attributes: _objectSpread({}, FILL, {
      cx: "256",
      cy: "364",
      r: "28"
    }),
    children: [{
      tag: "animate",
      attributes: _objectSpread({}, ANIMATION_BASE, {
        attributeName: "r",
        values: "28;14;28;28;14;28;"
      })
    }, {
      tag: "animate",
      attributes: _objectSpread({}, OPACITY_ANIMATE, {
        values: "1;0;1;1;0;1;"
      })
    }]
  };
  var QUESTION = {
    tag: "path",
    attributes: _objectSpread({}, FILL, {
      opacity: "1",
      d: "M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"
    }),
    children: [{
      tag: "animate",
      attributes: _objectSpread({}, OPACITY_ANIMATE, {
        values: "1;0;0;0;0;1;"
      })
    }]
  };
  var EXCLAMATION = {
    tag: "path",
    attributes: _objectSpread({}, FILL, {
      opacity: "0",
      d: "M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"
    }),
    children: [{
      tag: "animate",
      attributes: _objectSpread({}, OPACITY_ANIMATE, {
        values: "0;0;1;1;0;0;"
      })
    }]
  };
  var styles$2 = namespace.styles;
  function asFoundIcon(icon2) {
    var width = icon2[0];
    var height = icon2[1];
    var _icon$slice = icon2.slice(4), _icon$slice2 = _slicedToArray(_icon$slice, 1), vectorData = _icon$slice2[0];
    var element = null;
    if (Array.isArray(vectorData)) {
      element = {
        tag: "g",
        attributes: {
          class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.GROUP)
        },
        children: [{
          tag: "path",
          attributes: {
            class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.SECONDARY),
            fill: "currentColor",
            d: vectorData[0]
          }
        }, {
          tag: "path",
          attributes: {
            class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.PRIMARY),
            fill: "currentColor",
            d: vectorData[1]
          }
        }]
      };
    } else {
      element = {
        tag: "path",
        attributes: {
          fill: "currentColor",
          d: vectorData
        }
      };
    }
    return {
      found: true,
      width,
      height,
      icon: element
    };
  }
  var styles$3 = namespace.styles;
  var baseStyles = 'svg:not(:root).svg-inline--fa {\n  overflow: visible;\n}\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.225em;\n}\n.svg-inline--fa.fa-w-1 {\n  width: 0.0625em;\n}\n.svg-inline--fa.fa-w-2 {\n  width: 0.125em;\n}\n.svg-inline--fa.fa-w-3 {\n  width: 0.1875em;\n}\n.svg-inline--fa.fa-w-4 {\n  width: 0.25em;\n}\n.svg-inline--fa.fa-w-5 {\n  width: 0.3125em;\n}\n.svg-inline--fa.fa-w-6 {\n  width: 0.375em;\n}\n.svg-inline--fa.fa-w-7 {\n  width: 0.4375em;\n}\n.svg-inline--fa.fa-w-8 {\n  width: 0.5em;\n}\n.svg-inline--fa.fa-w-9 {\n  width: 0.5625em;\n}\n.svg-inline--fa.fa-w-10 {\n  width: 0.625em;\n}\n.svg-inline--fa.fa-w-11 {\n  width: 0.6875em;\n}\n.svg-inline--fa.fa-w-12 {\n  width: 0.75em;\n}\n.svg-inline--fa.fa-w-13 {\n  width: 0.8125em;\n}\n.svg-inline--fa.fa-w-14 {\n  width: 0.875em;\n}\n.svg-inline--fa.fa-w-15 {\n  width: 0.9375em;\n}\n.svg-inline--fa.fa-w-16 {\n  width: 1em;\n}\n.svg-inline--fa.fa-w-17 {\n  width: 1.0625em;\n}\n.svg-inline--fa.fa-w-18 {\n  width: 1.125em;\n}\n.svg-inline--fa.fa-w-19 {\n  width: 1.1875em;\n}\n.svg-inline--fa.fa-w-20 {\n  width: 1.25em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-border {\n  height: 1.5em;\n}\n.svg-inline--fa.fa-li {\n  width: 2em;\n}\n.svg-inline--fa.fa-fw {\n  width: 1.25em;\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: 0.25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-lg {\n  font-size: 1.3333333333em;\n  line-height: 0.75em;\n  vertical-align: -0.0667em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit;\n}\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: 0.1em;\n  padding: 0.2em 0.25em 0.15em;\n}\n\n.fa-pull-left {\n  float: left;\n}\n\n.fa-pull-right {\n  float: right;\n}\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: 0.3em;\n}\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: 0.3em;\n}\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear;\n}\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8);\n}\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both, .fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical,\n:root .fa-flip-both {\n  -webkit-filter: none;\n          filter: none;\n}\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse {\n  color: #fff;\n}';
  function css() {
    var dfp = DEFAULT_FAMILY_PREFIX;
    var drc = DEFAULT_REPLACEMENT_CLASS;
    var fp = config.familyPrefix;
    var rc = config.replacementClass;
    var s2 = baseStyles;
    if (fp !== dfp || rc !== drc) {
      var dPatt = new RegExp("\\.".concat(dfp, "\\-"), "g");
      var customPropPatt = new RegExp("\\--".concat(dfp, "\\-"), "g");
      var rPatt = new RegExp("\\.".concat(drc), "g");
      s2 = s2.replace(dPatt, ".".concat(fp, "-")).replace(customPropPatt, "--".concat(fp, "-")).replace(rPatt, ".".concat(rc));
    }
    return s2;
  }
  var Library = /* @__PURE__ */ function() {
    function Library2() {
      _classCallCheck(this, Library2);
      this.definitions = {};
    }
    _createClass(Library2, [{
      key: "add",
      value: function add() {
        var _this = this;
        for (var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++) {
          definitions[_key] = arguments[_key];
        }
        var additions = definitions.reduce(this._pullDefinitions, {});
        Object.keys(additions).forEach(function(key) {
          _this.definitions[key] = _objectSpread({}, _this.definitions[key] || {}, additions[key]);
          defineIcons(key, additions[key]);
          build();
        });
      }
    }, {
      key: "reset",
      value: function reset() {
        this.definitions = {};
      }
    }, {
      key: "_pullDefinitions",
      value: function _pullDefinitions(additions, definition) {
        var normalized = definition.prefix && definition.iconName && definition.icon ? {
          0: definition
        } : definition;
        Object.keys(normalized).map(function(key) {
          var _normalized$key = normalized[key], prefix = _normalized$key.prefix, iconName = _normalized$key.iconName, icon2 = _normalized$key.icon;
          if (!additions[prefix])
            additions[prefix] = {};
          additions[prefix][iconName] = icon2;
        });
        return additions;
      }
    }]);
    return Library2;
  }();
  function ensureCss() {
    if (config.autoAddCss && !_cssInserted) {
      insertCss(css());
      _cssInserted = true;
    }
  }
  function apiObject(val, abstractCreator) {
    Object.defineProperty(val, "abstract", {
      get: abstractCreator
    });
    Object.defineProperty(val, "html", {
      get: function get2() {
        return val.abstract.map(function(a2) {
          return toHtml(a2);
        });
      }
    });
    Object.defineProperty(val, "node", {
      get: function get2() {
        if (!IS_DOM)
          return;
        var container = DOCUMENT.createElement("div");
        container.innerHTML = val.html;
        return container.children;
      }
    });
    return val;
  }
  function findIconDefinition(iconLookup) {
    var _iconLookup$prefix = iconLookup.prefix, prefix = _iconLookup$prefix === void 0 ? "fa" : _iconLookup$prefix, iconName = iconLookup.iconName;
    if (!iconName)
      return;
    return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);
  }
  function resolveIcons(next) {
    return function(maybeIconDefinition) {
      var params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});
      var mask = params.mask;
      if (mask) {
        mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});
      }
      return next(iconDefinition, _objectSpread({}, params, {
        mask
      }));
    };
  }
  var library = new Library();
  var _cssInserted = false;
  var parse = {
    transform: function transform(transformString) {
      return parseTransformString(transformString);
    }
  };
  var icon = resolveIcons(function(iconDefinition) {
    var params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _params$transform = params.transform, transform2 = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$symbol = params.symbol, symbol = _params$symbol === void 0 ? false : _params$symbol, _params$mask = params.mask, mask = _params$mask === void 0 ? null : _params$mask, _params$maskId = params.maskId, maskId = _params$maskId === void 0 ? null : _params$maskId, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$titleId = params.titleId, titleId = _params$titleId === void 0 ? null : _params$titleId, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles2 = _params$styles === void 0 ? {} : _params$styles;
    if (!iconDefinition)
      return;
    var prefix = iconDefinition.prefix, iconName = iconDefinition.iconName, icon2 = iconDefinition.icon;
    return apiObject(_objectSpread({
      type: "icon"
    }, iconDefinition), function() {
      ensureCss();
      if (config.autoA11y) {
        if (title) {
          attributes["aria-labelledby"] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
        } else {
          attributes["aria-hidden"] = "true";
          attributes["focusable"] = "false";
        }
      }
      return makeInlineSvgAbstract({
        icons: {
          main: asFoundIcon(icon2),
          mask: mask ? asFoundIcon(mask.icon) : {
            found: false,
            width: null,
            height: null,
            icon: {}
          }
        },
        prefix,
        iconName,
        transform: _objectSpread({}, meaninglessTransform, transform2),
        symbol,
        title,
        maskId,
        titleId,
        extra: {
          attributes,
          styles: styles2,
          classes
        }
      });
    });
  });

  // node_modules/@fortawesome/react-fontawesome/index.es.js
  var import_prop_types = __toESM(require_prop_types());
  var import_react6 = __toESM(require_react());
  function _typeof2(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i2;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
        key = sourceSymbolKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i2 = 0, arr2 = new Array(arr.length); i2 < arr.length; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
  }
  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
      return Array.from(iter);
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }
  function classList(props) {
    var _classes;
    var spin = props.spin, pulse = props.pulse, fixedWidth = props.fixedWidth, inverse = props.inverse, border = props.border, listItem = props.listItem, flip = props.flip, size = props.size, rotation = props.rotation, pull = props.pull;
    var classes = (_classes = {
      "fa-spin": spin,
      "fa-pulse": pulse,
      "fa-fw": fixedWidth,
      "fa-inverse": inverse,
      "fa-border": border,
      "fa-li": listItem,
      "fa-flip-horizontal": flip === "horizontal" || flip === "both",
      "fa-flip-vertical": flip === "vertical" || flip === "both"
    }, _defineProperty2(_classes, "fa-".concat(size), typeof size !== "undefined" && size !== null), _defineProperty2(_classes, "fa-rotate-".concat(rotation), typeof rotation !== "undefined" && rotation !== null && rotation !== 0), _defineProperty2(_classes, "fa-pull-".concat(pull), typeof pull !== "undefined" && pull !== null), _defineProperty2(_classes, "fa-swap-opacity", props.swapOpacity), _classes);
    return Object.keys(classes).map(function(key) {
      return classes[key] ? key : null;
    }).filter(function(key) {
      return key;
    });
  }
  function _isNumerical(obj) {
    obj = obj - 0;
    return obj === obj;
  }
  function camelize(string) {
    if (_isNumerical(string)) {
      return string;
    }
    string = string.replace(/[\-_\s]+(.)?/g, function(match, chr) {
      return chr ? chr.toUpperCase() : "";
    });
    return string.substr(0, 1).toLowerCase() + string.substr(1);
  }
  function capitalize(val) {
    return val.charAt(0).toUpperCase() + val.slice(1);
  }
  function styleToObject(style) {
    return style.split(";").map(function(s2) {
      return s2.trim();
    }).filter(function(s2) {
      return s2;
    }).reduce(function(acc, pair) {
      var i2 = pair.indexOf(":");
      var prop = camelize(pair.slice(0, i2));
      var value = pair.slice(i2 + 1).trim();
      prop.startsWith("webkit") ? acc[capitalize(prop)] = value : acc[prop] = value;
      return acc;
    }, {});
  }
  function convert(createElement, element) {
    var extraProps = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (typeof element === "string") {
      return element;
    }
    var children = (element.children || []).map(function(child) {
      return convert(createElement, child);
    });
    var mixins = Object.keys(element.attributes || {}).reduce(function(acc, key) {
      var val = element.attributes[key];
      switch (key) {
        case "class":
          acc.attrs["className"] = val;
          delete element.attributes["class"];
          break;
        case "style":
          acc.attrs["style"] = styleToObject(val);
          break;
        default:
          if (key.indexOf("aria-") === 0 || key.indexOf("data-") === 0) {
            acc.attrs[key.toLowerCase()] = val;
          } else {
            acc.attrs[camelize(key)] = val;
          }
      }
      return acc;
    }, {
      attrs: {}
    });
    var _extraProps$style = extraProps.style, existingStyle = _extraProps$style === void 0 ? {} : _extraProps$style, remaining = _objectWithoutProperties(extraProps, ["style"]);
    mixins.attrs["style"] = _objectSpread2({}, mixins.attrs["style"], {}, existingStyle);
    return createElement.apply(void 0, [element.tag, _objectSpread2({}, mixins.attrs, {}, remaining)].concat(_toConsumableArray(children)));
  }
  var PRODUCTION2 = false;
  try {
    PRODUCTION2 = false;
  } catch (e2) {
  }
  function log() {
    if (!PRODUCTION2 && console && typeof console.error === "function") {
      var _console;
      (_console = console).error.apply(_console, arguments);
    }
  }
  function normalizeIconArgs(icon2) {
    if (icon2 === null) {
      return null;
    }
    if (_typeof2(icon2) === "object" && icon2.prefix && icon2.iconName) {
      return icon2;
    }
    if (Array.isArray(icon2) && icon2.length === 2) {
      return {
        prefix: icon2[0],
        iconName: icon2[1]
      };
    }
    if (typeof icon2 === "string") {
      return {
        prefix: "fas",
        iconName: icon2
      };
    }
  }
  function objectWithKey(key, value) {
    return Array.isArray(value) && value.length > 0 || !Array.isArray(value) && value ? _defineProperty2({}, key, value) : {};
  }
  function FontAwesomeIcon(_ref2) {
    var forwardedRef = _ref2.forwardedRef, props = _objectWithoutProperties(_ref2, ["forwardedRef"]);
    var iconArgs = props.icon, maskArgs = props.mask, symbol = props.symbol, className = props.className, title = props.title;
    var iconLookup = normalizeIconArgs(iconArgs);
    var classes = objectWithKey("classes", [].concat(_toConsumableArray(classList(props)), _toConsumableArray(className.split(" "))));
    var transform2 = objectWithKey("transform", typeof props.transform === "string" ? parse.transform(props.transform) : props.transform);
    var mask = objectWithKey("mask", normalizeIconArgs(maskArgs));
    var renderedIcon = icon(iconLookup, _objectSpread2({}, classes, {}, transform2, {}, mask, {
      symbol,
      title
    }));
    if (!renderedIcon) {
      log("Could not find icon", iconLookup);
      return null;
    }
    var abstract = renderedIcon.abstract;
    var extraProps = {
      ref: forwardedRef
    };
    Object.keys(props).forEach(function(key) {
      if (!FontAwesomeIcon.defaultProps.hasOwnProperty(key)) {
        extraProps[key] = props[key];
      }
    });
    return convertCurry(abstract[0], extraProps);
  }
  FontAwesomeIcon.displayName = "FontAwesomeIcon";
  FontAwesomeIcon.propTypes = {
    border: import_prop_types.default.bool,
    className: import_prop_types.default.string,
    mask: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.array, import_prop_types.default.string]),
    fixedWidth: import_prop_types.default.bool,
    inverse: import_prop_types.default.bool,
    flip: import_prop_types.default.oneOf(["horizontal", "vertical", "both"]),
    icon: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.array, import_prop_types.default.string]),
    listItem: import_prop_types.default.bool,
    pull: import_prop_types.default.oneOf(["right", "left"]),
    pulse: import_prop_types.default.bool,
    rotation: import_prop_types.default.oneOf([0, 90, 180, 270]),
    size: import_prop_types.default.oneOf(["lg", "xs", "sm", "1x", "2x", "3x", "4x", "5x", "6x", "7x", "8x", "9x", "10x"]),
    spin: import_prop_types.default.bool,
    symbol: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string]),
    title: import_prop_types.default.string,
    transform: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.object]),
    swapOpacity: import_prop_types.default.bool
  };
  FontAwesomeIcon.defaultProps = {
    border: false,
    className: "",
    mask: null,
    fixedWidth: false,
    inverse: false,
    flip: null,
    icon: null,
    listItem: false,
    pull: null,
    pulse: false,
    rotation: null,
    size: null,
    spin: false,
    symbol: false,
    title: "",
    transform: null,
    swapOpacity: false
  };
  var convertCurry = convert.bind(null, import_react6.default.createElement);

  // node_modules/@fortawesome/free-solid-svg-icons/index.es.js
  var faArrowDown = {
    prefix: "fas",
    iconName: "arrow-down",
    icon: [448, 512, [], "f063", "M413.1 222.5l22.2 22.2c9.4 9.4 9.4 24.6 0 33.9L241 473c-9.4 9.4-24.6 9.4-33.9 0L12.7 278.6c-9.4-9.4-9.4-24.6 0-33.9l22.2-22.2c9.5-9.5 25-9.3 34.3.4L184 343.4V56c0-13.3 10.7-24 24-24h32c13.3 0 24 10.7 24 24v287.4l114.8-120.5c9.3-9.8 24.8-10 34.3-.4z"]
  };
  var faArrowUp = {
    prefix: "fas",
    iconName: "arrow-up",
    icon: [448, 512, [], "f062", "M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z"]
  };
  var faGripLines = {
    prefix: "fas",
    iconName: "grip-lines",
    icon: [512, 512, [], "f7a4", "M496 288H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm0-128H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16z"]
  };
  var faPlus = {
    prefix: "fas",
    iconName: "plus",
    icon: [448, 512, [], "f067", "M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"]
  };
  var faTimes = {
    prefix: "fas",
    iconName: "times",
    icon: [352, 512, [], "f00d", "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"]
  };

  // src/client/Components/ColourPicker/ColourPicker.tsx
  var import_color_namer_sdk = __toESM(require_color_namer_sdk());
  var Div3 = styled_components_browser_esm_default.div`
    background: rgb(32, 32, 32);
    border-radius: 5px;
    padding: 10px;
    display: inline-block;
`;
  var DivInputBoxes = styled_components_browser_esm_default.div`
    background: rgb(32, 32, 32);
    margin: 0px 0 0 5px;
    display: inline-block;
    vertical-align: top;
`;
  var UnselectableSpan = styled_components_browser_esm_default.span`
    pointer-events: none;
    user-select: none;
`;
  var DivInputBox = styled_components_browser_esm_default.div`
    display: block;
    margin-bottom: 1px;
`;
  var InputColourBoxes = styled_components_browser_esm_default.input`
    background: rgb(41, 41, 41);
    color: white;
    border: 1px solid rgb(71, 71, 71);
    padding: 5px;
    width: 35px;
    display: inline-block;
    outline: none;
`;
  var Popup = styled_components_browser_esm_default.div`
    pointer-events: none;
    user-select: none;
    background: transparent;
    border-radius: 5px;
    padding: 10px;
    display: inline;
    position: fixed;
    z-index: 9999999;
`;
  var ColorPreview = styled_components_browser_esm_default.div`
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 3px solid black;
    border-radius: 100%;
    position: relative;
    z-index: 99;
`;
  var ColourName = styled_components_browser_esm_default.span`
    background-color: rgba(0, 0, 0, 0.85);
    color: white;
    display: inline-block;
    bottom: 10px;
    font-size: 13px;
    left: -10px;
    padding: 3px;
    padding-left: 12px;
    position: relative;
    border-top-right-radius: 3px;
    border-bottom-right-radius: 6px;
`;
  var ExitButtons = styled_components_browser_esm_default.div`
    position: absolute;
    display: inline-block;
    background-color: rgb(0, 0, 0);
    border-radius: 5px;
    top: -10px;
    left: -10px;
    padding: 5px;
    margin: 5px;
    text-align: center;
    align-items: center;
    button {
        color: white;
        background-color: transparent;
        border: none;
        outline: none;
    }
`;
  var ColourPicker = class extends import_react7.default.Component {
    constructor(props) {
      super(props);
      this.MAX_COLOUR_VALUE = 255;
      this.main = import_react7.default.createRef();
      this.side = import_react7.default.createRef();
      this._renderer = import_react7.default.createRef();
      this.preview = import_react7.default.createRef();
      this.mainPressed = false;
      this.sidePressed = false;
      this.lastX = 0;
      this.lastY = 0;
      this.userSelectState = false;
      this.isTouch = false;
      this.touch = {
        x: 0,
        y: 0
      };
      this.onTouchStart = (ev) => {
        const mev = this.createMouseEventFromTouch("mousedown", ev);
        this.onMouseDown(mev);
      };
      this.onTouchMove = (ev) => {
        const mev = this.createMouseEventFromTouch("mousemove", ev);
        this.touch.x = mev.x;
        this.touch.y = mev.y;
        this.onMouseMove(mev);
      };
      this.onTouchEnd = (ev) => {
        this.isTouch = !ev.isTrusted;
        const mev = this.createMouseEventFromTouch("mouseup", ev);
        this.onMouseUp(mev);
      };
      this.onMouseUp = (ev) => {
        this.isTouch = !ev.isTrusted;
        const shouldEmitChange = this.isPickingColour;
        this.mainPressed = false;
        this.sidePressed = false;
        if (shouldEmitChange) {
          this.forceUpdate();
          this.emitColour();
        }
        this.userSelect(true);
      };
      this.onMouseMove = (ev) => {
        this.lastX = ev.clientX;
        this.lastY = ev.clientY;
        this.isTouch = !ev.isTrusted;
        if (this.mainPressed) {
          const { x: x2, y: y2, width, height } = this.getCanvasBounds();
          const calcX = (0, import_lodash5.clamp)(ev.x - x2, 0, width);
          const calcY = (0, import_lodash5.clamp)(ev.y - y2, 0, height);
          const v2 = Math.round(this.state.colour.hsv.v * this.palette.SV_MAX);
          const rgb = this.palette.getColourAt(calcX, calcY, v2);
          this.setNewColor(rgb);
          this.emitColour(true);
        } else if (this.sidePressed) {
          const { y: y2, height } = this.getCanvasSideBounds();
          const calcY = (0, import_lodash5.clamp)(ev.y - y2, 0, height);
          const hsv = this.state.colour.hsv;
          const h2 = hsv.h;
          const s2 = hsv.s * this.palette.SV_MAX;
          const rgb = this.palette.getSideColour(h2, s2, calcY);
          const colour = this.getColour(rgb);
          const inputs = this.getColourString(colour);
          this.setState({ activeHSV: { ...colour.hsv }, colour, inputs });
          this.updateViews();
          this.emitColour(true);
        }
      };
      this.onMouseDown = (ev) => {
        const target = ev.target || document.elementFromPoint(ev.x, ev.y);
        if (target === this.canvas) {
          this.mainPressed = true;
          this.userSelect(false);
        } else if (target === this.canvasSide) {
          this.sidePressed = true;
          this.userSelect(false);
        }
      };
      this.drawCanvas = () => {
        const ctx = this.ctxMain;
        const v2 = Math.round(this.state.activeHSV.v * this.palette.SV_MAX);
        const imageData = this.props.palette.getImageDataMain(v2);
        ctx.putImageData(imageData, 0, 0);
        ctx.fillStyle = "#000000";
        const { width, height } = this.getCanvasBounds();
        const x2 = Math.round(this.state.colour.hsv.h / this.palette.H_MAX * width);
        const y2 = Math.round(height - this.state.colour.hsv.s * height);
        ctx.strokeStyle = "#ffffff";
        ctx.beginPath();
        ctx.arc(x2, y2, 3, 0, 2 * Math.PI);
        ctx.stroke();
        ctx.strokeStyle = "#000000";
        ctx.beginPath();
        ctx.arc(x2, y2, 2, 0, 4 * Math.PI);
        ctx.stroke();
      };
      this.drawSide = () => {
        const ctx = this.ctxSide;
        const { width, height } = this.getCanvasSideBounds();
        const hsl = this.state.activeHSV;
        const h2 = Math.round(hsl.h);
        const s2 = Math.round(hsl.s * this.palette.SV_MAX);
        const v2 = Math.round(height - hsl.v * height);
        const imageData = this.palette.getImageDataSide(h2, s2);
        ctx.putImageData(imageData, 0, 0);
        ctx.fillStyle = "#ffffff";
        ctx.fillRect(0, v2, width, 3);
        ctx.fillStyle = "#000000";
        ctx.fillRect(0, v2 + 1, width, 1);
      };
      const defaultHex = "#FF0000";
      const rgb = hex2rgb(defaultHex);
      const hsv = rgb2hsv(rgb);
      const colour = {
        rgb,
        hsv,
        hex: defaultHex
      };
      this.state = {
        height: props.height || this.MAX_COLOUR_VALUE,
        width: props.width || this.MAX_COLOUR_VALUE,
        activeHSV: { ...hsv },
        colour,
        inputs: this.getColourString(colour)
      };
    }
    componentDidMount() {
      this.ctxMain = this.canvas.getContext("2d");
      this.ctxSide = this.canvasSide.getContext("2d");
      this.ctxPreview = this.canvasPreview.getContext("2d");
      window.addEventListener("mouseup", this.onMouseUp);
      window.addEventListener("mousemove", this.onMouseMove);
      window.addEventListener("mousedown", this.onMouseDown);
      window.addEventListener("touchstart", this.onTouchStart);
      window.addEventListener("touchend", this.onTouchEnd);
      window.addEventListener("touchmove", this.onTouchMove);
      if (this.props.colour) {
        const result = hex2rgb(this.props.colour);
        if (result) {
          this.setNewColor(result);
          requestAnimationFrame(() => this.updateViews());
        }
      }
      this.updateViews();
    }
    componentWillUnmount() {
      window.removeEventListener("mouseup", this.onMouseUp);
      window.removeEventListener("mousemove", this.onMouseMove);
      window.removeEventListener("mousedown", this.onMouseDown);
      window.removeEventListener("touchstart", this.onTouchStart);
      window.removeEventListener("touchend", this.onTouchEnd);
      window.removeEventListener("touchmove", this.onTouchMove);
      this.userSelect(true);
    }
    createMouseEventFromTouch(type, ev) {
      const screenX = ev.touches[0] ? ev.touches[0].screenX : this.touch.x;
      const screenY = ev.touches[0] ? ev.touches[0].screenY : this.touch.y;
      const clientX = ev.touches[0] ? ev.touches[0].clientX : this.touch.x;
      const clientY = ev.touches[0] ? ev.touches[0].clientY : this.touch.y;
      const mouseEvent = new MouseEvent(type, {
        screenX,
        screenY,
        clientX,
        clientY,
        view: window
      });
      return mouseEvent;
    }
    emitColour(liveUpdate) {
      if (!this.props.onChange) {
        return;
      }
      if (this.props.lifeUpdate && liveUpdate) {
        this.props.onChange(cloneDeep(this.state.colour));
      } else if (!this.props.lifeUpdate && liveUpdate) {
      } else {
        this.props.onChange(cloneDeep(this.state.colour));
      }
    }
    getColour(rgb) {
      const hex = rgb2hex(rgb.r, rgb.g, rgb.b);
      const hsv = rgb2hsv(rgb);
      return { rgb, hsv, hex };
    }
    getColourString(color) {
      return {
        hex: color.hex.replace(/#/g, ""),
        hsv: {
          h: Math.round(color.hsv.h).toString(),
          s: Math.round(color.hsv.s * this.palette.SV_MAX).toString(),
          v: Math.round(color.hsv.v * this.palette.SV_MAX).toString()
        },
        rgb: {
          r: color.rgb.r.toString(),
          b: color.rgb.b.toString(),
          g: color.rgb.g.toString()
        }
      };
    }
    updateViews() {
      this.drawCanvas();
      this.drawSide();
      this.drawPreview();
    }
    setNewColor(rgb) {
      const colour = this.getColour(rgb);
      const inputs = this.getColourString(colour);
      const hsv = { ...colour.hsv };
      this.setState({ colour, inputs, activeHSV: hsv });
      this.updateViews();
    }
    drawPreview() {
      const ctx = this.ctxPreview;
      const { width, height } = this.getCanvasPreviewBounds();
      ctx.fillStyle = this.state.colour.hex;
      ctx.fillRect(0, 0, width, height);
    }
    get canvas() {
      return this.main.current;
    }
    get canvasSide() {
      return this.side.current;
    }
    get canvasPreview() {
      return this.preview.current;
    }
    get palette() {
      return this.props.palette;
    }
    getCanvasSideBounds() {
      return this.canvasSide.getBoundingClientRect();
    }
    getCanvasBounds() {
      return this.canvas.getBoundingClientRect();
    }
    getCanvasPreviewBounds() {
      return this.canvasPreview.getBoundingClientRect();
    }
    onInputChange(type, value) {
      if (type !== "HEX") {
        value = parseInt(value.replace(/\D/g, "")).toString();
      }
      let number = parseInt(value);
      if (isNaN(number)) {
        number = 0;
      }
      const inputs = { ...this.state.inputs };
      switch (type) {
        case "R":
          const rgb = { ...this.state.colour.rgb };
          rgb.r = number;
          this.setNewColor(rgb);
          return;
        case "G":
          const rgb2 = { ...this.state.colour.rgb };
          rgb2.g = number;
          this.setNewColor(rgb2);
          return;
        case "B":
          const rgb3 = { ...this.state.colour.rgb };
          rgb3.g = number;
          this.setNewColor(rgb3);
          return;
        case "H":
          const hsv = { ...this.state.colour.hsv };
          hsv.h = number;
          this.setNewColor(hsv2rgb(hsv));
          return;
        case "S":
          const hsv2 = { ...this.state.colour.hsv };
          hsv2.s = number / this.palette.SV_MAX;
          this.setNewColor(hsv2rgb(hsv2));
          return;
        case "V":
          const hsv3 = { ...this.state.colour.hsv };
          hsv3.v = number / this.palette.SV_MAX;
          this.setNewColor(hsv2rgb(hsv3));
          return;
        case "HEX":
          const result = hex2rgb(value);
          if (result) {
            this.setNewColor(result);
            return;
          } else {
            inputs.hex = value;
          }
          break;
        default:
          break;
      }
      this.setState({ inputs });
    }
    userSelect(enable) {
      if (this.userSelectState === enable) {
        return;
      }
      if (enable) {
        document.body.style.userSelect = "";
      } else {
        document.body.style.userSelect = "none";
      }
      this.userSelectState = enable;
    }
    get isPickingColour() {
      return this.mainPressed || this.sidePressed;
    }
    get renderPopup() {
      if (!this.isPickingColour) {
        return null;
      }
      const diff = this.isTouch ? 90 : 30;
      let name = (0, import_color_namer_sdk.default)(this.state.colour.hex).basic[0].name;
      name = `${name[0].toUpperCase()}${name.substring(1)}`;
      const style = {
        left: `${this.lastX}px`,
        top: `${this.lastY - diff}px`
      };
      const styleColor = {
        backgroundColor: `${this.state.colour.hex}`
      };
      return /* @__PURE__ */ import_react7.default.createElement(Popup, { style }, /* @__PURE__ */ import_react7.default.createElement("div", null, /* @__PURE__ */ import_react7.default.createElement(ColorPreview, { style: styleColor }), /* @__PURE__ */ import_react7.default.createElement(ColourName, null, name)));
    }
    input(type, displayedValue, value, larger = false) {
      const style = larger ? { width: "60px" } : null;
      return /* @__PURE__ */ import_react7.default.createElement(DivInputBox, null, /* @__PURE__ */ import_react7.default.createElement(UnselectableSpan, null, displayedValue, " "), /* @__PURE__ */ import_react7.default.createElement(
        InputColourBoxes,
        {
          style,
          onChange: (e2) => this.onInputChange(type, e2.target.value),
          type: "text",
          value
        }
      ));
    }
    get exitButtons() {
      if (!this.props.onClose) {
        return null;
      }
      return /* @__PURE__ */ import_react7.default.createElement(ExitButtons, null, /* @__PURE__ */ import_react7.default.createElement("button", { onClick: this.props.onClose }, /* @__PURE__ */ import_react7.default.createElement(FontAwesomeIcon, { icon: faTimes })));
    }
    get renderer() {
      return this._renderer;
    }
    render() {
      const i2 = this.state.inputs;
      return /* @__PURE__ */ import_react7.default.createElement(Div3, { ref: this._renderer, style: { width: `390px`, height: `270px` } }, this.exitButtons, this.renderPopup, /* @__PURE__ */ import_react7.default.createElement("canvas", { ref: this.main, height: this.state.height, width: this.state.width }), /* @__PURE__ */ import_react7.default.createElement("canvas", { style: { marginLeft: "5px" }, ref: this.side, height: this.state.height, width: 25 }), /* @__PURE__ */ import_react7.default.createElement(DivInputBoxes, null, /* @__PURE__ */ import_react7.default.createElement("canvas", { ref: this.preview, height: 50, width: 50 }), this.input("H", "H", i2.hsv.h), this.input("S", "S", i2.hsv.s), this.input("V", "V", i2.hsv.v), /* @__PURE__ */ import_react7.default.createElement("br", null), this.input("R", "R", i2.rgb.r), this.input("G", "G", i2.rgb.g), this.input("B", "B", i2.rgb.b), this.input("HEX", "#", i2.hex, true)));
    }
  };

  // src/client/Components/ColourSetter/ColourSetter.tsx
  var Canvas = styled_components_browser_esm_default.canvas`
    margin: 5px;
    border: 2px solid black;
    border-radius: 5px;
    touch-action: none;
`;
  var Div4 = styled_components_browser_esm_default.div`
    cursor: pointer;
    display: inline-block;
    width: 70px;
    display: flex;
`;
  var Input = styled_components_browser_esm_default.input`
    outline: none;
    margin-top: 8px;
    width: 72px !important;
    border-radius: 5px;
    height: 20px;
    padding: 0px;
    border: 2px solid black;

    ::disabled {
        border: 2px solid gray;
    }
`;
  var FixedDix = styled_components_browser_esm_default.div`
    position: fixed;
    z-index: 9999;
`;
  var ColourSetter = class extends import_react8.default.Component {
    constructor(props) {
      super(props);
      this.HOLD = 1e3;
      this._renderer = import_react8.default.createRef();
      this.canvasRef = import_react8.default.createRef();
      this.ref = import_react8.default.createRef();
      this.refColourPicker = import_react8.default.createRef();
      this.onBoxClick = false;
      this.touchStart = void 0;
      this.destroyed = false;
      this.onAnyClick = (ev) => {
        if (this.onBoxClick || !this.colourPickerRef || !this.state.colourPicker) {
          this.onBoxClick = false;
          return;
        }
        const ref = this.refColourPicker.current.renderer.current;
        const div = ev.target;
        if (!div.contains)
          return;
        if (div.contains(ref) || !ref.contains(div)) {
          this.setState({ colourPicker: false });
          this.props.onChange("change", this.state.colour);
        }
      };
      this.onTouchEnd = () => {
        this.clearTimeout();
      };
      this.onTouchStart = (ev) => {
        ev.preventDefault();
        this.clearTimeout();
        this.touchStart = setTimeout(() => {
          this.openColourPicker();
        }, this.HOLD);
      };
      this.onUpdate = () => {
        if (!this.colourPickerRef) {
          return;
        }
        const div = this.colourPickerRef;
        const refBounds = this.ref.current.getBoundingClientRect();
        const divBounds = div.getBoundingClientRect();
        const offset = 10;
        let newX = Math.round(refBounds.x + refBounds.width * 0.5);
        let newY = Math.round(refBounds.y + refBounds.height * 0.5);
        if (window.innerWidth < newX + divBounds.width - offset) {
          newX = window.innerWidth - divBounds.width - offset;
        }
        if (window.innerHeight < newY + divBounds.height - offset) {
          newY = window.innerWidth - divBounds.height - offset;
        }
        this.setState({ x: newX, y: newY });
      };
      this.draw = () => {
        if (!this.canvas)
          return;
        const crx = this.crx;
        const { width, height } = this.canvas.getBoundingClientRect();
        crx.fillStyle = this.state.colour;
        crx.fillRect(0, 0, width, height);
      };
      this.clearTimeout = () => {
        if (this.touchStart) {
          clearTimeout(this.touchStart);
          this.touchStart = void 0;
        }
      };
      this.onClick = (ev) => {
        const c2 = this.props.onChange;
        if (this.props.mode === "read" || this.props.mode === "read-set") {
          if (c2) {
            return c2("click", this.state.colour);
          }
        }
        this.openColourPicker();
      };
      this.onContext = (ev) => {
        const c2 = this.props.onChange;
        if (this.props.mode === "read-set") {
          ev.preventDefault();
          this.openColourPicker();
        }
      };
      const rgb = props.colourRGB || hex2rgb(this.props.colour);
      const colour = rgb2hex(rgb.r, rgb.g, rgb.b);
      this.state = {
        height: this.props.height || 25,
        width: this.props.width || 50,
        colour,
        input: colour,
        colourPicker: false,
        mode: this.props.mode || "set",
        inputValid: true,
        x: 0,
        y: 0
      };
    }
    componentDidUpdate(props) {
      if (props.colour && props.colour !== this.props.colour) {
        const hex = props.colour;
        this.setState({ colour: hex, input: hex });
        requestAnimationFrame(this.draw);
      } else if (props.colourRGB && (props.colourRGB.r !== this.props.colourRGB.r || props.colourRGB.g !== this.props.colourRGB.g || props.colourRGB.b !== this.props.colourRGB.b)) {
        const { r: r2, g: g2, b: b2 } = this.props.colourRGB;
        const hex = rgb2hex(r2, g2, b2);
        this.setState({ colour: hex, input: hex });
        requestAnimationFrame(this.draw);
      }
    }
    componentDidMount() {
      this.crx = this.canvas.getContext("2d");
      this.draw();
      window.addEventListener("resize", this.onUpdate);
      window.addEventListener("touchend", this.onTouchEnd);
      window.addEventListener("click", this.onAnyClick);
    }
    componentWillUnmount() {
      this.destroyed = true;
      this.clearTimeout();
      window.removeEventListener("resize", this.onUpdate);
      window.removeEventListener("click", this.onAnyClick);
      window.removeEventListener("touchend", this.onTouchEnd);
    }
    openColourPicker() {
      this.onBoxClick = true;
      if (!this.state.colourPicker) {
        this.setState({ colourPicker: true });
        requestAnimationFrame(this.onUpdate);
      }
    }
    get colourPicker() {
      if (!this.state.colourPicker) {
        return null;
      }
      const onChange = (ev) => {
        const colour = ev.hex;
        const input = colour;
        this.setState({ colour, input });
        this.draw();
      };
      const onExit = () => {
        this.setState({ colourPicker: false });
      };
      return /* @__PURE__ */ import_react8.default.createElement(FixedDix, { style: { left: `${this.state.x}px`, top: `${this.state.y}px` } }, /* @__PURE__ */ import_react8.default.createElement(
        ColourPicker,
        {
          ref: this.refColourPicker,
          palette: this.props.palette,
          onChange,
          onClose: onExit
        }
      ));
    }
    get input() {
      if (!this.props.renderInput)
        return null;
      const readOnly = this.props.mode === "read";
      const onChange = (ev) => {
        if (this.props.mode === "read") {
          return;
        }
        const hex = ev.target.value;
        const rgb = hex2rgb(hex);
        if (rgb) {
          const corrected = hex.startsWith("#") ? hex : `#${hex}`;
          this.setState({ colour: corrected, input: corrected, inputValid: true });
          requestAnimationFrame(() => {
            if (!this.destroyed) {
              this.props.onChange("change", this.state.colour);
              this.draw();
            }
          });
        } else {
          this.setState({ input: hex, inputValid: false });
        }
      };
      const style = this.state.inputValid ? { border: "3px solid transparent" } : { border: "3px solid red" };
      return /* @__PURE__ */ import_react8.default.createElement(
        Input,
        {
          title: "Colour hex",
          style,
          type: "text",
          maxLength: 7,
          value: this.state.input,
          onChange,
          readOnly
        }
      );
    }
    get colourPickerRef() {
      if (!this.refColourPicker || !this.refColourPicker.current || !this.refColourPicker.current.renderer.current) {
        return null;
      }
      return this.refColourPicker.current.renderer.current;
    }
    get renderer() {
      return this._renderer;
    }
    get canvas() {
      return this.canvasRef.current;
    }
    render() {
      return /* @__PURE__ */ import_react8.default.createElement(Div4, { ref: this.ref, style: this.props.renderInput ? { width: "190px" } : {} }, this.colourPicker, /* @__PURE__ */ import_react8.default.createElement(
        Canvas,
        {
          ref: this.canvasRef,
          onClick: this.onClick,
          onTouchStart: this.onTouchStart,
          onContextMenu: this.onContext,
          height: this.state.height,
          width: this.state.width
        }
      ), this.input);
    }
  };

  // src/client/Components/CustomTab/Pattern.tsx
  var ITEM_HEIGHT = 42;
  var BORDER_RADIUS_HEIGHT = 4;
  var BACKGROUND_COLOUR = `rgb(32, 32, 32)`;
  var Div5 = styled_components_browser_esm_default.div`
    width: 350px;
    height: ${ITEM_HEIGHT}px;
    background-color: ${BACKGROUND_COLOUR};
    border-radius: ${BORDER_RADIUS_HEIGHT}px;
    margin: 2px;
    display: flex;
    flex-direction: row;

    color: white;
    transition: opacity 0.25s;

    select {
        border-radius: 5px;
    }

    input {
        width: 50px;
    }
`;
  var Button3 = styled_components_browser_esm_default.button`
    background-color: black;
    color: white;
    outline: none;
    border-radius: 4px;
    border: none;
    width: 25px;
    height: 25px;
    transition: background-color 0.1s;
    :hover {
        background-color: rgb(42, 42, 42);
    }
`;
  var DragDiv = styled_components_browser_esm_default.div`
    cursor: grab;
    background-color: rgba(255, 255, 255, 0.1);
    width: 42px;
    svg {
        font-size: 20px;
        margin: 10px 5px;
    }
`;
  var Mock = styled_components_browser_esm_default.div`
    pointer-events: none;
    position: fixed;
    z-index: 9999999;
    opacity: 0.9;
`;
  var TypeSelector = styled_components_browser_esm_default.div`
    display: flex;
    flex-direction: column;
    span {
        font-size: 10px;
    }
`;
  var Navigator = styled_components_browser_esm_default.div`
    display: flex;
    flex-direction: column;
`;
  var Pattern = class _Pattern extends import_react9.default.Component {
    constructor(props) {
      super(props);
      this.HEIGHT = ITEM_HEIGHT;
      this.MODES = MODES;
      this.ref = import_react9.default.createRef();
      this.inputFocus = false;
      this.destroyed = false;
      this.onDown = () => {
        this.props.onDown && this.props.onDown();
      };
      this.onUp = () => {
        this.props.onUp && this.props.onUp();
      };
      this.onInputChange = (ev) => {
        const value = ev.target.value.replace(/\D/g, "");
        let number = parseInt(value);
        if (isNaN(number)) {
          number = 1e3;
        }
        number = Math.abs(number) || 1;
        this.setState({ delay: number });
      };
      this.onColourChange = (type, hex) => {
        const rgb = hex2rgb(hex);
        if (!rgb) {
          Logger.debug("Incorrect colour type from colour setter", hex);
          return;
        }
        this.props.onColourUpdate(hex);
      };
      this.onInputMove = (ev) => {
        if (!this.state.mock) {
          return;
        }
        const mock = { ...this.state.mock };
        let clientY = 0;
        if (this.isTouch(ev)) {
          clientY = ev.touches[0].clientY;
        } else {
          clientY = ev.clientY;
        }
        const y2 = mock.my + clientY - mock.my;
        mock.y = y2;
        mock.lestY = clientY;
        this.setState({ mock });
        this.props.onDrag(mock.omy - clientY, this.HEIGHT, false);
      };
      this.onInputUp = () => {
        if (this.state.mock) {
          const mock = this.state.mock;
          this.props.onDrag(mock.omy - mock.lestY, this.HEIGHT, true);
          if (!this.destroyed) {
            this.setState({ mock: void 0 });
          }
        }
      };
      this.onInputDown = (my) => {
        const { x: x2, y: y2 } = this.ref.current.getBoundingClientRect();
        const mock = { my, x: x2, y: y2, omy: my, lestY: my };
        this.setState({ mock });
      };
      this.onModeChange = (ev) => {
        this.props.onModeUpdate && this.props.onModeUpdate(ev.target.value);
      };
      this.state = {
        delay: props.ledPattern.delay
      };
    }
    componentDidMount() {
      window.addEventListener("mouseup", this.onInputUp);
      window.addEventListener("touchend", this.onInputUp);
      window.addEventListener("touchmove", this.onInputMove);
      window.addEventListener("mousemove", this.onInputMove);
    }
    componentWillUnmount() {
      window.removeEventListener("mouseup", this.onInputUp);
      window.removeEventListener("touchend", this.onInputUp);
      window.removeEventListener("touchmove", this.onInputMove);
      window.removeEventListener("mousemove", this.onInputMove);
      this.destroyed = true;
    }
    componentDidUpdate(props) {
      if (props.ledPattern.delay !== this.state.delay && !this.inputFocus) {
        this.setState({ delay: this.props.ledPattern.delay });
      }
    }
    fontAwesome(icon2, onClick, style) {
      return /* @__PURE__ */ import_react9.default.createElement(import_react9.default.Fragment, null, /* @__PURE__ */ import_react9.default.createElement(Button3, { onClick, style }, /* @__PURE__ */ import_react9.default.createElement(FontAwesomeIcon, { icon: icon2 })));
    }
    isTouch(ev) {
      return !!ev.touches;
    }
    get draggableDiv() {
      if (!this.props.onDrag) {
        return null;
      }
      const onTouch = (ev) => {
        const my = ev.touches[0].clientY;
        this.onInputDown(my);
      };
      const onMouseDown = (ev) => {
        const my = ev.clientY;
        this.onInputDown(my);
      };
      return /* @__PURE__ */ import_react9.default.createElement(DragDiv, { onMouseDown, onTouchStart: onTouch }, /* @__PURE__ */ import_react9.default.createElement(FontAwesomeIcon, { icon: faGripLines }));
    }
    get hasMock() {
      return !!this.state.mock;
    }
    get mock() {
      if (!this.state.mock) {
        return null;
      }
      const style = {
        left: `${this.state.mock.x}px`,
        top: `${this.state.mock.y}px`
      };
      return /* @__PURE__ */ import_react9.default.createElement(Mock, { style }, /* @__PURE__ */ import_react9.default.createElement(
        _Pattern,
        {
          ledPattern: this.props.ledPattern,
          rgb: this.props.ledPattern.rgb,
          onDelete: () => {
          },
          palette: this.props.palette
        }
      ));
    }
    get style() {
      if (this.props.selected) {
        return { border: `1px solid yellow` };
      }
      if (!this.hasMock)
        return void 0;
      return { opacity: "0.25" };
    }
    render() {
      return /* @__PURE__ */ import_react9.default.createElement(import_react9.default.Fragment, null, this.mock, /* @__PURE__ */ import_react9.default.createElement(Div5, { ref: this.ref, style: this.style }, /* @__PURE__ */ import_react9.default.createElement(Navigator, null, /* @__PURE__ */ import_react9.default.createElement(Button3, { onClick: this.onUp, style: this.props.onUp ? {} : { opacity: "0" } }, /* @__PURE__ */ import_react9.default.createElement(FontAwesomeIcon, { icon: faArrowUp })), /* @__PURE__ */ import_react9.default.createElement(Button3, { onClick: this.onDown, style: this.props.onDown ? {} : { opacity: "0" } }, /* @__PURE__ */ import_react9.default.createElement(FontAwesomeIcon, { icon: faArrowDown }))), /* @__PURE__ */ import_react9.default.createElement(
        ColourSetter,
        {
          colourRGB: this.props.rgb,
          palette: this.props.palette,
          onChange: this.onColourChange,
          renderInput: this.props.compact,
          mode: "set"
        }
      ), /* @__PURE__ */ import_react9.default.createElement(TypeSelector, null, this.props.compact ? /* @__PURE__ */ import_react9.default.createElement("span", null, "Mode") : null, /* @__PURE__ */ import_react9.default.createElement(
        "select",
        {
          title: "Mode",
          name: "type",
          id: "type",
          onChange: this.onModeChange,
          value: this.props.ledPattern.mode
        },
        this.MODES.map((e2, i2) => /* @__PURE__ */ import_react9.default.createElement("option", { key: i2, value: e2 }, e2))
      )), /* @__PURE__ */ import_react9.default.createElement(TypeSelector, null, this.props.compact ? /* @__PURE__ */ import_react9.default.createElement("span", null, "Delay") : null, /* @__PURE__ */ import_react9.default.createElement(
        "input",
        {
          title: "Delay",
          type: "text",
          value: this.state.delay,
          onChange: this.onInputChange,
          onKeyUp: (ev) => {
            if (ev.key.toLowerCase() === "enter" && this.state.delay !== this.props.ledPattern.delay) {
              this.props.onDelayUpdate(this.state.delay);
            }
          },
          onFocus: () => {
            this.inputFocus = true;
          },
          onBlur: () => {
            this.inputFocus = false;
            this.props.onDelayUpdate && this.props.onDelayUpdate(this.state.delay);
          }
        }
      )), this.fontAwesome(faTimes, () => this.props.onDelete()), this.draggableDiv));
    }
  };

  // src/client/Components/CustomTab/PatternBuilder.tsx
  var Div6 = styled_components_browser_esm_default.div`
    width: 370px;
    padding: 5px;
    border-radius: 4px;
    border: 1px solid white;
`;
  var DivButtons = styled_components_browser_esm_default.div`
    width: 300px;
    display: inline-block;
    padding: 5px;
`;
  var PatternList = styled_components_browser_esm_default.div`
    max-height: 500px;
    overflow-y: auto;
    overflow-x: none;
`;
  var AddButton = styled_components_browser_esm_default.button`
    width: 100%;
    height: ${ITEM_HEIGHT}px;
    background-color: ${BACKGROUND_COLOUR};
    border-radius: ${BORDER_RADIUS_HEIGHT}px;
    color: white;
    border: none;
    outline: none;
    transition: background-color 0.15s;
    :hover {
        background-color: rgba(255, 255, 255, 0.15);
    }
`;
  var Button4 = styled_components_browser_esm_default.button`
    color: white;
    padding: 5px;
    margin: 2px;
    background-color: ${BACKGROUND_COLOUR};
    border-radius: ${BORDER_RADIUS_HEIGHT}px;
    border: none;
    outline: none;
`;
  var MoveDiv = styled_components_browser_esm_default.div`
    margin: 0;
    padding: 0 5px;
    transition: border-color 0.5s;
    border-radius: 2px;
    overflow-y: auto;
    overflow-x: none;
`;
  var Canvas2 = styled_components_browser_esm_default.canvas`
    width: fit-content;
    border: 2px solid black;
    border-radius: 2px;
`;
  var Select = styled_components_browser_esm_default.select`
    outline: none;
    background-color: ${BACKGROUND_COLOUR};
    border-radius: ${BORDER_RADIUS_HEIGHT}px;
    color: white;
    margin: 0 5px;
    border: none;
    padding: 5px;
`;
  var Input2 = styled_components_browser_esm_default.input`
    outline: none;
    background-color: ${BACKGROUND_COLOUR};
    border-radius: ${BORDER_RADIUS_HEIGHT}px;
    color: white;
    margin: 0 5px;
    border: none;
    padding: 5px;
    :disabled {
        color: rgba(128, 128, 128);
    }
`;
  var PatternBuilder = class extends import_react10.default.Component {
    constructor(props) {
      super(props);
      this.destroyed = false;
      this.div = import_react10.default.createRef();
      this.ref = import_react10.default.createRef();
      this.canvasWidth = 350;
      this.canvasHeight = 28;
      this.patternAnimator = new PatternAnimator();
      this.lastSent = Date.now();
      this.DELAY_LIVE_PREVIEW = 10;
      this.onPatternUpdate = (patterns) => {
        let index2 = this.state.activePatternIndex;
        if (!patterns[index2]) {
          index2 = 0;
        }
        this.setState({ patterns, activePatternIndex: index2 });
      };
      this.live = async () => {
        const now = Date.now();
        if (!this.state.livePreview || this.lastSent > now - this.DELAY_LIVE_PREVIEW) {
          return;
        }
        try {
          const s2 = this.patternAnimator.state;
          this.props.als.lightSocket.clientSocket.clientHandle.send(
            0 /* RGBSet */,
            new BinaryBuffer(3).setUint8(s2.r).setUint8(s2.g).setUint8(s2.b).getBuffer()
          );
        } catch (error) {
          Logger.error("Socket sent", error);
        }
        this.lastSent = Date.now();
      };
      this.toggleLivePreview = () => {
        const toggle = !this.state.livePreview;
        if (this.frame) {
          clearTimeout(this.frame);
        }
        this.frame = void 0;
        if (toggle) {
          this.frame = setTimeout(this.live, this.DELAY_LIVE_PREVIEW);
        }
        this.setState({ livePreview: toggle });
      };
      this.draw = () => {
        const { width, height } = this.ref.current.getBoundingClientRect();
        const s2 = this.patternAnimator.state;
        this.ctx.fillStyle = `${rgb2hex(s2.r, s2.g, s2.b)}`;
        this.ctx.fillRect(0, 0, width, height);
        const p2 = this.patternAnimator;
        this.ctx.font = " bold 15px arial";
        const MAX_RGB2 = 255;
        this.ctx.fillStyle = `${rgb2hex(MAX_RGB2 - s2.r, MAX_RGB2 - s2.g, MAX_RGB2 - s2.b)}`;
        const text = `${p2.patternExecutionTime} / ${p2.totalTime}`;
        this.ctx.fillText(text, 0, 12);
        const text2 = `[${p2.index + 1}/${p2.frames}] ${p2.indexTime} / ${p2.nextIndexTime}`;
        this.ctx.fillText(text2, 0, 25);
        this.live();
        this.frame = requestAnimationFrame(this.draw);
      };
      this.onUp = (ledPattern) => {
        this.changePosition(ledPattern, 1);
      };
      this.onDown = (ledPattern) => {
        this.changePosition(ledPattern, -1);
      };
      this.onDelete = (ledPattern) => {
        const pattern = this.pattern;
        if (!pattern) {
          return;
        }
        const index2 = pattern.ledPattern.indexOf(ledPattern);
        const patterns = [...this.state.patterns];
        patterns[this.state.activePatternIndex].ledPattern.splice(index2, 1);
        this.setState({ patterns, unsaved: true });
        this.updatePatternAnimator();
      };
      this.onDrag = (ledPatternItem, distance, height, finished) => {
        const move = Math.round(distance / height);
        const patterns = [...this.state.patterns];
        const ledPattern = this.pattern.ledPattern;
        const index2 = ledPattern.indexOf(ledPatternItem);
        let moveIndex = 0;
        if (ledPattern[index2 - move]) {
          moveIndex = ledPattern.indexOf(ledPattern[index2 - move]);
        } else if (move < 0) {
          moveIndex = ledPattern.length - 1;
        } else {
          moveIndex = 0;
        }
        if (finished) {
          const temp = ledPattern[index2];
          ledPattern[index2] = ledPattern[moveIndex];
          ledPattern[moveIndex] = temp;
          this.setState({ moveIndex: void 0, patterns, unsaved: true });
        } else {
          this.setState({ moveIndex, patterns });
        }
        this.updatePatternAnimator();
      };
      this.onAdd = () => {
        const patterns = [...this.state.patterns];
        const p2 = this.props.als.patternService.getRandomPatternItem();
        patterns[this.state.activePatternIndex].ledPattern.push(p2);
        this.setState({ patterns, unsaved: true });
        this.updatePatternAnimator();
      };
      this.createNewPattern = () => {
        if (this.state.unsaved) {
          return;
        }
        const pattern = this.props.als.patternService.newPattern();
        const patterns = [...this.state.patterns];
        patterns.push(pattern);
        const activePatternIndex = patterns.indexOf(pattern);
        this.setState({ patterns, activePatternIndex, patternRename: pattern.name, unsaved: true });
        this.updatePatternAnimator();
      };
      this.deletePattern = async () => {
        const pattern = this.pattern;
        try {
          this.props.als.patternService.deletePattern(pattern.name);
          await this.props.als.patternService.sendPatterns();
          this.setState({ unsaved: false, deletionPending: false });
        } catch (error) {
          Logger.debug("Pattern builder", error);
        }
      };
      this.onColourUpdate = (ledPattern, colour) => {
        if (!this.pattern)
          return;
        const pattern = { ...this.pattern };
        const index2 = pattern.ledPattern.indexOf(ledPattern);
        pattern.ledPattern[index2].rgb = hex2rgb(colour);
        const patterns = [...this.state.patterns];
        this.setState({ patterns });
        this.updatePatternAnimator();
      };
      this.onModeUpdate = (ledPattern, mode) => {
        if (!this.pattern)
          return;
        const pattern = { ...this.pattern };
        const index2 = pattern.ledPattern.indexOf(ledPattern);
        pattern.ledPattern[index2].mode = mode;
        const patterns = [...this.state.patterns];
        this.setState({ patterns });
        this.updatePatternAnimator();
      };
      this.onDelayUpdate = (ledPattern, delay) => {
        if (!this.pattern)
          return;
        const pattern = { ...this.pattern };
        const index2 = pattern.ledPattern.indexOf(ledPattern);
        pattern.ledPattern[index2].delay = delay;
        const patterns = [...this.state.patterns];
        this.setState({ patterns });
        this.updatePatternAnimator();
      };
      this.state = {
        activePatternIndex: 0,
        patterns: [],
        livePreview: false,
        unsaved: false,
        deletionPending: false
      };
    }
    updatePatternAnimator() {
      requestAnimationFrame(() => {
        if (this.destroyed) {
          return;
        }
        const pattern = this.state.patterns[this.state.activePatternIndex];
        if (pattern) {
          this.patternAnimator.loadPattern(pattern);
          this.patternAnimator.start();
        }
      });
    }
    async componentDidMount() {
      const p2 = await this.props.als.patternService.fetchPattern();
      const patterns = cloneDeep(p2);
      let activePatternIndex = 0;
      if (this.props.selectedPattern !== void 0) {
        const pattern = this.props.als.patternService.patterns.find((e2) => e2.name = this.props.selectedPattern);
        const index2 = this.props.als.patternService.patterns.indexOf(pattern);
        if (index2 !== -1) {
          activePatternIndex = index2;
        }
      }
      this.setState({ patterns, activePatternIndex });
      this.patternAnimator.loadPattern(patterns[0]);
      this.patternAnimator.start();
      this.ctx = this.ref.current.getContext("2d");
      this.draw();
      this.props.als.patternService.on("update", this.onPatternUpdate);
    }
    componentWillUnmount() {
      this.patternAnimator.stop();
      this.destroyed = true;
      cancelAnimationFrame(this.frame);
      this.props.als.patternService.off("update", this.onPatternUpdate);
    }
    get pattern() {
      return this.state.patterns[this.state.activePatternIndex];
    }
    get patternLength() {
      return this.pattern && this.pattern.ledPattern ? this.pattern.ledPattern.length : 0;
    }
    setActivePattern(ledPattern) {
      const activePatternIndex = this.state.patterns.indexOf(ledPattern);
      if (activePatternIndex === -1) {
        return;
      }
      if (!this.patternAnimator.isPatternActive(ledPattern)) {
        this.patternAnimator.loadPattern(ledPattern);
      }
      this.setState({ activePatternIndex });
    }
    changePosition(ledPattern, move) {
      if (!this.pattern)
        return;
      const pattern = { ...this.pattern };
      const index2 = pattern.ledPattern.indexOf(ledPattern);
      const pat = pattern.ledPattern;
      const temp = pat[index2 - move];
      pat[index2 - move] = pat[index2];
      pat[index2] = temp;
      const patterns = this.state.patterns;
      patterns[this.state.activePatternIndex].ledPattern = pat;
      this.setState({ patterns, unsaved: true });
      this.updatePatternAnimator();
    }
    get header() {
      if (this.state.patternRename !== void 0) {
        const changeName = () => {
          this.props.als.patternService.changeName(this.pattern, this.state.patternRename);
          this.setState({ patternRename: void 0, unsaved: true });
        };
        return /* @__PURE__ */ import_react10.default.createElement(DivButtons, null, /* @__PURE__ */ import_react10.default.createElement(
          Input2,
          {
            value: this.state.patternRename,
            onKeyUp: (ev) => {
              if (ev.key.toLowerCase() === "enter") {
                changeName();
              }
            },
            onChange: (ev) => this.setState({ patternRename: ev.target.value }),
            onBlur: changeName
          }
        ));
      }
      const select = this.state.unsaved || !this.pattern ? /* @__PURE__ */ import_react10.default.createElement(
        Input2,
        {
          title: "You have to save changes before you can switch pattern",
          value: this.pattern && this.pattern.name || "No patterns",
          disabled: true
        }
      ) : /* @__PURE__ */ import_react10.default.createElement(
        Select,
        {
          title: "patternName",
          name: "patternName",
          id: "patternName",
          onChange: (ev) => {
            this.setActivePattern(this.state.patterns.find((p2) => p2.name === ev.target.value));
          },
          value: this.pattern.name
        },
        this.state.patterns.map((m, i2) => {
          return /* @__PURE__ */ import_react10.default.createElement("option", { key: i2, value: m.name }, m.name);
        })
      );
      const saveButton = this.state.unsaved ? /* @__PURE__ */ import_react10.default.createElement("div", null, /* @__PURE__ */ import_react10.default.createElement(
        Button4,
        {
          title: "Save pattern on server",
          onClick: async () => {
            this.props.als.patternService.setPattern(this.state.patterns[this.state.activePatternIndex]);
            try {
              await this.props.als.patternService.sendPatterns();
              this.setState({ unsaved: false });
            } catch (error) {
              Logger.debug("Pattern update failed", error);
            }
          }
        },
        "Save"
      )) : null;
      const renameButton = this.state.patterns.length ? /* @__PURE__ */ import_react10.default.createElement(Button4, { title: "Rename the pattern", onClick: () => this.setState({ patternRename: this.pattern.name }) }, "Rename Pattern") : null;
      const newButton = this.state.unsaved ? null : /* @__PURE__ */ import_react10.default.createElement(Button4, { title: "Add new pattern", onClick: this.createNewPattern }, "New Pattern");
      const livePreview = this.pattern ? /* @__PURE__ */ import_react10.default.createElement(Button4, { title: "Show Live preview", onClick: this.toggleLivePreview }, this.state.livePreview ? "Stop live" : "Go live") : null;
      const deletePattern = this.state.deletionPending ? /* @__PURE__ */ import_react10.default.createElement("div", null, /* @__PURE__ */ import_react10.default.createElement(Button4, { style: { backgroundColor: "red" }, onClick: this.deletePattern }, "Yes"), /* @__PURE__ */ import_react10.default.createElement(Button4, { style: { backgroundColor: "green" }, onClick: () => this.setState({ deletionPending: false }) }, "No")) : /* @__PURE__ */ import_react10.default.createElement(Button4, { title: "DeletePattern", onClick: () => this.setState({ deletionPending: true }) }, "Delete pattern");
      const updateAllFn = () => {
        if (this.state.updateAll) {
          const patterns = [...this.state.patterns];
          const items = patterns[this.state.activePatternIndex].ledPattern;
          for (const item of items) {
            item.delay = this.state.updateAll.delay;
            item.mode = this.state.updateAll.mode;
          }
          this.setState({ patterns, updateAll: void 0, deletionPending: false, unsaved: true });
          this.updatePatternAnimator();
        } else {
          const pattern = this.pattern || this.props.als.patternService.newPattern();
          const ledPattern = pattern.ledPattern[0];
          this.setState({
            updateAll: {
              delay: ledPattern.delay,
              mode: ledPattern.mode
            }
          });
        }
      };
      const onUpdateAllChangeDelay = (ev) => {
        const int = Math.abs(parseInt(ev.target.value.replace(/\D/g, "")) || 1);
        const updateAll2 = { ...this.state.updateAll };
        updateAll2.delay = int;
        this.setState({ updateAll: updateAll2 });
      };
      const onUpdateAllChangeMode = (ev) => {
        const updateAll2 = { ...this.state.updateAll };
        updateAll2.mode = ev.target.value;
        this.setState({ updateAll: updateAll2 });
      };
      const updateAll = this.state.updateAll ? /* @__PURE__ */ import_react10.default.createElement("div", null, /* @__PURE__ */ import_react10.default.createElement("div", null, /* @__PURE__ */ import_react10.default.createElement("span", null, "Delay:"), /* @__PURE__ */ import_react10.default.createElement(Input2, { value: this.state.updateAll.delay, onChange: onUpdateAllChangeDelay })), /* @__PURE__ */ import_react10.default.createElement("div", null, /* @__PURE__ */ import_react10.default.createElement("span", null, "Mode"), /* @__PURE__ */ import_react10.default.createElement(Select, { name: "update-all-mode", id: "update-all-mode", onChange: onUpdateAllChangeMode }, MODES.map((m, i2) => {
        return /* @__PURE__ */ import_react10.default.createElement("option", { key: i2, value: m }, m);
      }))), /* @__PURE__ */ import_react10.default.createElement(Button4, { onClick: updateAllFn }, "Change them all")) : /* @__PURE__ */ import_react10.default.createElement(Button4, { onClick: updateAllFn }, "Update many");
      return /* @__PURE__ */ import_react10.default.createElement(DivButtons, null, select, updateAll, livePreview, saveButton, renameButton, newButton, deletePattern);
    }
    get patternList() {
      if (!this.pattern || !this.pattern.ledPattern) {
        return /* @__PURE__ */ import_react10.default.createElement("span", null, "No pattern");
      }
      return /* @__PURE__ */ import_react10.default.createElement(PatternList, null, this.pattern.ledPattern.map((ledPattern, i2) => {
        const style = () => {
          if (this.state.moveIndex === void 0) {
            return null;
          }
          return { userSelect: "none", pointerEvents: "none" };
        };
        return /* @__PURE__ */ import_react10.default.createElement(MoveDiv, { key: i2, style: style() }, /* @__PURE__ */ import_react10.default.createElement(
          Pattern,
          {
            palette: this.props.palette,
            onUp: i2 !== 0 ? () => this.onUp(ledPattern) : void 0,
            onDown: i2 !== this.patternLength - 1 ? () => this.onDown(ledPattern) : void 0,
            onDelete: () => this.onDelete(ledPattern),
            onColourUpdate: (colour) => this.onColourUpdate(ledPattern, colour),
            onModeUpdate: (mode) => this.onModeUpdate(ledPattern, mode),
            onDelayUpdate: (delay) => this.onDelayUpdate(ledPattern, delay),
            ledPattern,
            rgb: ledPattern.rgb,
            selected: this.state.moveIndex === i2,
            compact: true,
            onDrag: (distance, height, finished) => this.onDrag(ledPattern, distance, height, finished)
          }
        ));
      }), /* @__PURE__ */ import_react10.default.createElement(AddButton, { onClick: this.onAdd }, /* @__PURE__ */ import_react10.default.createElement(FontAwesomeIcon, { icon: faPlus })));
    }
    render() {
      return /* @__PURE__ */ import_react10.default.createElement(Div6, { ref: this.div }, /* @__PURE__ */ import_react10.default.createElement(Canvas2, { ref: this.ref, height: this.canvasHeight, width: this.canvasWidth }), this.header, this.patternList);
    }
  };

  // src/client/Components/CustomTab/ScheduleBuilder.tsx
  var import_react16 = __toESM(require_react());

  // src/client/Components/DayScheduleBuilder/DayScheduleBuilder.tsx
  var import_lodash6 = __toESM(require_lodash());
  var import_react14 = __toESM(require_react());

  // src/client/styles.ts
  var Button5 = styled_components_browser_esm_default.button`
    user-select: none;
    background-color: rgb(42, 42, 42);
    color: white;
    font-size: 20px;
    padding: 2px;
    margin: 2px;
    border-radius: 4px;
    border: none;
    outline: none;
    transition: background-color 0.25s, color 0.25s;
    :hover {
        background-color: rgb(52, 52, 52);
    }
    :disabled {
        color: rgb(128, 128, 128);
        background-color: rgb(16, 16, 16);
    }
`;

  // src/client/Components/CustomTab/ScheduleItem.tsx
  var import_react13 = __toESM(require_react());

  // src/client/Components/CustomTab/PatternPreview.tsx
  var import_react11 = __toESM(require_react());
  var PatternPreview = class extends import_react11.default.Component {
    constructor(props) {
      super(props);
      this.ref = import_react11.default.createRef();
      this.patternAnimator = new PatternAnimator();
      this.isEnabled = true;
      this.draw = () => {
        if (this.isEnabled) {
          const { width, height } = this.canvas.getBoundingClientRect();
          this.ctx.fillStyle = rgbObj2Hex(this.patternAnimator.state);
          this.ctx.fillRect(0, 0, width, height);
        }
        this.frame = requestAnimationFrame(this.draw);
      };
    }
    componentDidMount() {
      this.patternAnimator.loadPattern(this.props.ledPattern);
      this.patternAnimator.start();
      this.ctx = this.canvas.getContext("2d");
      this.frame = requestAnimationFrame(() => {
        this.draw();
        this.isEnabled = false;
      });
    }
    componentWillUnmount() {
      this.patternAnimator.destroy();
      cancelAnimationFrame(this.frame);
    }
    componentDidUpdate() {
      if (!this.patternAnimator.isPatternActive(this.props.ledPattern)) {
        this.patternAnimator.loadPattern(this.props.ledPattern);
      }
    }
    get canvas() {
      return this.ref.current;
    }
    render() {
      return /* @__PURE__ */ import_react11.default.createElement(
        "canvas",
        {
          ref: this.ref,
          width: this.props.width,
          height: this.props.height,
          onMouseEnter: () => {
            this.patternAnimator.reset();
            this.isEnabled = true;
          },
          onMouseLeave: () => {
            this.patternAnimator.reset();
            this.draw();
            this.isEnabled = false;
          }
        }
      );
    }
  };

  // src/client/Components/Time/Time.tsx
  var import_react12 = __toESM(require_react());
  var Input3 = styled_components_browser_esm_default.input`
    user-select: none;
    background-color: rgb(42, 42, 42);
    color: white;
    font-size: 20px;
    padding: 2px;
    margin: 2px;
    border-radius: 4px;
    border: none;
    outline: none;
    transition: background-color 0.25s, color 0.25s;

    :hover {
        background-color: rgb(52, 52, 52);
    }

    :disabled {
        color: rgb(128, 128, 128);
        background-color: rgb(16, 16, 16);
    }
`;
  var TimePickerSecond = class extends import_react12.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        hours: 0,
        minutes: 0,
        seconds: 0
      };
    }
    componentDidMount() {
      this.parseTime();
    }
    componentDidUpdate(prevProps, prevState, snapshot) {
      if (prevProps.time !== this.props.time) {
        this.parseTime();
      }
    }
    parseTime() {
      const [hours, minutes, seconds] = this.props.time.split(":").map((e2) => parseInt(e2, 10));
      this.setState({
        hours,
        minutes,
        seconds
      });
    }
    update(state) {
      const str = `${state.hours.toString().padStart(2, "0")}:${state.minutes.toString().padStart(2, "0")}:${state.seconds.toString().padStart(2, "0")}`;
      this.props.onChange(str);
    }
    render() {
      return /* @__PURE__ */ import_react12.default.createElement("div", null, /* @__PURE__ */ import_react12.default.createElement(
        Input3,
        {
          type: "number",
          id: "hours",
          name: "hours",
          min: "0",
          max: "23",
          value: this.state.hours,
          onChange: (event) => {
            const value = parseInt(event.target.value, 10) || 0;
            this.setState({ hours: value });
            this.update({ ...this.state, hours: value });
          }
        }
      ), /* @__PURE__ */ import_react12.default.createElement(
        Input3,
        {
          type: "number",
          id: "minutes",
          name: "minutes",
          min: "0",
          max: "59",
          value: this.state.minutes,
          onChange: (event) => {
            const value = parseInt(event.target.value, 10) || 0;
            this.setState({ minutes: value });
            this.update({ ...this.state, minutes: value });
          }
        }
      ), /* @__PURE__ */ import_react12.default.createElement(
        Input3,
        {
          type: "number",
          id: "seconds",
          name: "seconds",
          min: "0",
          max: "59",
          value: this.state.seconds,
          onChange: (event) => {
            const value = parseInt(event.target.value, 10) || 0;
            this.setState({ seconds: value });
            this.update({ ...this.state, seconds: value });
          }
        }
      ));
    }
  };

  // src/client/Components/CustomTab/ScheduleItem.tsx
  var Div7 = styled_components_browser_esm_default.div`
    display: flex;
`;
  var Button6 = styled_components_browser_esm_default.button`
    user-select: none;
    background-color: rgb(42, 42, 42);
    color: white;
    font-size: 20px;
    padding: 2px;
    margin: 2px;
    border-radius: 4px;
    border: none;
    outline: none;
    transition: background-color 0.25s, color 0.25s;
    :hover {
        background-color: rgb(52, 52, 52);
    }
    :disabled {
        color: rgb(128, 128, 128);
        background-color: rgb(16, 16, 16);
    }
`;
  var ScheduleHourDescriptor = class extends import_react13.default.Component {
    constructor(props) {
      super(props);
      this.state = {};
    }
    componentDidUpdate() {
    }
    componentDidMount() {
    }
    componentWillUnmount() {
    }
    get descriptor() {
      if (this.props.descriptor.type === "RGB") {
        const onChange = (event, colour) => {
          if (event === "change") {
            this.props.onDataChange(this.props.descriptor.type, hex2rgb(colour));
          }
        };
        return /* @__PURE__ */ import_react13.default.createElement(
          ColourSetter,
          {
            mode: "set",
            colourRGB: this.props.descriptor.data,
            palette: this.props.palette,
            onChange
          }
        );
      } else if (this.props.descriptor.type === "Pattern") {
        const onChange = (ev) => {
          const newPattern = ev.target.value;
          const pattern = this.props.als.patternService.patterns.find((p2) => p2.name === newPattern);
          if (pattern) {
            this.props.onDataChange(this.props.descriptor.type, pattern);
          }
        };
        const ledPattern = this.props.descriptor.data;
        return /* @__PURE__ */ import_react13.default.createElement("div", null, /* @__PURE__ */ import_react13.default.createElement("select", { name: "pattern-select", value: ledPattern.name, onChange }, this.props.als.patternService.patterns.map((m, i2) => {
          return /* @__PURE__ */ import_react13.default.createElement("option", { key: i2, value: m.name }, m.name);
        })), /* @__PURE__ */ import_react13.default.createElement(PatternPreview, { ledPattern, width: 20, height: 20 }));
      }
      return /* @__PURE__ */ import_react13.default.createElement("div", null, "Unknown");
    }
    get typeSelector() {
      const onChange = (ev) => {
        this.props.onTypeChange(ev.target.value);
      };
      return /* @__PURE__ */ import_react13.default.createElement("select", { name: "typeSelect", value: this.props.descriptor.type, onChange }, SCHEDULE_TYPE.map((m, i2) => {
        return /* @__PURE__ */ import_react13.default.createElement("option", { key: i2, value: m }, m);
      }));
    }
    get timePickers() {
      const onChange = (time, start) => {
        const split2 = this.props.time.split("-");
        const newTime = start ? `${time}-${split2[1]}` : `${split2[0]}-${time}`;
        this.props.onTimeChange(this.props.time, newTime);
      };
      const split = this.props.time.split("-");
      return /* @__PURE__ */ import_react13.default.createElement(import_react13.default.Fragment, null, /* @__PURE__ */ import_react13.default.createElement("span", null, "Start:"), /* @__PURE__ */ import_react13.default.createElement(
        TimePickerSecond,
        {
          time: split[0],
          onChange: (ev) => {
            onChange(ev, true);
          }
        }
      ), /* @__PURE__ */ import_react13.default.createElement("span", null, "End:"), /* @__PURE__ */ import_react13.default.createElement(
        TimePickerSecond,
        {
          time: split[1],
          onChange: (ev) => {
            onChange(ev, false);
          }
        }
      ));
    }
    render() {
      return /* @__PURE__ */ import_react13.default.createElement(Div7, null, this.timePickers, this.typeSelector, this.descriptor, /* @__PURE__ */ import_react13.default.createElement(Button6, { onClick: () => this.props.onRemove() }, "Delete"));
    }
  };

  // src/client/Components/DayScheduleBuilder/DayScheduleBuilder.tsx
  var copiedData = [];
  var DayScheduleBuilder = class extends import_react14.default.Component {
    constructor(props) {
      super(props);
      this.debounceSortAndCorrect = (0, import_lodash6.debounce)(() => {
        const state = { ...this.state };
        this.sort(state);
        this.correct(state);
        this.emitChange(state);
      }, SECOND);
      this.pasteDaySchedule = () => {
        const dayDescription = this.props.dayDescription;
        const entries = Object.entries(dayDescription || {});
        const daySchedule = [];
        for (const [key, value] of entries) {
          daySchedule.push({
            time: key,
            data: value
          });
        }
        const state = { ...this.state };
        state.daySchedule = daySchedule;
        this.sort(state);
        this.correct(state);
        this.setState(state);
      };
      this.correct = (state, update = true) => {
        state = state || { ...this.state };
        const daySchedule = [...state.daySchedule];
        for (let i2 = 0; i2 < daySchedule.length; i2++) {
          const next = daySchedule[i2 + 1];
          if (next) {
            const current = daySchedule[i2];
            const timeNow = current.time;
            const timeNext = next.time;
            const timeNowSplit = timeNow.split("-");
            const timeNowStart = timeNext.split("-")[0];
            const dateA = /* @__PURE__ */ new Date(`December 1, 2000 ${timeNowSplit[1]}`);
            const dateB = /* @__PURE__ */ new Date(`December 1, 2000 ${timeNowStart}`);
            if (dateA > dateB) {
              daySchedule[i2].time = `${timeNowSplit[0]}-${timeNowStart}`;
            }
          }
        }
        state.daySchedule = daySchedule;
        if (update) {
          this.setState(state);
        }
      };
      this.sort = (state, update = true) => {
        state = state || { ...this.state };
        const daySchedule = [...state.daySchedule];
        daySchedule.sort((a2, b2) => {
          const timeA = a2.time.split("-");
          const timeB = b2.time.split("-");
          const dateA = /* @__PURE__ */ new Date(`December 1, 2000 ${timeA[0]}`);
          const dateB = /* @__PURE__ */ new Date(`December 1, 2000 ${timeB[0]}`);
          return dateA > dateB ? 1 : -1;
        });
        state.daySchedule = daySchedule;
        if (update) {
          this.setState(state);
        }
      };
      this.onAdd = () => {
        const state = { ...this.state };
        state.daySchedule.push({
          time: this.getRandomTime(),
          data: {
            type: "RGB",
            data: { r: (0, import_lodash6.random)(0, 255), g: (0, import_lodash6.random)(0, 255), b: (0, import_lodash6.random)(0, 255) }
          }
        });
        this.sort(state, false);
        this.correct(state, false);
        this.setState(state);
        this.emitChange(state);
      };
      this.onCopy = () => {
        copiedData = this.state.daySchedule;
        this.updateCanCopy();
      };
      this.onPaste = () => {
        const state = { ...this.state };
        state.daySchedule = copiedData;
        this.setState(state);
        this.emitChange(state);
      };
      this.state = {
        daySchedule: [],
        canPaste: !!copiedData.length
      };
    }
    componentDidMount() {
      this.pasteDaySchedule();
    }
    componentWillUnmount() {
    }
    componentDidUpdate(props) {
      if (props.dayDescription !== this.props.dayDescription) {
        this.pasteDaySchedule();
      }
    }
    emitChange(state) {
      state = state || this.state;
      const dayDescription = {};
      for (const timeItem of state.daySchedule) {
        dayDescription[timeItem.time] = timeItem.data;
      }
      this.props.onChange(dayDescription);
    }
    updateCanCopy() {
      this.setState({ canPaste: !!copiedData.length });
    }
    getRandomTime() {
      const r2 = import_lodash6.random;
      return `${r2(0, 23)}:${r2(10, 59)}:${r2(10, 59)}-${r2(0, 23)}:${r2(10, 59)}:${r2(10, 59)}`;
    }
    onTimeChange(hourDate, time) {
      const state = { ...this.state };
      const index2 = state.daySchedule.indexOf(hourDate);
      if (index2 === -1)
        return;
      state.daySchedule[index2].time = time;
      this.setState(state);
      this.debounceSortAndCorrect();
    }
    onColourChange(hourDate, type, data) {
      const state = { ...this.state };
      const index2 = state.daySchedule.indexOf(hourDate);
      if (index2 === -1)
        return;
      state.daySchedule[index2].data = { type, data };
      this.setState(state);
      this.emitChange(state);
    }
    onTypeChange(hourDate, type) {
      const state = { ...this.state };
      const index2 = state.daySchedule.indexOf(hourDate);
      if (index2 === -1)
        return;
      state.daySchedule[index2].data.type = type;
      this.setState(state);
      this.emitChange(state);
    }
    onRemove(hourDate) {
      const state = { ...this.state };
      const index2 = state.daySchedule.indexOf(hourDate);
      if (index2 === -1)
        return;
      removeFromArray(state.daySchedule, hourDate);
      this.sort(state);
      this.correct(state);
      this.setState(state);
      this.emitChange(state);
    }
    get schedule() {
      return this.state.daySchedule.map((s2, i2) => {
        return /* @__PURE__ */ import_react14.default.createElement(
          ScheduleHourDescriptor,
          {
            key: i2,
            als: this.props.als,
            palette: this.props.palette,
            descriptor: s2.data,
            time: s2.time,
            onTimeChange: (_oldTime, newTime) => this.onTimeChange(s2, newTime),
            onDataChange: (type, data) => this.onColourChange(s2, type, data),
            onTypeChange: (type) => this.onTypeChange(s2, type),
            onRemove: () => this.onRemove(s2)
          }
        );
      });
    }
    render() {
      return /* @__PURE__ */ import_react14.default.createElement("div", null, this.schedule, /* @__PURE__ */ import_react14.default.createElement(Button5, { onClick: this.onAdd }, "Add"), this.state.daySchedule.length ? /* @__PURE__ */ import_react14.default.createElement(Button5, { onClick: this.onCopy }, "Copy") : null, this.state.canPaste ? /* @__PURE__ */ import_react14.default.createElement(Button5, { onClick: this.onPaste }, " Paste ") : null);
    }
  };

  // node_modules/react-tooltip/dist/index.es.js
  var import_react15 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());

  // node_modules/react-tooltip/node_modules/uuid/dist/esm-browser/rng.js
  var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
  var rnds8 = new Uint8Array(16);
  function rng() {
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    return getRandomValues(rnds8);
  }

  // node_modules/react-tooltip/node_modules/uuid/dist/esm-browser/bytesToUuid.js
  var byteToHex = [];
  for (i2 = 0; i2 < 256; ++i2) {
    byteToHex[i2] = (i2 + 256).toString(16).substr(1);
  }
  var i2;
  function bytesToUuid(buf, offset) {
    var i2 = offset || 0;
    var bth = byteToHex;
    return [bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]]].join("");
  }
  var bytesToUuid_default = bytesToUuid;

  // node_modules/react-tooltip/node_modules/uuid/dist/esm-browser/v4.js
  function v4(options, buf, offset) {
    var i2 = buf && offset || 0;
    if (typeof options == "string") {
      buf = options === "binary" ? new Array(16) : null;
      options = null;
    }
    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i2 + ii] = rnds[ii];
      }
    }
    return buf || bytesToUuid_default(rnds);
  }
  var v4_default = v4;

  // node_modules/react-tooltip/dist/index.es.js
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties2(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties2(Constructor, staticProps);
    return Constructor;
  }
  function _defineProperty3(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function ownKeys2(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread22(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys2(Object(source), true).forEach(function(key) {
          _defineProperty3(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o2) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf(o2);
  }
  function _setPrototypeOf(o2, p2) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf(o2, p2);
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _possibleConstructorReturn(self2, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized(self2);
  }
  var CONSTANT = {
    GLOBAL: {
      HIDE: "__react_tooltip_hide_event",
      REBUILD: "__react_tooltip_rebuild_event",
      SHOW: "__react_tooltip_show_event"
    }
  };
  var dispatchGlobalEvent = function dispatchGlobalEvent2(eventName, opts) {
    var event;
    if (typeof window.CustomEvent === "function") {
      event = new window.CustomEvent(eventName, {
        detail: opts
      });
    } else {
      event = document.createEvent("Event");
      event.initEvent(eventName, false, true, opts);
    }
    window.dispatchEvent(event);
  };
  function staticMethods(target) {
    target.hide = function(target2) {
      dispatchGlobalEvent(CONSTANT.GLOBAL.HIDE, {
        target: target2
      });
    };
    target.rebuild = function() {
      dispatchGlobalEvent(CONSTANT.GLOBAL.REBUILD);
    };
    target.show = function(target2) {
      dispatchGlobalEvent(CONSTANT.GLOBAL.SHOW, {
        target: target2
      });
    };
    target.prototype.globalRebuild = function() {
      if (this.mount) {
        this.unbindListener();
        this.bindListener();
      }
    };
    target.prototype.globalShow = function(event) {
      if (this.mount) {
        var hasTarget = event && event.detail && event.detail.target && true || false;
        this.showTooltip({
          currentTarget: hasTarget && event.detail.target
        }, true);
      }
    };
    target.prototype.globalHide = function(event) {
      if (this.mount) {
        var hasTarget = event && event.detail && event.detail.target && true || false;
        this.hideTooltip({
          currentTarget: hasTarget && event.detail.target
        }, hasTarget);
      }
    };
  }
  function windowListener(target) {
    target.prototype.bindWindowEvents = function(resizeHide) {
      window.removeEventListener(CONSTANT.GLOBAL.HIDE, this.globalHide);
      window.addEventListener(CONSTANT.GLOBAL.HIDE, this.globalHide, false);
      window.removeEventListener(CONSTANT.GLOBAL.REBUILD, this.globalRebuild);
      window.addEventListener(CONSTANT.GLOBAL.REBUILD, this.globalRebuild, false);
      window.removeEventListener(CONSTANT.GLOBAL.SHOW, this.globalShow);
      window.addEventListener(CONSTANT.GLOBAL.SHOW, this.globalShow, false);
      if (resizeHide) {
        window.removeEventListener("resize", this.onWindowResize);
        window.addEventListener("resize", this.onWindowResize, false);
      }
    };
    target.prototype.unbindWindowEvents = function() {
      window.removeEventListener(CONSTANT.GLOBAL.HIDE, this.globalHide);
      window.removeEventListener(CONSTANT.GLOBAL.REBUILD, this.globalRebuild);
      window.removeEventListener(CONSTANT.GLOBAL.SHOW, this.globalShow);
      window.removeEventListener("resize", this.onWindowResize);
    };
    target.prototype.onWindowResize = function() {
      if (!this.mount)
        return;
      this.hideTooltip();
    };
  }
  var checkStatus = function checkStatus2(dataEventOff, e2) {
    var show = this.state.show;
    var id = this.props.id;
    var isCapture2 = this.isCapture(e2.currentTarget);
    var currentItem = e2.currentTarget.getAttribute("currentItem");
    if (!isCapture2)
      e2.stopPropagation();
    if (show && currentItem === "true") {
      if (!dataEventOff)
        this.hideTooltip(e2);
    } else {
      e2.currentTarget.setAttribute("currentItem", "true");
      setUntargetItems(e2.currentTarget, this.getTargetArray(id));
      this.showTooltip(e2);
    }
  };
  var setUntargetItems = function setUntargetItems2(currentTarget, targetArray) {
    for (var i2 = 0; i2 < targetArray.length; i2++) {
      if (currentTarget !== targetArray[i2]) {
        targetArray[i2].setAttribute("currentItem", "false");
      } else {
        targetArray[i2].setAttribute("currentItem", "true");
      }
    }
  };
  var customListeners = {
    id: "9b69f92e-d3fe-498b-b1b4-c5e63a51b0cf",
    set: function set(target, event, listener3) {
      if (this.id in target) {
        var map = target[this.id];
        map[event] = listener3;
      } else {
        Object.defineProperty(target, this.id, {
          configurable: true,
          value: _defineProperty3({}, event, listener3)
        });
      }
    },
    get: function get(target, event) {
      var map = target[this.id];
      if (map !== void 0) {
        return map[event];
      }
    }
  };
  function customEvent(target) {
    target.prototype.isCustomEvent = function(ele) {
      var event = this.state.event;
      return event || !!ele.getAttribute("data-event");
    };
    target.prototype.customBindListener = function(ele) {
      var _this = this;
      var _this$state = this.state, event = _this$state.event, eventOff = _this$state.eventOff;
      var dataEvent = ele.getAttribute("data-event") || event;
      var dataEventOff = ele.getAttribute("data-event-off") || eventOff;
      dataEvent.split(" ").forEach(function(event2) {
        ele.removeEventListener(event2, customListeners.get(ele, event2));
        var customListener = checkStatus.bind(_this, dataEventOff);
        customListeners.set(ele, event2, customListener);
        ele.addEventListener(event2, customListener, false);
      });
      if (dataEventOff) {
        dataEventOff.split(" ").forEach(function(event2) {
          ele.removeEventListener(event2, _this.hideTooltip);
          ele.addEventListener(event2, _this.hideTooltip, false);
        });
      }
    };
    target.prototype.customUnbindListener = function(ele) {
      var _this$state2 = this.state, event = _this$state2.event, eventOff = _this$state2.eventOff;
      var dataEvent = event || ele.getAttribute("data-event");
      var dataEventOff = eventOff || ele.getAttribute("data-event-off");
      ele.removeEventListener(dataEvent, customListeners.get(ele, event));
      if (dataEventOff)
        ele.removeEventListener(dataEventOff, this.hideTooltip);
    };
  }
  function isCapture(target) {
    target.prototype.isCapture = function(currentTarget) {
      return currentTarget && currentTarget.getAttribute("data-iscapture") === "true" || this.props.isCapture || false;
    };
  }
  function getEffect(target) {
    target.prototype.getEffect = function(currentTarget) {
      var dataEffect = currentTarget.getAttribute("data-effect");
      return dataEffect || this.props.effect || "float";
    };
  }
  var makeProxy = function makeProxy2(e2) {
    var proxy = {};
    for (var key in e2) {
      if (typeof e2[key] === "function") {
        proxy[key] = e2[key].bind(e2);
      } else {
        proxy[key] = e2[key];
      }
    }
    return proxy;
  };
  var bodyListener = function bodyListener2(callback, options, e2) {
    var _options$respectEffec = options.respectEffect, respectEffect = _options$respectEffec === void 0 ? false : _options$respectEffec, _options$customEvent = options.customEvent, customEvent2 = _options$customEvent === void 0 ? false : _options$customEvent;
    var id = this.props.id;
    var tip = e2.target.getAttribute("data-tip") || null;
    var forId = e2.target.getAttribute("data-for") || null;
    var target = e2.target;
    if (this.isCustomEvent(target) && !customEvent2) {
      return;
    }
    var isTargetBelongsToTooltip = id == null && forId == null || forId === id;
    if (tip != null && (!respectEffect || this.getEffect(target) === "float") && isTargetBelongsToTooltip) {
      var proxy = makeProxy(e2);
      proxy.currentTarget = target;
      callback(proxy);
    }
  };
  var findCustomEvents = function findCustomEvents2(targetArray, dataAttribute) {
    var events = {};
    targetArray.forEach(function(target) {
      var event = target.getAttribute(dataAttribute);
      if (event)
        event.split(" ").forEach(function(event2) {
          return events[event2] = true;
        });
    });
    return events;
  };
  var getBody = function getBody2() {
    return document.getElementsByTagName("body")[0];
  };
  function bodyMode(target) {
    target.prototype.isBodyMode = function() {
      return !!this.props.bodyMode;
    };
    target.prototype.bindBodyListener = function(targetArray) {
      var _this = this;
      var _this$state = this.state, event = _this$state.event, eventOff = _this$state.eventOff, possibleCustomEvents = _this$state.possibleCustomEvents, possibleCustomEventsOff = _this$state.possibleCustomEventsOff;
      var body = getBody();
      var customEvents = findCustomEvents(targetArray, "data-event");
      var customEventsOff = findCustomEvents(targetArray, "data-event-off");
      if (event != null)
        customEvents[event] = true;
      if (eventOff != null)
        customEventsOff[eventOff] = true;
      possibleCustomEvents.split(" ").forEach(function(event2) {
        return customEvents[event2] = true;
      });
      possibleCustomEventsOff.split(" ").forEach(function(event2) {
        return customEventsOff[event2] = true;
      });
      this.unbindBodyListener(body);
      var listeners = this.bodyModeListeners = {};
      if (event == null) {
        listeners.mouseover = bodyListener.bind(this, this.showTooltip, {});
        listeners.mousemove = bodyListener.bind(this, this.updateTooltip, {
          respectEffect: true
        });
        listeners.mouseout = bodyListener.bind(this, this.hideTooltip, {});
      }
      for (var _event in customEvents) {
        listeners[_event] = bodyListener.bind(this, function(e2) {
          var targetEventOff = e2.currentTarget.getAttribute("data-event-off") || eventOff;
          checkStatus.call(_this, targetEventOff, e2);
        }, {
          customEvent: true
        });
      }
      for (var _event2 in customEventsOff) {
        listeners[_event2] = bodyListener.bind(this, this.hideTooltip, {
          customEvent: true
        });
      }
      for (var _event3 in listeners) {
        body.addEventListener(_event3, listeners[_event3]);
      }
    };
    target.prototype.unbindBodyListener = function(body) {
      body = body || getBody();
      var listeners = this.bodyModeListeners;
      for (var event in listeners) {
        body.removeEventListener(event, listeners[event]);
      }
    };
  }
  var getMutationObserverClass = function getMutationObserverClass2() {
    return window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
  };
  function trackRemoval(target) {
    target.prototype.bindRemovalTracker = function() {
      var _this = this;
      var MutationObserver2 = getMutationObserverClass();
      if (MutationObserver2 == null)
        return;
      var observer = new MutationObserver2(function(mutations) {
        for (var m1 = 0; m1 < mutations.length; m1++) {
          var mutation = mutations[m1];
          for (var m2 = 0; m2 < mutation.removedNodes.length; m2++) {
            var element = mutation.removedNodes[m2];
            if (element === _this.state.currentTarget) {
              _this.hideTooltip();
              return;
            }
          }
        }
      });
      observer.observe(window.document, {
        childList: true,
        subtree: true
      });
      this.removalTracker = observer;
    };
    target.prototype.unbindRemovalTracker = function() {
      if (this.removalTracker) {
        this.removalTracker.disconnect();
        this.removalTracker = null;
      }
    };
  }
  function getPosition(e2, target, node, place, desiredPlace, effect, offset) {
    var _getDimensions = getDimensions(node), tipWidth = _getDimensions.width, tipHeight = _getDimensions.height;
    var _getDimensions2 = getDimensions(target), targetWidth = _getDimensions2.width, targetHeight = _getDimensions2.height;
    var _getCurrentOffset = getCurrentOffset(e2, target, effect), mouseX = _getCurrentOffset.mouseX, mouseY = _getCurrentOffset.mouseY;
    var defaultOffset = getDefaultPosition(effect, targetWidth, targetHeight, tipWidth, tipHeight);
    var _calculateOffset = calculateOffset(offset), extraOffsetX = _calculateOffset.extraOffsetX, extraOffsetY = _calculateOffset.extraOffsetY;
    var windowWidth = window.innerWidth;
    var windowHeight = window.innerHeight;
    var _getParent = getParent(node), parentTop = _getParent.parentTop, parentLeft = _getParent.parentLeft;
    var getTipOffsetLeft = function getTipOffsetLeft2(place2) {
      var offsetX = defaultOffset[place2].l;
      return mouseX + offsetX + extraOffsetX;
    };
    var getTipOffsetRight = function getTipOffsetRight2(place2) {
      var offsetX = defaultOffset[place2].r;
      return mouseX + offsetX + extraOffsetX;
    };
    var getTipOffsetTop = function getTipOffsetTop2(place2) {
      var offsetY = defaultOffset[place2].t;
      return mouseY + offsetY + extraOffsetY;
    };
    var getTipOffsetBottom = function getTipOffsetBottom2(place2) {
      var offsetY = defaultOffset[place2].b;
      return mouseY + offsetY + extraOffsetY;
    };
    var outsideLeft = function outsideLeft2(p3) {
      return getTipOffsetLeft(p3) < 0;
    };
    var outsideRight = function outsideRight2(p3) {
      return getTipOffsetRight(p3) > windowWidth;
    };
    var outsideTop = function outsideTop2(p3) {
      return getTipOffsetTop(p3) < 0;
    };
    var outsideBottom = function outsideBottom2(p3) {
      return getTipOffsetBottom(p3) > windowHeight;
    };
    var outside = function outside2(p3) {
      return outsideLeft(p3) || outsideRight(p3) || outsideTop(p3) || outsideBottom(p3);
    };
    var inside = function inside2(p3) {
      return !outside(p3);
    };
    var placesList = ["top", "bottom", "left", "right"];
    var insideList = [];
    for (var i2 = 0; i2 < 4; i2++) {
      var p2 = placesList[i2];
      if (inside(p2)) {
        insideList.push(p2);
      }
    }
    var isNewState = false;
    var newPlace;
    var shouldUpdatePlace = desiredPlace !== place;
    if (inside(desiredPlace) && shouldUpdatePlace) {
      isNewState = true;
      newPlace = desiredPlace;
    } else if (insideList.length > 0 && outside(desiredPlace) && outside(place)) {
      isNewState = true;
      newPlace = insideList[0];
    }
    if (isNewState) {
      return {
        isNewState: true,
        newState: {
          place: newPlace
        }
      };
    }
    return {
      isNewState: false,
      position: {
        left: parseInt(getTipOffsetLeft(place) - parentLeft, 10),
        top: parseInt(getTipOffsetTop(place) - parentTop, 10)
      }
    };
  }
  var getDimensions = function getDimensions2(node) {
    var _node$getBoundingClie = node.getBoundingClientRect(), height = _node$getBoundingClie.height, width = _node$getBoundingClie.width;
    return {
      height: parseInt(height, 10),
      width: parseInt(width, 10)
    };
  };
  var getCurrentOffset = function getCurrentOffset2(e2, currentTarget, effect) {
    var boundingClientRect = currentTarget.getBoundingClientRect();
    var targetTop = boundingClientRect.top;
    var targetLeft = boundingClientRect.left;
    var _getDimensions3 = getDimensions(currentTarget), targetWidth = _getDimensions3.width, targetHeight = _getDimensions3.height;
    if (effect === "float") {
      return {
        mouseX: e2.clientX,
        mouseY: e2.clientY
      };
    }
    return {
      mouseX: targetLeft + targetWidth / 2,
      mouseY: targetTop + targetHeight / 2
    };
  };
  var getDefaultPosition = function getDefaultPosition2(effect, targetWidth, targetHeight, tipWidth, tipHeight) {
    var top;
    var right;
    var bottom;
    var left;
    var disToMouse = 3;
    var triangleHeight = 2;
    var cursorHeight = 12;
    if (effect === "float") {
      top = {
        l: -(tipWidth / 2),
        r: tipWidth / 2,
        t: -(tipHeight + disToMouse + triangleHeight),
        b: -disToMouse
      };
      bottom = {
        l: -(tipWidth / 2),
        r: tipWidth / 2,
        t: disToMouse + cursorHeight,
        b: tipHeight + disToMouse + triangleHeight + cursorHeight
      };
      left = {
        l: -(tipWidth + disToMouse + triangleHeight),
        r: -disToMouse,
        t: -(tipHeight / 2),
        b: tipHeight / 2
      };
      right = {
        l: disToMouse,
        r: tipWidth + disToMouse + triangleHeight,
        t: -(tipHeight / 2),
        b: tipHeight / 2
      };
    } else if (effect === "solid") {
      top = {
        l: -(tipWidth / 2),
        r: tipWidth / 2,
        t: -(targetHeight / 2 + tipHeight + triangleHeight),
        b: -(targetHeight / 2)
      };
      bottom = {
        l: -(tipWidth / 2),
        r: tipWidth / 2,
        t: targetHeight / 2,
        b: targetHeight / 2 + tipHeight + triangleHeight
      };
      left = {
        l: -(tipWidth + targetWidth / 2 + triangleHeight),
        r: -(targetWidth / 2),
        t: -(tipHeight / 2),
        b: tipHeight / 2
      };
      right = {
        l: targetWidth / 2,
        r: tipWidth + targetWidth / 2 + triangleHeight,
        t: -(tipHeight / 2),
        b: tipHeight / 2
      };
    }
    return {
      top,
      bottom,
      left,
      right
    };
  };
  var calculateOffset = function calculateOffset2(offset) {
    var extraOffsetX = 0;
    var extraOffsetY = 0;
    if (Object.prototype.toString.apply(offset) === "[object String]") {
      offset = JSON.parse(offset.toString().replace(/'/g, '"'));
    }
    for (var key in offset) {
      if (key === "top") {
        extraOffsetY -= parseInt(offset[key], 10);
      } else if (key === "bottom") {
        extraOffsetY += parseInt(offset[key], 10);
      } else if (key === "left") {
        extraOffsetX -= parseInt(offset[key], 10);
      } else if (key === "right") {
        extraOffsetX += parseInt(offset[key], 10);
      }
    }
    return {
      extraOffsetX,
      extraOffsetY
    };
  };
  var getParent = function getParent2(currentTarget) {
    var currentParent = currentTarget;
    while (currentParent) {
      var computedStyle = window.getComputedStyle(currentParent);
      if (computedStyle.getPropertyValue("transform") !== "none" || computedStyle.getPropertyValue("will-change") === "transform")
        break;
      currentParent = currentParent.parentElement;
    }
    var parentTop = currentParent && currentParent.getBoundingClientRect().top || 0;
    var parentLeft = currentParent && currentParent.getBoundingClientRect().left || 0;
    return {
      parentTop,
      parentLeft
    };
  };
  function getTipContent(tip, children, getContent, multiline) {
    if (children)
      return children;
    if (getContent !== void 0 && getContent !== null)
      return getContent;
    if (getContent === null)
      return null;
    var regexp = /<br\s*\/?>/;
    if (!multiline || multiline === "false" || !regexp.test(tip)) {
      return tip;
    }
    return tip.split(regexp).map(function(d2, i2) {
      return import_react15.default.createElement("span", {
        key: i2,
        className: "multi-line"
      }, d2);
    });
  }
  function parseAria(props) {
    var ariaObj = {};
    Object.keys(props).filter(function(prop) {
      return /(^aria-\w+$|^role$)/.test(prop);
    }).forEach(function(prop) {
      ariaObj[prop] = props[prop];
    });
    return ariaObj;
  }
  function nodeListToArray(nodeList) {
    var length = nodeList.length;
    if (nodeList.hasOwnProperty) {
      return Array.prototype.slice.call(nodeList);
    }
    return new Array(length).fill().map(function(index2) {
      return nodeList[index2];
    });
  }
  function generateUUID() {
    return "t" + v4_default();
  }
  var baseCss = '.__react_component_tooltip {\n  border-radius: 3px;\n  display: inline-block;\n  font-size: 13px;\n  left: -999em;\n  opacity: 0;\n  padding: 8px 21px;\n  position: fixed;\n  pointer-events: none;\n  transition: opacity 0.3s ease-out;\n  top: -999em;\n  visibility: hidden;\n  z-index: 999;\n}\n.__react_component_tooltip.allow_hover, .__react_component_tooltip.allow_click {\n  pointer-events: auto;\n}\n.__react_component_tooltip::before, .__react_component_tooltip::after {\n  content: "";\n  width: 0;\n  height: 0;\n  position: absolute;\n}\n.__react_component_tooltip.show {\n  opacity: 0.9;\n  margin-top: 0;\n  margin-left: 0;\n  visibility: visible;\n}\n.__react_component_tooltip.place-top::before {\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  bottom: -8px;\n  left: 50%;\n  margin-left: -10px;\n}\n.__react_component_tooltip.place-bottom::before {\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  top: -8px;\n  left: 50%;\n  margin-left: -10px;\n}\n.__react_component_tooltip.place-left::before {\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  right: -8px;\n  top: 50%;\n  margin-top: -5px;\n}\n.__react_component_tooltip.place-right::before {\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  left: -8px;\n  top: 50%;\n  margin-top: -5px;\n}\n.__react_component_tooltip .multi-line {\n  display: block;\n  padding: 2px 0;\n  text-align: center;\n}';
  var defaultColors = {
    dark: {
      text: "#fff",
      background: "#222",
      border: "transparent",
      arrow: "#222"
    },
    success: {
      text: "#fff",
      background: "#8DC572",
      border: "transparent",
      arrow: "#8DC572"
    },
    warning: {
      text: "#fff",
      background: "#F0AD4E",
      border: "transparent",
      arrow: "#F0AD4E"
    },
    error: {
      text: "#fff",
      background: "#BE6464",
      border: "transparent",
      arrow: "#BE6464"
    },
    info: {
      text: "#fff",
      background: "#337AB7",
      border: "transparent",
      arrow: "#337AB7"
    },
    light: {
      text: "#222",
      background: "#fff",
      border: "transparent",
      arrow: "#fff"
    }
  };
  function getDefaultPopupColors(type) {
    return defaultColors[type] ? _objectSpread22({}, defaultColors[type]) : void 0;
  }
  function generateTooltipStyle(uuid, customColors, type, hasBorder) {
    return generateStyle(uuid, getPopupColors(customColors, type, hasBorder));
  }
  function generateStyle(uuid, colors) {
    var textColor = colors.text;
    var backgroundColor = colors.background;
    var borderColor = colors.border;
    var arrowColor = colors.arrow;
    return "\n  	.".concat(uuid, " {\n	    color: ").concat(textColor, ";\n	    background: ").concat(backgroundColor, ";\n	    border: 1px solid ").concat(borderColor, ";\n  	}\n\n  	.").concat(uuid, ".place-top {\n        margin-top: -10px;\n    }\n    .").concat(uuid, ".place-top::before {\n        border-top: 8px solid ").concat(borderColor, ";\n    }\n    .").concat(uuid, ".place-top::after {\n        border-left: 8px solid transparent;\n        border-right: 8px solid transparent;\n        bottom: -6px;\n        left: 50%;\n        margin-left: -8px;\n        border-top-color: ").concat(arrowColor, ";\n        border-top-style: solid;\n        border-top-width: 6px;\n    }\n\n    .").concat(uuid, ".place-bottom {\n        margin-top: 10px;\n    }\n    .").concat(uuid, ".place-bottom::before {\n        border-bottom: 8px solid ").concat(borderColor, ";\n    }\n    .").concat(uuid, ".place-bottom::after {\n        border-left: 8px solid transparent;\n        border-right: 8px solid transparent;\n        top: -6px;\n        left: 50%;\n        margin-left: -8px;\n        border-bottom-color: ").concat(arrowColor, ";\n        border-bottom-style: solid;\n        border-bottom-width: 6px;\n    }\n\n    .").concat(uuid, ".place-left {\n        margin-left: -10px;\n    }\n    .").concat(uuid, ".place-left::before {\n        border-left: 8px solid ").concat(borderColor, ";\n    }\n    .").concat(uuid, ".place-left::after {\n        border-top: 5px solid transparent;\n        border-bottom: 5px solid transparent;\n        right: -6px;\n        top: 50%;\n        margin-top: -4px;\n        border-left-color: ").concat(arrowColor, ";\n        border-left-style: solid;\n        border-left-width: 6px;\n    }\n\n    .").concat(uuid, ".place-right {\n        margin-left: 10px;\n    }\n    .").concat(uuid, ".place-right::before {\n        border-right: 8px solid ").concat(borderColor, ";\n    }\n    .").concat(uuid, ".place-right::after {\n        border-top: 5px solid transparent;\n        border-bottom: 5px solid transparent;\n        left: -6px;\n        top: 50%;\n        margin-top: -4px;\n        border-right-color: ").concat(arrowColor, ";\n        border-right-style: solid;\n        border-right-width: 6px;\n    }\n  ");
  }
  function getPopupColors(customColors, type, hasBorder) {
    var textColor = customColors.text;
    var backgroundColor = customColors.background;
    var borderColor = customColors.border;
    var arrowColor = customColors.arrow ? customColors.arrow : customColors.background;
    var colors = getDefaultPopupColors(type);
    if (textColor) {
      colors.text = textColor;
    }
    if (backgroundColor) {
      colors.background = backgroundColor;
    }
    if (hasBorder) {
      if (borderColor) {
        colors.border = borderColor;
      } else {
        colors.border = type === "light" ? "black" : "white";
      }
    }
    if (arrowColor) {
      colors.arrow = arrowColor;
    }
    return colors;
  }
  var _class;
  var _class2;
  var _temp;
  var ReactTooltip = staticMethods(_class = windowListener(_class = customEvent(_class = isCapture(_class = getEffect(_class = bodyMode(_class = trackRemoval(_class = (_temp = _class2 = /* @__PURE__ */ function(_React$Component) {
    _inherits(ReactTooltip2, _React$Component);
    _createClass2(ReactTooltip2, null, [{
      key: "propTypes",
      get: function get2() {
        return {
          uuid: import_prop_types2.default.string,
          children: import_prop_types2.default.any,
          place: import_prop_types2.default.string,
          type: import_prop_types2.default.string,
          effect: import_prop_types2.default.string,
          offset: import_prop_types2.default.object,
          multiline: import_prop_types2.default.bool,
          border: import_prop_types2.default.bool,
          textColor: import_prop_types2.default.string,
          backgroundColor: import_prop_types2.default.string,
          borderColor: import_prop_types2.default.string,
          arrowColor: import_prop_types2.default.string,
          insecure: import_prop_types2.default.bool,
          "class": import_prop_types2.default.string,
          className: import_prop_types2.default.string,
          id: import_prop_types2.default.string,
          html: import_prop_types2.default.bool,
          delayHide: import_prop_types2.default.number,
          delayUpdate: import_prop_types2.default.number,
          delayShow: import_prop_types2.default.number,
          event: import_prop_types2.default.string,
          eventOff: import_prop_types2.default.string,
          isCapture: import_prop_types2.default.bool,
          globalEventOff: import_prop_types2.default.string,
          getContent: import_prop_types2.default.any,
          afterShow: import_prop_types2.default.func,
          afterHide: import_prop_types2.default.func,
          overridePosition: import_prop_types2.default.func,
          disable: import_prop_types2.default.bool,
          scrollHide: import_prop_types2.default.bool,
          resizeHide: import_prop_types2.default.bool,
          wrapper: import_prop_types2.default.string,
          bodyMode: import_prop_types2.default.bool,
          possibleCustomEvents: import_prop_types2.default.string,
          possibleCustomEventsOff: import_prop_types2.default.string,
          clickable: import_prop_types2.default.bool
        };
      }
    }]);
    function ReactTooltip2(props) {
      var _this;
      _classCallCheck2(this, ReactTooltip2);
      _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactTooltip2).call(this, props));
      _this.state = {
        uuid: props.uuid || generateUUID(),
        place: props.place || "top",
        // Direction of tooltip
        desiredPlace: props.place || "top",
        type: "dark",
        // Color theme of tooltip
        effect: "float",
        // float or fixed
        show: false,
        border: false,
        customColors: {},
        offset: {},
        extraClass: "",
        html: false,
        delayHide: 0,
        delayShow: 0,
        event: props.event || null,
        eventOff: props.eventOff || null,
        currentEvent: null,
        // Current mouse event
        currentTarget: null,
        // Current target of mouse event
        ariaProps: parseAria(props),
        // aria- and role attributes
        isEmptyTip: false,
        disable: false,
        possibleCustomEvents: props.possibleCustomEvents || "",
        possibleCustomEventsOff: props.possibleCustomEventsOff || "",
        originTooltip: null,
        isMultiline: false
      };
      _this.bind(["showTooltip", "updateTooltip", "hideTooltip", "hideTooltipOnScroll", "getTooltipContent", "globalRebuild", "globalShow", "globalHide", "onWindowResize", "mouseOnToolTip"]);
      _this.mount = true;
      _this.delayShowLoop = null;
      _this.delayHideLoop = null;
      _this.delayReshow = null;
      _this.intervalUpdateContent = null;
      return _this;
    }
    _createClass2(ReactTooltip2, [{
      key: "bind",
      value: function bind(methodArray) {
        var _this2 = this;
        methodArray.forEach(function(method2) {
          _this2[method2] = _this2[method2].bind(_this2);
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props, insecure = _this$props.insecure, resizeHide = _this$props.resizeHide;
        this.bindListener();
        this.bindWindowEvents(resizeHide);
        this.injectStyles();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mount = false;
        this.clearTimer();
        this.unbindListener();
        this.removeScrollListener(this.state.currentTarget);
        this.unbindWindowEvents();
      }
      /* Look for the closest DOM root having tooltip and inject styles. */
    }, {
      key: "injectStyles",
      value: function injectStyles() {
        var tooltipRef = this.tooltipRef;
        if (!tooltipRef) {
          return;
        }
        var parentNode = tooltipRef.parentNode;
        while (parentNode.parentNode) {
          parentNode = parentNode.parentNode;
        }
        var domRoot;
        switch (parentNode.constructor.name) {
          case "Document":
          case "HTMLDocument":
            domRoot = parentNode.head;
            break;
          case "ShadowRoot":
          default:
            domRoot = parentNode;
            break;
        }
        if (!domRoot.querySelector("style[data-react-tooltip]")) {
          var style = document.createElement("style");
          style.textContent = baseCss;
          style.setAttribute("data-react-tooltip", "true");
          domRoot.appendChild(style);
        }
      }
      /**
       * Return if the mouse is on the tooltip.
       * @returns {boolean} true - mouse is on the tooltip
       */
    }, {
      key: "mouseOnToolTip",
      value: function mouseOnToolTip() {
        var show = this.state.show;
        if (show && this.tooltipRef) {
          if (!this.tooltipRef.matches) {
            if (this.tooltipRef.msMatchesSelector) {
              this.tooltipRef.matches = this.tooltipRef.msMatchesSelector;
            } else {
              this.tooltipRef.matches = this.tooltipRef.mozMatchesSelector;
            }
          }
          return this.tooltipRef.matches(":hover");
        }
        return false;
      }
      /**
       * Pick out corresponded target elements
       */
    }, {
      key: "getTargetArray",
      value: function getTargetArray(id) {
        var targetArray = [];
        var selector;
        if (!id) {
          selector = "[data-tip]:not([data-for])";
        } else {
          var escaped = id.replace(/\\/g, "\\\\").replace(/"/g, '\\"');
          selector = '[data-tip][data-for="'.concat(escaped, '"]');
        }
        nodeListToArray(document.getElementsByTagName("*")).filter(function(element) {
          return element.shadowRoot;
        }).forEach(function(element) {
          targetArray = targetArray.concat(nodeListToArray(element.shadowRoot.querySelectorAll(selector)));
        });
        return targetArray.concat(nodeListToArray(document.querySelectorAll(selector)));
      }
      /**
       * Bind listener to the target elements
       * These listeners used to trigger showing or hiding the tooltip
       */
    }, {
      key: "bindListener",
      value: function bindListener() {
        var _this3 = this;
        var _this$props2 = this.props, id = _this$props2.id, globalEventOff = _this$props2.globalEventOff, isCapture2 = _this$props2.isCapture;
        var targetArray = this.getTargetArray(id);
        targetArray.forEach(function(target) {
          if (target.getAttribute("currentItem") === null) {
            target.setAttribute("currentItem", "false");
          }
          _this3.unbindBasicListener(target);
          if (_this3.isCustomEvent(target)) {
            _this3.customUnbindListener(target);
          }
        });
        if (this.isBodyMode()) {
          this.bindBodyListener(targetArray);
        } else {
          targetArray.forEach(function(target) {
            var isCaptureMode = _this3.isCapture(target);
            var effect = _this3.getEffect(target);
            if (_this3.isCustomEvent(target)) {
              _this3.customBindListener(target);
              return;
            }
            target.addEventListener("mouseenter", _this3.showTooltip, isCaptureMode);
            target.addEventListener("focus", _this3.showTooltip, isCaptureMode);
            if (effect === "float") {
              target.addEventListener("mousemove", _this3.updateTooltip, isCaptureMode);
            }
            target.addEventListener("mouseleave", _this3.hideTooltip, isCaptureMode);
            target.addEventListener("blur", _this3.showTooltip, isCaptureMode);
          });
        }
        if (globalEventOff) {
          window.removeEventListener(globalEventOff, this.hideTooltip);
          window.addEventListener(globalEventOff, this.hideTooltip, isCapture2);
        }
        this.bindRemovalTracker();
      }
      /**
       * Unbind listeners on target elements
       */
    }, {
      key: "unbindListener",
      value: function unbindListener() {
        var _this4 = this;
        var _this$props3 = this.props, id = _this$props3.id, globalEventOff = _this$props3.globalEventOff;
        if (this.isBodyMode()) {
          this.unbindBodyListener();
        } else {
          var targetArray = this.getTargetArray(id);
          targetArray.forEach(function(target) {
            _this4.unbindBasicListener(target);
            if (_this4.isCustomEvent(target))
              _this4.customUnbindListener(target);
          });
        }
        if (globalEventOff)
          window.removeEventListener(globalEventOff, this.hideTooltip);
        this.unbindRemovalTracker();
      }
      /**
       * Invoke this before bind listener and unmount the component
       * it is necessary to invoke this even when binding custom event
       * so that the tooltip can switch between custom and default listener
       */
    }, {
      key: "unbindBasicListener",
      value: function unbindBasicListener(target) {
        var isCaptureMode = this.isCapture(target);
        target.removeEventListener("mouseenter", this.showTooltip, isCaptureMode);
        target.removeEventListener("mousemove", this.updateTooltip, isCaptureMode);
        target.removeEventListener("mouseleave", this.hideTooltip, isCaptureMode);
      }
    }, {
      key: "getTooltipContent",
      value: function getTooltipContent() {
        var _this$props4 = this.props, getContent = _this$props4.getContent, children = _this$props4.children;
        var content;
        if (getContent) {
          if (Array.isArray(getContent)) {
            content = getContent[0] && getContent[0](this.state.originTooltip);
          } else {
            content = getContent(this.state.originTooltip);
          }
        }
        return getTipContent(this.state.originTooltip, children, content, this.state.isMultiline);
      }
    }, {
      key: "isEmptyTip",
      value: function isEmptyTip(placeholder) {
        return typeof placeholder === "string" && placeholder === "" || placeholder === null;
      }
      /**
       * When mouse enter, show the tooltip
       */
    }, {
      key: "showTooltip",
      value: function showTooltip(e2, isGlobalCall) {
        if (!this.tooltipRef) {
          return;
        }
        if (isGlobalCall) {
          var targetArray = this.getTargetArray(this.props.id);
          var isMyElement = targetArray.some(function(ele) {
            return ele === e2.currentTarget;
          });
          if (!isMyElement)
            return;
        }
        var _this$props5 = this.props, multiline = _this$props5.multiline, getContent = _this$props5.getContent;
        var originTooltip = e2.currentTarget.getAttribute("data-tip");
        var isMultiline = e2.currentTarget.getAttribute("data-multiline") || multiline || false;
        var switchToSolid = e2 instanceof window.FocusEvent || isGlobalCall;
        var scrollHide = true;
        if (e2.currentTarget.getAttribute("data-scroll-hide")) {
          scrollHide = e2.currentTarget.getAttribute("data-scroll-hide") === "true";
        } else if (this.props.scrollHide != null) {
          scrollHide = this.props.scrollHide;
        }
        if (e2 && e2.currentTarget && e2.currentTarget.setAttribute) {
          e2.currentTarget.setAttribute("aria-describedby", this.state.uuid);
        }
        var desiredPlace = e2.currentTarget.getAttribute("data-place") || this.props.place || "top";
        var effect = switchToSolid && "solid" || this.getEffect(e2.currentTarget);
        var offset = e2.currentTarget.getAttribute("data-offset") || this.props.offset || {};
        var result = getPosition(e2, e2.currentTarget, this.tooltipRef, desiredPlace, desiredPlace, effect, offset);
        if (result.position && this.props.overridePosition) {
          result.position = this.props.overridePosition(result.position, e2, e2.currentTarget, this.tooltipRef, desiredPlace, desiredPlace, effect, offset);
        }
        var place = result.isNewState ? result.newState.place : desiredPlace;
        this.clearTimer();
        var target = e2.currentTarget;
        var reshowDelay = this.state.show ? target.getAttribute("data-delay-update") || this.props.delayUpdate : 0;
        var self2 = this;
        var updateState = function updateState2() {
          self2.setState({
            originTooltip,
            isMultiline,
            desiredPlace,
            place,
            type: target.getAttribute("data-type") || self2.props.type || "dark",
            customColors: {
              text: target.getAttribute("data-text-color") || self2.props.textColor || null,
              background: target.getAttribute("data-background-color") || self2.props.backgroundColor || null,
              border: target.getAttribute("data-border-color") || self2.props.borderColor || null,
              arrow: target.getAttribute("data-arrow-color") || self2.props.arrowColor || null
            },
            effect,
            offset,
            html: (target.getAttribute("data-html") ? target.getAttribute("data-html") === "true" : self2.props.html) || false,
            delayShow: target.getAttribute("data-delay-show") || self2.props.delayShow || 0,
            delayHide: target.getAttribute("data-delay-hide") || self2.props.delayHide || 0,
            delayUpdate: target.getAttribute("data-delay-update") || self2.props.delayUpdate || 0,
            border: (target.getAttribute("data-border") ? target.getAttribute("data-border") === "true" : self2.props.border) || false,
            extraClass: target.getAttribute("data-class") || self2.props["class"] || self2.props.className || "",
            disable: (target.getAttribute("data-tip-disable") ? target.getAttribute("data-tip-disable") === "true" : self2.props.disable) || false,
            currentTarget: target
          }, function() {
            if (scrollHide) {
              self2.addScrollListener(self2.state.currentTarget);
            }
            self2.updateTooltip(e2);
            if (getContent && Array.isArray(getContent)) {
              self2.intervalUpdateContent = setInterval(function() {
                if (self2.mount) {
                  var _getContent = self2.props.getContent;
                  var placeholder = getTipContent(originTooltip, "", _getContent[0](), isMultiline);
                  var isEmptyTip = self2.isEmptyTip(placeholder);
                  self2.setState({
                    isEmptyTip
                  });
                  self2.updatePosition();
                }
              }, getContent[1]);
            }
          });
        };
        if (reshowDelay) {
          this.delayReshow = setTimeout(updateState, reshowDelay);
        } else {
          updateState();
        }
      }
      /**
       * When mouse hover, update tool tip
       */
    }, {
      key: "updateTooltip",
      value: function updateTooltip(e2) {
        var _this5 = this;
        var _this$state = this.state, delayShow = _this$state.delayShow, disable = _this$state.disable;
        var afterShow = this.props.afterShow;
        var placeholder = this.getTooltipContent();
        var eventTarget = e2.currentTarget || e2.target;
        if (this.mouseOnToolTip()) {
          return;
        }
        if (this.isEmptyTip(placeholder) || disable) {
          return;
        }
        var delayTime = !this.state.show ? parseInt(delayShow, 10) : 0;
        var updateState = function updateState2() {
          if (Array.isArray(placeholder) && placeholder.length > 0 || placeholder) {
            var isInvisible = !_this5.state.show;
            _this5.setState({
              currentEvent: e2,
              currentTarget: eventTarget,
              show: true
            }, function() {
              _this5.updatePosition();
              if (isInvisible && afterShow) {
                afterShow(e2);
              }
            });
          }
        };
        clearTimeout(this.delayShowLoop);
        if (delayTime) {
          this.delayShowLoop = setTimeout(updateState, delayTime);
        } else {
          updateState();
        }
      }
      /*
       * If we're mousing over the tooltip remove it when we leave.
       */
    }, {
      key: "listenForTooltipExit",
      value: function listenForTooltipExit() {
        var show = this.state.show;
        if (show && this.tooltipRef) {
          this.tooltipRef.addEventListener("mouseleave", this.hideTooltip);
        }
      }
    }, {
      key: "removeListenerForTooltipExit",
      value: function removeListenerForTooltipExit() {
        var show = this.state.show;
        if (show && this.tooltipRef) {
          this.tooltipRef.removeEventListener("mouseleave", this.hideTooltip);
        }
      }
      /**
       * When mouse leave, hide tooltip
       */
    }, {
      key: "hideTooltip",
      value: function hideTooltip(e2, hasTarget) {
        var _this6 = this;
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
          isScroll: false
        };
        var disable = this.state.disable;
        var isScroll = options.isScroll;
        var delayHide = isScroll ? 0 : this.state.delayHide;
        var afterHide = this.props.afterHide;
        var placeholder = this.getTooltipContent();
        if (!this.mount)
          return;
        if (this.isEmptyTip(placeholder) || disable)
          return;
        if (hasTarget) {
          var targetArray = this.getTargetArray(this.props.id);
          var isMyElement = targetArray.some(function(ele) {
            return ele === e2.currentTarget;
          });
          if (!isMyElement || !this.state.show)
            return;
        }
        if (e2 && e2.currentTarget && e2.currentTarget.removeAttribute) {
          e2.currentTarget.removeAttribute("aria-describedby");
        }
        var resetState = function resetState2() {
          var isVisible = _this6.state.show;
          if (_this6.mouseOnToolTip()) {
            _this6.listenForTooltipExit();
            return;
          }
          _this6.removeListenerForTooltipExit();
          _this6.setState({
            show: false
          }, function() {
            _this6.removeScrollListener(_this6.state.currentTarget);
            if (isVisible && afterHide) {
              afterHide(e2);
            }
          });
        };
        this.clearTimer();
        if (delayHide) {
          this.delayHideLoop = setTimeout(resetState, parseInt(delayHide, 10));
        } else {
          resetState();
        }
      }
      /**
       * When scroll, hide tooltip
       */
    }, {
      key: "hideTooltipOnScroll",
      value: function hideTooltipOnScroll(event, hasTarget) {
        this.hideTooltip(event, hasTarget, {
          isScroll: true
        });
      }
      /**
       * Add scroll event listener when tooltip show
       * automatically hide the tooltip when scrolling
       */
    }, {
      key: "addScrollListener",
      value: function addScrollListener(currentTarget) {
        var isCaptureMode = this.isCapture(currentTarget);
        window.addEventListener("scroll", this.hideTooltipOnScroll, isCaptureMode);
      }
    }, {
      key: "removeScrollListener",
      value: function removeScrollListener(currentTarget) {
        var isCaptureMode = this.isCapture(currentTarget);
        window.removeEventListener("scroll", this.hideTooltipOnScroll, isCaptureMode);
      }
      // Calculation the position
    }, {
      key: "updatePosition",
      value: function updatePosition() {
        var _this7 = this;
        var _this$state2 = this.state, currentEvent = _this$state2.currentEvent, currentTarget = _this$state2.currentTarget, place = _this$state2.place, desiredPlace = _this$state2.desiredPlace, effect = _this$state2.effect, offset = _this$state2.offset;
        var node = this.tooltipRef;
        var result = getPosition(currentEvent, currentTarget, node, place, desiredPlace, effect, offset);
        if (result.position && this.props.overridePosition) {
          result.position = this.props.overridePosition(result.position, currentEvent, currentTarget, node, place, desiredPlace, effect, offset);
        }
        if (result.isNewState) {
          return this.setState(result.newState, function() {
            _this7.updatePosition();
          });
        }
        node.style.left = result.position.left + "px";
        node.style.top = result.position.top + "px";
      }
      /**
       * CLear all kinds of timeout of interval
       */
    }, {
      key: "clearTimer",
      value: function clearTimer() {
        clearTimeout(this.delayShowLoop);
        clearTimeout(this.delayHideLoop);
        clearTimeout(this.delayReshow);
        clearInterval(this.intervalUpdateContent);
      }
    }, {
      key: "hasCustomColors",
      value: function hasCustomColors() {
        var _this8 = this;
        return Boolean(Object.keys(this.state.customColors).find(function(color) {
          return color !== "border" && _this8.state.customColors[color];
        }) || this.state.border && this.state.customColors["border"]);
      }
    }, {
      key: "render",
      value: function render() {
        var _this9 = this;
        var _this$state3 = this.state, extraClass = _this$state3.extraClass, html = _this$state3.html, ariaProps = _this$state3.ariaProps, disable = _this$state3.disable, uuid = _this$state3.uuid;
        var content = this.getTooltipContent();
        var isEmptyTip = this.isEmptyTip(content);
        var style = generateTooltipStyle(this.state.uuid, this.state.customColors, this.state.type, this.state.border);
        var tooltipClass = "__react_component_tooltip" + " ".concat(this.state.uuid) + (this.state.show && !disable && !isEmptyTip ? " show" : "") + (this.state.border ? " border" : "") + " place-".concat(this.state.place) + // top, bottom, left, right
        " type-".concat(this.hasCustomColors() ? "custom" : this.state.type) + // dark, success, warning, error, info, light, custom
        (this.props.delayUpdate ? " allow_hover" : "") + (this.props.clickable ? " allow_click" : "");
        var Wrapper = this.props.wrapper;
        if (ReactTooltip2.supportedWrappers.indexOf(Wrapper) < 0) {
          Wrapper = ReactTooltip2.defaultProps.wrapper;
        }
        var wrapperClassName = [tooltipClass, extraClass].filter(Boolean).join(" ");
        if (html) {
          var htmlContent = "".concat(content, "\n<style>").concat(style, "</style>");
          return import_react15.default.createElement(Wrapper, _extends({
            className: "".concat(wrapperClassName),
            id: this.props.id || uuid,
            ref: function ref(_ref2) {
              return _this9.tooltipRef = _ref2;
            }
          }, ariaProps, {
            "data-id": "tooltip",
            dangerouslySetInnerHTML: {
              __html: htmlContent
            }
          }));
        } else {
          return import_react15.default.createElement(Wrapper, _extends({
            className: "".concat(wrapperClassName),
            id: this.props.id || uuid
          }, ariaProps, {
            ref: function ref(_ref2) {
              return _this9.tooltipRef = _ref2;
            },
            "data-id": "tooltip"
          }), import_react15.default.createElement("style", {
            dangerouslySetInnerHTML: {
              __html: style
            }
          }), content);
        }
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var ariaProps = prevState.ariaProps;
        var newAriaProps = parseAria(nextProps);
        var isChanged = Object.keys(newAriaProps).some(function(props) {
          return newAriaProps[props] !== ariaProps[props];
        });
        if (!isChanged) {
          return null;
        }
        return _objectSpread22({}, prevState, {
          ariaProps: newAriaProps
        });
      }
    }]);
    return ReactTooltip2;
  }(import_react15.default.Component), _defineProperty3(_class2, "defaultProps", {
    insecure: true,
    resizeHide: true,
    wrapper: "div",
    clickable: false
  }), _defineProperty3(_class2, "supportedWrappers", ["div", "span"]), _defineProperty3(_class2, "displayName", "ReactTooltip"), _temp)) || _class) || _class) || _class) || _class) || _class) || _class) || _class;
  var index_es_default = ReactTooltip;

  // src/client/Components/CustomTab/ScheduleBuilder.tsx
  var DayButton = styled_components_browser_esm_default.button`
    user-select: none;
    background-color: rgb(42, 42, 42);
    color: white;
    font-size: 20px;
    padding: 2px;
    margin: 2px;
    border-radius: 4px;
    border: none;
    outline: none;
    transition: background-color 0.25s, color 0.25s;
    :hover {
        background-color: rgb(52, 52, 52);
    }
    :disabled {
        color: rgb(128, 128, 128);
        background-color: rgb(16, 16, 16);
    }
`;
  var InlineBlock = styled_components_browser_esm_default.div`
    display: inline-block;
`;
  var Flex = styled_components_browser_esm_default.div`
    display: flex;
`;
  var FlexColumn = styled_components_browser_esm_default.div`
    display: flex;
    flex-direction: column;
`;
  var DateInput = styled_components_browser_esm_default.input`
    user-select: none;
    background-color: rgb(42, 42, 42);
    color: white;
    font-size: 20px;
    padding: 2px;
    margin: 2px;
    border-radius: 4px;
    border: none;
    outline: none;
    transition: background-color 0.25s, color 0.25s;

    :hover {
        background-color: rgb(52, 52, 52);
    }

    :disabled {
        color: rgb(128, 128, 128);
        background-color: rgb(16, 16, 16);
    }
`;
  var Space = styled_components_browser_esm_default.div`
    width: 20px;
    display: inline-block;
`;
  var Inline = styled_components_browser_esm_default.div`
    display: inline-block;
`;
  var Margin = styled_components_browser_esm_default.div`
    margin: 2px;
`;
  var CustomDate = styled_components_browser_esm_default.div`
    position: absolute;
`;
  var ScheduleBuilder = class extends import_react16.default.Component {
    constructor(props) {
      super(props);
      this.canvasRef = import_react16.default.createRef();
      this.canvasHeight = 50;
      this.canvasWidth = 50;
      this.last = Date.now();
      this.time = 0;
      this.onSaveStateChange = (saved) => {
        this.setState({ saved });
      };
      this.onSave = async () => {
        const description = this.props.als.scheduleService.getFullSchedule();
        this.s.setDescription(description);
        try {
          await this.s.sendSchedule();
        } catch (error) {
          Logger.debug("Schedule Builder", error);
        }
      };
      this.onScheduleUpdate = () => {
        const s2 = this.props.als.scheduleService.getFullSchedule();
        this.scheduler.loadSchedule(s2);
      };
      this.draw = () => {
        const nowMs = Date.now();
        const ms = nowMs - this.last;
        this.last = nowMs;
        this.time += ms;
        if (this.time > SECOND && this.state.customDate) {
          const then2 = this.state.customDate;
          then2.setSeconds((/* @__PURE__ */ new Date()).getSeconds());
          const time = then2.getTime() + this.time;
          const clone = new Date(time);
          this.setState({ time: clone.toLocaleString(), customDate: clone });
          this.time = 0;
        }
        const { width, height } = this.canvas.getBoundingClientRect();
        const { r: r2, g: g2, b: b2 } = this.scheduler.state;
        this.ctx.fillStyle = rgb2hex(r2, g2, b2);
        this.ctx.fillRect(0, 0, width, height);
        this.frame = requestAnimationFrame(this.draw);
      };
      this.onAddCustomDate = () => {
        this.setState({ addNewCustom: /* @__PURE__ */ new Date() });
      };
      this.onDescriptionChange = (dayDescription) => {
        const description = this.s.getFullSchedule();
        const selected = this.state.selected;
        const custom = this.state.customSelected;
        if (selected === "Custom") {
          description.custom[custom] = dayDescription;
        } else {
          description[selected] = dayDescription;
        }
        this.s.setDescription(description);
        this.forceUpdate();
      };
      this.state = {
        selected: "Monday",
        customSelected: "",
        saved: true
      };
    }
    async componentDidMount() {
      try {
        await this.s.fetchSchedule();
      } catch (error) {
        Logger.debug("ScheduleBuilder", error);
      }
      const description = this.s.getFullSchedule();
      this.scheduler = new Scheduler(description);
      this.s.on("update", this.onScheduleUpdate);
      this.s.on("on-save-change", this.onSaveStateChange);
      this.ctx = this.canvas.getContext("2d");
      this.frame = requestAnimationFrame(this.draw);
      this.setState({ saved: this.s.updated });
      Logger.debug("Schedule builder", description);
    }
    componentWillUnmount() {
      cancelAnimationFrame(this.frame);
      this.s.off("update", this.onScheduleUpdate);
      this.s.off("on-save-change", this.onSaveStateChange);
      if (this.scheduler) {
        this.scheduler.destroy();
      }
    }
    get canvas() {
      return this.canvasRef.current;
    }
    get days() {
      const description = this.props.als.scheduleService.getFullSchedule();
      if (!description) {
        return /* @__PURE__ */ import_react16.default.createElement("span", null, "Loading....");
      }
      const onSelect = (selected) => {
        this.setState({ selected });
      };
      return /* @__PURE__ */ import_react16.default.createElement("div", null, DAY_NAMES.map((m, i2) => {
        return /* @__PURE__ */ import_react16.default.createElement(DayButton, { key: i2, onClick: () => onSelect(m), disabled: this.state.selected === m }, m);
      }), /* @__PURE__ */ import_react16.default.createElement(DayButton, { onClick: () => onSelect("Custom"), disabled: this.state.selected === "Custom" }, "Custom"));
    }
    get daySchedule() {
      const description = this.s.getFullSchedule();
      const selected = this.state.selected;
      const custom = this.state.customSelected;
      if (selected === "Custom") {
        return description.custom[custom];
      }
      return description[selected];
    }
    toDateString(date) {
      const year = date.getFullYear();
      const month = `${date.getMonth() + 1}`.padStart(2, "0");
      const day = `${date.getDate()}`.padStart(2, "0");
      return `${year}-${month}-${day}`;
    }
    renderNewCustomDatePicker() {
      if (!this.state.addNewCustom) {
        return /* @__PURE__ */ import_react16.default.createElement(DayButton, { onClick: this.onAddCustomDate }, "Add date");
      }
      return /* @__PURE__ */ import_react16.default.createElement(import_react16.default.Fragment, null, /* @__PURE__ */ import_react16.default.createElement(
        DateInput,
        {
          type: "date",
          value: this.state.addNewCustom ? this.toDateString(this.state.addNewCustom) : void 0,
          onChange: (ev) => {
            const value = ev.target.value;
            if (value) {
              console.log(value);
              this.setState({ addNewCustom: new Date(value) });
            } else {
              this.setState({ addNewCustom: void 0 });
            }
          }
        }
      ), /* @__PURE__ */ import_react16.default.createElement(
        Button5,
        {
          onClick: () => {
            const state = { ...this.state };
            const dayString = getDayString(state.addNewCustom);
            const description = this.s.getFullSchedule();
            if (description.custom[dayString]) {
              this.props.als.raiseNotification("This day already exist!");
              return;
            }
            description.custom[dayString] = {};
            this.s.setDescription(description);
            this.setState({ addNewCustom: void 0 });
          }
        },
        "Add date"
      ), /* @__PURE__ */ import_react16.default.createElement(
        Button5,
        {
          onClick: () => {
            this.setState({ addNewCustom: void 0 });
          }
        },
        "Dismiss add"
      ));
    }
    renderDaySchedule() {
      const selected = this.state.selected;
      const custom = this.state.customSelected;
      if (selected === "Custom") {
        const description = this.s.getFullSchedule();
        const times = Object.keys(description.custom);
        times.sort((a2, b2) => new Date(a2) > new Date(b2) ? 1 : -1);
        const dayDescription = custom ? this.daySchedule : null;
        return /* @__PURE__ */ import_react16.default.createElement(import_react16.default.Fragment, null, times.map((t2, i2) => {
          const m = new Date(t2);
          const check = /* @__PURE__ */ new Date();
          check.setDate(check.getDate() - 1);
          const expired = m < check;
          return /* @__PURE__ */ import_react16.default.createElement(Inline, { key: i2 }, /* @__PURE__ */ import_react16.default.createElement(
            DayButton,
            {
              "data-tip": expired ? "This date already happened" : "",
              className: expired ? "warning-button" : "",
              onClick: () => this.setState({ customSelected: t2, addNewCustom: void 0 }),
              disabled: this.state.customSelected === t2
            },
            m.toLocaleDateString()
          ), /* @__PURE__ */ import_react16.default.createElement(index_es_default, { place: "top", type: "info", effect: "solid" }));
        }), /* @__PURE__ */ import_react16.default.createElement(Space, null), this.state.customSelected ? /* @__PURE__ */ import_react16.default.createElement(
          DayButton,
          {
            onClick: () => {
              const description2 = this.s.getFullSchedule();
              delete description2.custom[this.state.customSelected];
              this.s.setDescription(description2);
              this.setState({ customSelected: void 0 });
            }
          },
          "Remove (",
          this.state.customSelected,
          ")"
        ) : null, this.renderNewCustomDatePicker(), dayDescription ? /* @__PURE__ */ import_react16.default.createElement(
          DayScheduleBuilder,
          {
            dayDescription: this.daySchedule,
            als: this.props.als,
            palette: this.props.palette,
            onChange: this.onDescriptionChange
          }
        ) : null);
      }
      return /* @__PURE__ */ import_react16.default.createElement(
        DayScheduleBuilder,
        {
          dayDescription: this.daySchedule,
          als: this.props.als,
          palette: this.props.palette,
          onChange: this.onDescriptionChange
        }
      );
    }
    get s() {
      return this.props.als.scheduleService;
    }
    displayTime() {
      if (this.state.customDate && this.state.time) {
        return /* @__PURE__ */ import_react16.default.createElement(Margin, null, this.state.time);
      }
      return null;
    }
    render() {
      return /* @__PURE__ */ import_react16.default.createElement("div", null, /* @__PURE__ */ import_react16.default.createElement("h1", null, "Schedule builder"), /* @__PURE__ */ import_react16.default.createElement(Flex, null, /* @__PURE__ */ import_react16.default.createElement("canvas", { ref: this.canvasRef, width: this.canvasWidth, height: this.canvasHeight }), /* @__PURE__ */ import_react16.default.createElement(InlineBlock, null, /* @__PURE__ */ import_react16.default.createElement(Flex, null, /* @__PURE__ */ import_react16.default.createElement(FlexColumn, null, this.displayTime(), /* @__PURE__ */ import_react16.default.createElement(
        DateInput,
        {
          type: "datetime-local",
          onChange: (data) => {
            const value = data.nativeEvent.target.value;
            if (value) {
              const date = new Date(value);
              this.setState({ customDate: date });
            } else {
              this.setState({ customDate: void 0 });
            }
          }
        }
      )), /* @__PURE__ */ import_react16.default.createElement(Button5, { className: this.state.saved ? "" : "warning-button", onClick: this.onSave }, "Save"), this.state.saved ? null : "You have unsaved schedule"))), this.days, this.renderDaySchedule());
    }
  };

  // src/client/Components/CustomTab/DoorSensor.tsx
  var import_react17 = __toESM(require_react());
  var Warper2 = styled_components_browser_esm_default.div`
    width: 100%;
`;
  var TableDiv = styled_components_browser_esm_default.div`
    position: relative;
    background-color: green;
    height: 10px;
`;
  var Table = styled_components_browser_esm_default.table`
    width: 100%;
    max-width: 100%;

    th {
        text-align: left;
        width: 50px;
    }

    tr td:last-child {
        width: 1%;
        white-space: nowrap;
        background-color: yellow;
    }
`;
  var daysName = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  var DoorSensor = class extends import_react17.default.Component {
    constructor(props) {
      super(props);
      this.destroyed = false;
      this.refresh = async () => {
        try {
          const buffer = await this.props.als.lightSocket.emitPromiseIfPossible(6 /* DoorLog */);
          const result = JSON.parse(buffer.getUtf8String());
          if (!this.destroyed) {
            this.setState({ doorLog: result });
          }
        } catch (error) {
          this.props.als.raiseError(error);
        }
      };
      this.onClear = async () => {
        const confirmation = confirm("Are you sure you want to clear all door logs?");
        if (confirmation) {
          try {
            await this.props.als.lightSocket.emitPromiseIfPossible(7 /* DoorClear */);
            if (!this.destroyed) {
              this.setState({ doorLog: {} });
            }
          } catch (error) {
            this.props.als.raiseError(error);
          }
        }
      };
      this.state = {
        doorLog: {}
      };
    }
    async componentDidMount() {
      this.refresh();
      this.timeout = setInterval(this.refresh, SECOND * 10);
    }
    componentWillUnmount() {
      this.destroyed = true;
      if (this.timeout) {
        clearInterval(this.timeout);
        this.timeout = void 0;
      }
    }
    renderTable() {
      const doorLog = this.state.doorLog;
      const keys = Object.keys(doorLog);
      if (!keys.length) {
        return /* @__PURE__ */ import_react17.default.createElement("h5", null, "No door logs yet");
      }
      let max = 0;
      keys.sort((a2, b2) => {
        const aDate = new Date(a2);
        const bDate = new Date(b2);
        return aDate < bDate ? 1 : -1;
      });
      for (const key of keys) {
        const number = doorLog[key];
        if (number > max) {
          max = number;
        }
      }
      return /* @__PURE__ */ import_react17.default.createElement(Table, null, /* @__PURE__ */ import_react17.default.createElement("thead", null, /* @__PURE__ */ import_react17.default.createElement("tr", null, /* @__PURE__ */ import_react17.default.createElement("th", null, "Date"), /* @__PURE__ */ import_react17.default.createElement("th", null, "Count"), /* @__PURE__ */ import_react17.default.createElement("th", null, "Representation"))), /* @__PURE__ */ import_react17.default.createElement("tbody", null, keys.map((v2, i2) => {
        const date = new Date(v2);
        const value = doorLog[v2];
        return /* @__PURE__ */ import_react17.default.createElement("tr", { key: i2 }, /* @__PURE__ */ import_react17.default.createElement("th", null, date.toLocaleDateString(), " ", daysName[date.getDay()]), /* @__PURE__ */ import_react17.default.createElement("th", null, value), /* @__PURE__ */ import_react17.default.createElement("th", null, /* @__PURE__ */ import_react17.default.createElement(
          TableDiv,
          {
            style: {
              width: `${doorLog[v2] / max * 100}%`
            }
          }
        )));
      })));
    }
    render() {
      return /* @__PURE__ */ import_react17.default.createElement(Warper2, null, /* @__PURE__ */ import_react17.default.createElement("h1", null, "Door sensor"), /* @__PURE__ */ import_react17.default.createElement(Button5, { onClick: this.refresh }, "Refresh"), /* @__PURE__ */ import_react17.default.createElement(Button5, { onClick: this.onClear }, "Clear"), this.renderTable());
    }
  };

  // src/client/Components/Tabs/AutoPilot.tsx
  var Warper3 = styled_components_browser_esm_default.div`
    overflow: auto;
`;
  var Div8 = styled_components_browser_esm_default.div`
    width: calc(100% - 10px);
    margin: 5px;
    display: flex;
`;
  var DivTab = styled_components_browser_esm_default.div`
    width: calc(100% - 10px);
    margin: 5px;
    display: flex;
    flex-wrap: wrap;
    align-items: stretch;
    justify-content: center;

    button {
        padding: 5px;
        font-size: 20pt;
    }
`;
  var Button7 = styled_components_browser_esm_default.button`
    user-select: none;
    background-color: rgb(42, 42, 42);
    color: white;
    font-size: 20px;
    padding: 2px;
    margin: 2px;
    border: none;
    outline: none;
    transition: background-color 0.25s, color 0.25s;
    :hover {
        background-color: rgb(52, 52, 52);
    }
`;
  var ButtonActive = styled_components_browser_esm_default.button`
    user-select: none;
    font-size: 20px;
    padding: 2px;
    margin: 2px;
    border: none;
    outline: none;
    color: rgb(0, 0, 0);
    background-color: rgb(255, 255, 255);
    transition: background-color 0.25s, color 0.25s;
    :hover {
        background-color: rgb(52, 52, 52);
    }
`;
  var AutoPilotTab = class extends import_react18.default.Component {
    constructor(props) {
      super(props);
      this.onModeUpdate = (mode) => {
        this.setState({ mode });
      };
      this.changeMode = (mode, on) => {
        this.props.als.lightSocket.emitPromiseIfPossible(
          2 /* ModeSet */,
          quickBuffer(on ? mode : 0 /* Manual */)
        );
      };
      this.state = {
        tabState: 1 /* Schedule */,
        mode: props.als.lightSocket.mode
      };
    }
    componentDidMount() {
      this.props.als.lightSocket.on("mode-update", this.onModeUpdate);
    }
    componentWillUnmount() {
      this.props.als.lightSocket.off("mode-update", this.onModeUpdate);
    }
    renderTabs() {
      switch (this.state.tabState) {
        case 3 /* Door */:
          return /* @__PURE__ */ import_react18.default.createElement(DoorSensor, { als: this.props.als });
        case 2 /* Pattern */:
          return /* @__PURE__ */ import_react18.default.createElement(PatternBuilder, { palette: this.props.palette, als: this.props.als });
        case 1 /* Schedule */:
          return /* @__PURE__ */ import_react18.default.createElement(ScheduleBuilder, { palette: this.props.palette, als: this.props.als });
        default:
          break;
      }
    }
    renderButton(state, name) {
      const active = this.state.tabState === state;
      const Btn2 = active ? ButtonActive : Button7;
      return /* @__PURE__ */ import_react18.default.createElement(Btn2, { onClick: () => this.setState({ tabState: state }) }, name);
    }
    render() {
      return /* @__PURE__ */ import_react18.default.createElement(Warper3, null, /* @__PURE__ */ import_react18.default.createElement(
        CheckBox,
        {
          text: "Auto Pilot",
          enabled: this.state.mode === 3 /* AutoPilot */,
          onChange: (on) => {
            this.changeMode(3 /* AutoPilot */, on);
          }
        }
      ), /* @__PURE__ */ import_react18.default.createElement(DivTab, null, this.renderButton(2 /* Pattern */, "Pattern Builder"), this.renderButton(1 /* Schedule */, "Schedule Builder"), this.props.als.lightSocket.doorSensorConnected ? /* @__PURE__ */ import_react18.default.createElement(import_react18.default.Fragment, null, this.renderButton(3 /* Door */, "Door Sensor")) : null), /* @__PURE__ */ import_react18.default.createElement(Div8, null, this.renderTabs()));
    }
  };

  // src/client/Components/Tabs/Camera.tsx
  var import_react19 = __toESM(require_react());
  var import_react_loading2 = __toESM(require_react_loading());
  var import_moment2 = __toESM(require_moment());
  var Container = styled_components_browser_esm_default.div`
    margin: 10px;
`;
  var Overlay = styled_components_browser_esm_default.div`
    position: absolute;
    margin-left: 5px;
    margin-top: 5px;
    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;
`;
  var Img = styled_components_browser_esm_default.img`
    max-width: 100%;
`;
  var Btn = styled_components_browser_esm_default.button`
    outline: none;
    margin: 5px;
    padding: 5px;
    border: none;
`;
  var CameraTab = class extends import_react19.default.Component {
    constructor(props) {
      super(props);
      this.loaded = /* @__PURE__ */ new Map();
      this.loading = /* @__PURE__ */ new Map();
      this.preload = async (img) => {
        if (img) {
          if (img.token) {
            const urls = this.loading.get(img.date);
            if (urls) {
              urls.push((url) => {
                img.cachedBlobUrl = url;
                this.forceUpdate();
              });
              return;
            }
            if (this.loaded.has(img.date)) {
              img.cachedBlobUrl = this.loaded.get(img.date);
              return;
            }
            const lArray = [];
            this.loading.set(img.date, lArray);
            try {
              const actualUrl = `./webcam/${img.token}`;
              const data = await fetch(actualUrl);
              if (!data.ok || data.status >= 400) {
                throw new Error("Invalidated image");
              }
              const blobUrl = await data.blob();
              const url = img.cachedBlobUrl = URL.createObjectURL(blobUrl);
              this.loaded.set(img.date, url);
              for (const fn of lArray) {
                fn(url);
              }
              this.loading.delete(img.date);
              this.forceUpdate();
            } catch (e2) {
              const failed = img.cachedBlobUrl = await this.drawTextImage(
                `Expired: ${(0, import_moment2.default)(img.date).format()}`,
                1,
                50
              );
              for (const fn of lArray) {
                fn(failed);
              }
              this.loading.delete(img.date);
              this.forceUpdate();
            }
          } else {
            img.cachedBlobUrl = await this.drawTextImage(`Forbidden to load: ${(0, import_moment2.default)(img.date).format()}`, 1, 50);
            this.forceUpdate();
          }
        }
      };
      this.updateImages = async () => {
        this.loaded.clear();
        this.loading.clear();
        const buffer = await this.props.als.lightSocket.emitPromiseIfPossible(8 /* CamGet */);
        const data = JSON.parse(buffer.getUtf8String());
        console.log(data);
        data.images = data.images.filter((i2) => !data.doorOpens.some((e2) => e2.name === i2.name));
        data.images.sort((a2, b2) => parseInt(a2.date, 10) > parseInt(b2.date, 10) ? 1 : -1);
        data.doorOpens.sort((a2, b2) => parseInt(a2.date, 10) > parseInt(b2.date, 10) ? 1 : -1);
        this.preload(data.lastImage);
        data.images.forEach(this.preload);
        data.doorOpens.forEach(this.preload);
        this.setState({
          data
        });
      };
      this.takeImage = async () => {
        this.setState({
          takingImage: true
        });
        try {
          const buffer = await this.props.als.lightSocket.emitPromiseIfPossible(9 /* CamTake */);
          const ok = buffer.getBool();
          if (ok) {
            this.updateImages();
          }
        } catch (error) {
          console.error(error);
        }
        this.setState({
          takingImage: false
        });
      };
      this.state = {
        takingImage: false
      };
    }
    drawTextImage(text, x2 = 50, y2 = 50) {
      const canvas = document.createElement("canvas");
      canvas.width = canvas.height = 250;
      const ctx = canvas.getContext("2d");
      ctx.fillStyle = "#000000";
      ctx.fillRect(0, 0, 250, 250);
      ctx.fillStyle = "#FFFFFF";
      ctx.fillText(text, x2, y2);
      return new Promise((r2) => {
        canvas.toBlob(async (blob) => {
          r2(URL.createObjectURL(blob));
        });
      });
    }
    async componentDidMount() {
      this.loadingPlaceHolder = await this.drawTextImage("loading");
      this.updateImages();
      this.props.als.lightSocket.clientSocket.clientHandle.on(
        4 /* DoorImageAvailable */,
        this.updateImages
      );
    }
    componentWillUnmount() {
      this.props.als.lightSocket.clientSocket.clientHandle.off(
        4 /* DoorImageAvailable */,
        this.updateImages
      );
    }
    renderImage(image, suffix) {
      return /* @__PURE__ */ import_react19.default.createElement("div", null, /* @__PURE__ */ import_react19.default.createElement(Overlay, null, suffix, " ", (0, import_moment2.default)(image.date).format("DD/MM/YYYY HH:mm:ss")), /* @__PURE__ */ import_react19.default.createElement(Img, { src: `${image.cachedBlobUrl || this.loadingPlaceHolder}`, alt: image.name }));
    }
    renderLastImage() {
      if (this.state.data.lastImage) {
        return /* @__PURE__ */ import_react19.default.createElement("div", null, /* @__PURE__ */ import_react19.default.createElement("h1", null, "Last image"), this.renderImage(this.state.data.lastImage, ""));
      }
      return null;
    }
    renderDoorImages() {
      if (this.state.data.doorOpens.length) {
        return /* @__PURE__ */ import_react19.default.createElement("div", null, /* @__PURE__ */ import_react19.default.createElement("h1", null, "Door images"), this.state.data.doorOpens.map((img, i2) => /* @__PURE__ */ import_react19.default.createElement("div", { key: i2 }, this.renderImage(img, "Door"))));
      }
      return null;
    }
    renderOtherImages() {
      if (this.state.data.images.length) {
        return /* @__PURE__ */ import_react19.default.createElement("div", null, /* @__PURE__ */ import_react19.default.createElement("h1", null, "Other images"), this.state.data.images.map((img, i2) => /* @__PURE__ */ import_react19.default.createElement("div", { key: i2 }, this.renderImage(img, "Other"))));
      }
      return null;
    }
    renderDoors() {
      if (this.state.data.lastImage) {
        return /* @__PURE__ */ import_react19.default.createElement("div", null, /* @__PURE__ */ import_react19.default.createElement("h1", null, "Last image"), this.renderImage(this.state.data.lastImage, ""));
      }
      return null;
    }
    render() {
      if (!this.state.data) {
        return /* @__PURE__ */ import_react19.default.createElement(import_react_loading2.default, { className: "m-2", type: "bars", color: "#ffffff", height: 50, width: 50 });
      }
      return /* @__PURE__ */ import_react19.default.createElement(Container, null, /* @__PURE__ */ import_react19.default.createElement(Button7, { onClick: this.takeImage, disabled: this.state.takingImage }, "Take image"), this.renderLastImage(), this.renderDoorImages(), this.renderOtherImages());
    }
  };

  // src/client/Components/Tabs/Device.tsx
  var import_react20 = __toESM(require_react());
  var import_prettysize = __toESM(require_prettysize());
  var import_react_loading3 = __toESM(require_react_loading());
  var import_moment3 = __toESM(require_moment());
  var Div9 = styled_components_browser_esm_default.div`
    padding: 4pt;
    overflow: auto;

    li {
        margin-left: 10pt;
    }
    .border {
        border: 1px solid white;
    }
    .m-2 {
        margin: 8pt;
    }
    .p-2 {
        padding: 8pt;
    }
`;
  var CanvasDiv = styled_components_browser_esm_default.div`
    width: calc(100% - 21px);
    height: 100px;
    padding: 5pt;
    margin: 4px;
    display: flex;
    align-content: stretch;
`;
  var Canvas3 = styled_components_browser_esm_default.canvas`
    height: 100%;
    width: 100%;
    border: 1px solid white;
`;
  var DeviceTab = class extends import_react20.default.Component {
    constructor(props) {
      super(props);
      this.cpu = import_react20.default.createRef();
      this.temperature = import_react20.default.createRef();
      this.destroyed = false;
      this.update = async () => {
        const serverInfoBuffer = await this.props.als.lightSocket.emitPromiseIfPossible(10 /* DeviceInfo */);
        if (this.destroyed) {
          return;
        }
        const serverInfo = JSON.parse(serverInfoBuffer.getUtf8String());
        this.setState({ serverInfo });
        const cpuRect = this.cpu.current.getBoundingClientRect();
        this.cpu.current.width = cpuRect.width;
        this.cpu.current.height = cpuRect.height;
        const tempRect = this.temperature.current.getBoundingClientRect();
        this.temperature.current.width = tempRect.width;
        this.temperature.current.height = tempRect.height;
        this.ctxCpu = this.cpu.current.getContext("2d");
        this.ctxTemperature = this.temperature.current.getContext("2d");
        this.draw(this.ctxCpu, this.cpu.current, serverInfo.cpuUsageHistory);
        this.draw(this.ctxTemperature, this.temperature.current, serverInfo.temperature);
        setTimeout(this.update, 0);
      };
      this.state = {
        serverInfo: void 0
      };
    }
    componentDidMount() {
      this.update();
    }
    componentWillUnmount() {
      this.destroyed = true;
    }
    draw(ctx, canvas, data) {
      const { width, height } = canvas;
      ctx.clearRect(0, 0, width, height);
      const len = data.length;
      const widthDraw = width / (len - 1);
      const max = 100;
      ctx.strokeStyle = "#FFFFFF";
      ctx.fillStyle = "#FFFFFF";
      const lastPos = {
        x: 0,
        y: 0
      };
      for (let i2 = 0; i2 < len; i2++) {
        const value = data[i2];
        const x2 = i2 * widthDraw;
        const y2 = height - value / max * height;
        if (i2 !== 0) {
          ctx.beginPath();
          ctx.moveTo(lastPos.x, lastPos.y);
          ctx.lineTo(x2, y2);
          ctx.stroke();
        }
        lastPos.x = x2;
        lastPos.y = y2;
      }
    }
    get temperatureDisplay() {
      const data = this.state.serverInfo;
      const temp = Math.round(data.temperature[data.temperature.length - 1]);
      return temp ? `${temp}\xB0C` : "Unknown";
    }
    renderConnectedDevices() {
      return clientKeys.map((c2, i2) => {
        return /* @__PURE__ */ import_react20.default.createElement("li", { key: i2 }, c2, ": ", this.state.serverInfo.socketInfo[c2], " ");
      });
    }
    renderSunsetSunrise() {
      const sunsetSunrise = this.state.serverInfo.sunsetSunrise;
      if (this.state.serverInfo.sunsetSunrise) {
        return /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Sunrise:"), " ", sunsetSunrise.sunrise), /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Sunset:"), " ", sunsetSunrise.sunset), /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Solar noon:"), " ", sunsetSunrise.solar_noon), /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Day length:"), " ", sunsetSunrise.day_length), /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Civil twilight begin:"), " ", sunsetSunrise.civil_twilight_begin), /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Civil twilight end:"), " ", sunsetSunrise.civil_twilight_end), /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Nautical twilight begin:"), " ", sunsetSunrise.nautical_twilight_begin), /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Nautical twilight end:"), " ", sunsetSunrise.nautical_twilight_end), /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Astronomical twilight begin:"), " ", sunsetSunrise.astronomical_twilight_begin), /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Astronomical twilight end:"), " ", sunsetSunrise.astronomical_twilight_end));
      }
      return null;
    }
    renderTime() {
      return /* @__PURE__ */ import_react20.default.createElement("div", null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Server time:"), " ", this.state.serverInfo.time, this.renderSunsetSunrise());
    }
    render() {
      if (!this.state.serverInfo) {
        return /* @__PURE__ */ import_react20.default.createElement(import_react_loading3.default, { className: "m-2", type: "bars", color: "#ffffff", height: 50, width: 50 });
      }
      const data = this.state.serverInfo;
      return /* @__PURE__ */ import_react20.default.createElement(Div9, { className: "m-2" }, /* @__PURE__ */ import_react20.default.createElement(CanvasDiv, null, /* @__PURE__ */ import_react20.default.createElement(Canvas3, { ref: this.cpu }), /* @__PURE__ */ import_react20.default.createElement(Canvas3, { ref: this.temperature })), /* @__PURE__ */ import_react20.default.createElement(Div9, { className: "m-2 p-2 border border-terminal" }, "Time", this.renderTime()), /* @__PURE__ */ import_react20.default.createElement(Div9, { className: "m-2 p-2 border border-terminal" }, "Websocket data", /* @__PURE__ */ import_react20.default.createElement("ul", null, this.renderConnectedDevices())), /* @__PURE__ */ import_react20.default.createElement(Div9, { className: "m-2 p-2 border border-terminal" }, /* @__PURE__ */ import_react20.default.createElement(Div9, null, "Arch: ", data?.arch), /* @__PURE__ */ import_react20.default.createElement(Div9, null, "CPU Usage", /* @__PURE__ */ import_react20.default.createElement("ul", null, /* @__PURE__ */ import_react20.default.createElement("li", null, "User: ", (0, import_moment3.default)(Date.now() - data?.cpuUsage?.user / 100).fromNow(true)), /* @__PURE__ */ import_react20.default.createElement("li", null, "System: ", (0, import_moment3.default)(Date.now() - data?.cpuUsage?.system / 100).fromNow(true)))), /* @__PURE__ */ import_react20.default.createElement(Div9, null, "Memory Usage", /* @__PURE__ */ import_react20.default.createElement("ul", null, /* @__PURE__ */ import_react20.default.createElement("li", null, "CPU: ", Math.round(data.cpuUsageHistory[data.cpuUsageHistory.length - 1]), "%"), /* @__PURE__ */ import_react20.default.createElement("li", null, "Temperature: ", this.temperatureDisplay))), /* @__PURE__ */ import_react20.default.createElement(Div9, null, "Memory Usage", /* @__PURE__ */ import_react20.default.createElement("ul", null, /* @__PURE__ */ import_react20.default.createElement("li", null, "External: ", (0, import_prettysize.default)(data?.memoryUsage?.external)), /* @__PURE__ */ import_react20.default.createElement("li", null, "HeapTotal: ", (0, import_prettysize.default)(data?.memoryUsage?.heapTotal)), /* @__PURE__ */ import_react20.default.createElement("li", null, "HeapUsed: ", (0, import_prettysize.default)(data?.memoryUsage?.heapUsed)), /* @__PURE__ */ import_react20.default.createElement("li", null, "Rss: ", (0, import_prettysize.default)(data?.memoryUsage?.rss)))), /* @__PURE__ */ import_react20.default.createElement(Div9, null, "Uptime: ", (0, import_moment3.default)(Date.now() - data.uptime).fromNow(true)), /* @__PURE__ */ import_react20.default.createElement(Div9, null, "Node version: ", data?.version)), /* @__PURE__ */ import_react20.default.createElement(Div9, { className: "m-2 p-2 border border-terminal" }, /* @__PURE__ */ import_react20.default.createElement(Div9, null, /* @__PURE__ */ import_react20.default.createElement("b", null, "Operation System")), /* @__PURE__ */ import_react20.default.createElement(Div9, null, "Platform: ", data.os.platform), /* @__PURE__ */ import_react20.default.createElement(Div9, null, "Release: ", data.os.release), /* @__PURE__ */ import_react20.default.createElement(Div9, null, "Total memory: ", (0, import_prettysize.default)(data.os.totalmem)), /* @__PURE__ */ import_react20.default.createElement(Div9, null, "Uptime: ", (0, import_moment3.default)(Date.now() - data.os.uptime).fromNow(true)), /* @__PURE__ */ import_react20.default.createElement(Div9, null, "User info:", /* @__PURE__ */ import_react20.default.createElement("ul", null, /* @__PURE__ */ import_react20.default.createElement("li", null, "username: ", data.os.userInfo.username), /* @__PURE__ */ import_react20.default.createElement("li", null, "Homedir: ", data.os.userInfo.homedir), /* @__PURE__ */ import_react20.default.createElement("li", null, "Shell: ", data.os.userInfo.shell), /* @__PURE__ */ import_react20.default.createElement("li", null, "GID: ", data.os.userInfo.gid), /* @__PURE__ */ import_react20.default.createElement("li", null, "UID: ", data.os.userInfo.uid))), /* @__PURE__ */ import_react20.default.createElement(Div9, { className: "border border-terminal" }, /* @__PURE__ */ import_react20.default.createElement(Div9, { className: "m-2" }, "CPUS(", data.os.cpus.length, "):"), /* @__PURE__ */ import_react20.default.createElement(Div9, null, /* @__PURE__ */ import_react20.default.createElement("ul", null, data.os.cpus.map((e2, i2) => {
        return /* @__PURE__ */ import_react20.default.createElement(Div9, { className: "card-body", style: { display: "inline-block" }, key: i2 }, /* @__PURE__ */ import_react20.default.createElement("span", null, e2.model), /* @__PURE__ */ import_react20.default.createElement(Div9, null, /* @__PURE__ */ import_react20.default.createElement("ul", null, /* @__PURE__ */ import_react20.default.createElement("li", null, "speed: ", Math.round(e2.speed / 1e3), " Ghz"), /* @__PURE__ */ import_react20.default.createElement("li", null, "sys: ", (0, import_moment3.default)(Date.now() - e2.times.sys).fromNow(true)), /* @__PURE__ */ import_react20.default.createElement("li", null, "user: ", (0, import_moment3.default)(Date.now() - e2.times.user).fromNow(true)), /* @__PURE__ */ import_react20.default.createElement("li", null, "nice: ", (0, import_moment3.default)(Date.now() - e2.times.nice).fromNow(true)), /* @__PURE__ */ import_react20.default.createElement("li", null, "irq: ", (0, import_moment3.default)(Date.now() - e2.times.irq).fromNow(true)), /* @__PURE__ */ import_react20.default.createElement("li", null, "idle: ", (0, import_moment3.default)(Date.now() - e2.times.idle).fromNow(true)))));
      }))))));
    }
  };

  // src/client/Components/Tabs/MagicHome.tsx
  var import_react21 = __toESM(require_react());
  var Div10 = styled_components_browser_esm_default.div`
    width: 100%;
    display: flex;
`;
  var WidthExtend = styled_components_browser_esm_default.div`
    width: 100%;
`;
  var MagicTab = class extends import_react21.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        blockedIps: [],
        ips: []
      };
    }
    componentDidMount() {
      const ips = [...this.props.als.lightSocket.settings.magicHome.ips];
      const blockedIps = [...this.props.als.lightSocket.settings.magicHome.blockedIp];
      this.setState({ blockedIps, ips });
    }
    render() {
      return /* @__PURE__ */ import_react21.default.createElement(import_react21.default.Fragment, null, /* @__PURE__ */ import_react21.default.createElement("h1", null, "Magic home beta"), "Led servers", this.state.ips.map((e2, i2) => {
        return /* @__PURE__ */ import_react21.default.createElement("div", { key: i2 }, " ", e2);
      }), "Blocked IPS:", this.state.blockedIps.map((e2, i2) => {
        return /* @__PURE__ */ import_react21.default.createElement("div", { key: i2 }, e2);
      }));
    }
  };

  // src/client/Components/Tabs/Manual.tsx
  var import_react22 = __toESM(require_react());

  // src/client/Utils/Utils.ts
  function isVertical() {
    return window.innerHeight > window.innerWidth;
  }

  // src/client/Components/Tabs/Manual.tsx
  var Div11 = styled_components_browser_esm_default.div`
    margin: 10px;
`;
  var CheckBoxDiv = styled_components_browser_esm_default.div`
    display: inline-block;
`;
  var CheckBoxFlex = styled_components_browser_esm_default.div`
    display: flex;
`;
  var Warper4 = styled_components_browser_esm_default.div`
    overflow: auto;
`;
  var ManualTab = class extends import_react22.default.Component {
    constructor(props) {
      super(props);
      this.DEFAULT_COLOR_HEX = "FF0000";
      this.BROWSER_KEY = "last-colour";
      this.onModeUpdate = (mode) => {
        this.setState({ mode });
        this.forceUpdate();
      };
      this.changeMode = (mode, on) => {
        this.props.als.lightSocket.emitIfPossible(
          2 /* ModeSet */,
          quickBuffer(on ? mode : 3 /* AutoPilot */)
        );
      };
      this.resize = () => {
        this.setState({ vertical: isVertical() });
      };
      this.onChange = (colour) => {
        BrowserStorage.setString(this.BROWSER_KEY, colour.hex);
        const ls = this.props.als.lightSocket;
        if (ls.connected) {
          ls.setColor(colour.rgb.r, colour.rgb.g, colour.rgb.b);
        }
      };
      this.state = {
        colourHex: BrowserStorage.getString(this.BROWSER_KEY) || this.DEFAULT_COLOR_HEX,
        vertical: isVertical(),
        mode: props.als.lightSocket.mode
      };
    }
    componentDidMount() {
      window.addEventListener("resize", this.resize);
      this.props.als.lightSocket.on("mode-update", this.onModeUpdate);
    }
    componentWillUnmount() {
      window.removeEventListener("resize", this.resize);
      this.props.als.lightSocket.off("mode-update", this.onModeUpdate);
    }
    render() {
      return /* @__PURE__ */ import_react22.default.createElement(Warper4, null, /* @__PURE__ */ import_react22.default.createElement(index_es_default, { place: "top", type: "info", effect: "solid" }), /* @__PURE__ */ import_react22.default.createElement(CheckBoxFlex, null, /* @__PURE__ */ import_react22.default.createElement(CheckBoxDiv, { "data-tip": "LEDs will keep its state as long as this page is open then it will fall back to autopilot" }, /* @__PURE__ */ import_react22.default.createElement(
        CheckBox,
        {
          text: "Manual",
          enabled: this.state.mode === 0 /* Manual */,
          onChange: (on) => {
            this.changeMode(0 /* Manual */, on);
          }
        }
      )), /* @__PURE__ */ import_react22.default.createElement(CheckBoxDiv, { "data-tip": "LEDs will keep its state even when this page is closed. Can still be overwritten by door switch" }, /* @__PURE__ */ import_react22.default.createElement(
        CheckBox,
        {
          text: "Manual Force",
          enabled: this.state.mode === 1 /* ManualForce */,
          onChange: (on) => {
            this.changeMode(1 /* ManualForce */, on);
          }
        }
      )), /* @__PURE__ */ import_react22.default.createElement(CheckBoxDiv, { "data-tip": "LEDs will keep its state no matter what. Even door switch can't overwrite this" }, /* @__PURE__ */ import_react22.default.createElement(
        CheckBox,
        {
          text: "Manual Locked",
          enabled: this.state.mode === 2 /* ManualLocked */,
          onChange: (on) => {
            this.changeMode(2 /* ManualLocked */, on);
          }
        }
      ))), /* @__PURE__ */ import_react22.default.createElement(Div11, { style: { textAlign: this.state.vertical ? "center" : "left" } }, /* @__PURE__ */ import_react22.default.createElement(
        ColourPicker,
        {
          palette: this.props.palette,
          onChange: this.onChange,
          lifeUpdate: true,
          colour: this.state.colourHex
        }
      )));
    }
  };

  // src/client/Components/Tabs/Tabs.tsx
  var Tab2 = class extends import_react23.default.Component {
    render() {
      const tab = this.props.tab;
      switch (tab) {
        case "Device":
          return /* @__PURE__ */ import_react23.default.createElement(DeviceTab, { als: this.props.als });
        case "AutoPilot":
          return /* @__PURE__ */ import_react23.default.createElement(AutoPilotTab, { als: this.props.als, palette: this.props.palette });
        case "Audio":
          return /* @__PURE__ */ import_react23.default.createElement(AudioTab, { als: this.props.als });
        case "MagicHome":
          return /* @__PURE__ */ import_react23.default.createElement(MagicTab, { als: this.props.als });
        case "Camera":
          return /* @__PURE__ */ import_react23.default.createElement(CameraTab, { als: this.props.als });
        default:
          return /* @__PURE__ */ import_react23.default.createElement(ManualTab, { als: this.props.als, palette: this.props.palette });
      }
    }
  };

  // src/client/Components/ColourTitle/ColourTitle.tsx
  var import_react24 = __toESM(require_react());
  var H1 = styled_components_browser_esm_default.h1`
    display: inline-block;
`;
  var Canvas4 = styled_components_browser_esm_default.canvas`
    margin: 10px 10px 0px 10px;
    border: 2px solid black;
    border-radius: 5px;
`;
  var ColourTitle = class extends import_react24.default.Component {
    constructor() {
      super(...arguments);
      this.title = "LumiFlex";
      this.ref = import_react24.default.createRef();
      this.canvasSize = 25;
      this.destroyed = false;
      this.onSocketConnect = async () => {
        const lightSocket = this.props.als.lightSocket;
        try {
          const modeBuffer = await lightSocket.emitPromiseIfPossible(3 /* ModeGet */);
          const rgb = await lightSocket.emitPromiseIfPossible(1 /* RGBGet */);
          if (this.destroyed) {
            return;
          }
          this.onModeUpdate(modeBuffer.getUint8());
          const r2 = rgb.getUint8();
          const g2 = rgb.getUint8();
          const b2 = rgb.getUint8();
          this.onRGBUpdate({ r: r2, g: g2, b: b2 });
        } catch (error) {
          Logger.debug("Socket error", error);
        }
      };
      this.onModeUpdate = (mode) => {
        document.title = `${this.title} (${modeToString(mode)})`;
      };
      this.onRGBUpdate = (rgb) => {
        if (this.destroyed)
          return;
        if (!this.crx)
          return;
        const red2 = rgb.r;
        const green = rgb.g;
        const blue = rgb.b;
        const h2 = this.canvas.height;
        const w3 = this.canvas.width;
        this.crx.fillStyle = rgb2hex(red2, green, blue);
        this.crx.fillRect(0, 0, w3, h2);
        const dataUrl = this.crx.canvas.toDataURL();
        this.favIconReference.href = dataUrl;
      };
    }
    async componentDidMount() {
      const lightSocket = this.props.als.lightSocket;
      this.crx = this.canvas.getContext("2d");
      lightSocket.on("rgb-update", this.onRGBUpdate);
      lightSocket.on("mode-update", this.onModeUpdate);
      this.favIconReference = document.createElement("link");
      document.head.append(this.favIconReference);
      this.favIconReference.rel = "shortcut icon";
      const connected = this.props.als.lightSocket.clientSocket.connected;
      if (connected) {
        this.onSocketConnect();
      } else {
        this.props.als.lightSocket.clientSocket.clientHandle.on(251 /* Connect */, this.onSocketConnect);
      }
    }
    componentWillUnmount() {
      this.destroyed = true;
      document.head.removeChild(this.favIconReference);
    }
    get canvas() {
      return this.ref.current;
    }
    render() {
      return /* @__PURE__ */ import_react24.default.createElement("div", null, /* @__PURE__ */ import_react24.default.createElement(Canvas4, { ref: this.ref, height: this.canvasSize, width: this.canvasSize }), /* @__PURE__ */ import_react24.default.createElement(H1, null, "LumiFlex"));
    }
  };

  // src/client/Components/ColourPicker/ColourPickerDataImages.ts
  var PreGenerateColourPickerPalette = class {
    constructor() {
      this.SV_MAX = 100;
      this.H_MAX = 360;
      this.BOX_SIZE = 255;
      this.BOX_SIDE_WIDTH = 25;
      this.BOX_SIDE_HEIGHT = this.BOX_SIZE;
      this.MAX_RGB_VALUE = 255;
      this.preloaded = /* @__PURE__ */ new Map();
      this.preloadedSide = /* @__PURE__ */ new Map();
      // h:v
      this.pixelArray = new Uint8ClampedArray(this.BOX_SIZE * this.BOX_SIZE * 4);
    }
    async generate(process2) {
      return;
      const totalIterations = this.H_MAX * this.SV_MAX + this.SV_MAX;
      let i2 = 0;
      for (let v2 = 0; v2 <= this.SV_MAX; v2++) {
        const imageData = this.generateImageDataMain(v2);
        this.preloaded.set(v2, imageData);
        await this.next();
        if (process2) {
          process2(Math.round(++i2 / totalIterations * 100));
        }
      }
      for (let h2 = 0; h2 <= this.H_MAX; h2++) {
        for (let s2 = 0; s2 < this.SV_MAX; s2++) {
          const imageData = this.generateImageDataSide(h2, s2);
          const side = this.getSideString(h2, s2);
          this.preloadedSide.set(side, imageData);
          await this.next();
          if (process2) {
            process2(Math.round(++i2 / totalIterations * 100));
          }
        }
      }
    }
    next() {
      return new Promise((resolve2) => {
        requestAnimationFrame(resolve2);
      });
    }
    getSideColour(h2, s2, v2) {
      const height = this.BOX_SIDE_HEIGHT;
      const HSV = {
        h: h2,
        s: s2,
        v: 1 - v2 / height
      };
      const { r: red2, g: green, b: blue } = hsv2rgb(HSV);
      return { r: red2, g: green, b: blue };
    }
    getColourAt(x2, y2, v2) {
      y2 = y2 / this.BOX_SIZE * this.SV_MAX / this.SV_MAX;
      const HSV = {
        h: x2 / this.BOX_SIZE * this.H_MAX,
        s: 1 - y2,
        v: v2 / this.SV_MAX
      };
      const { r: red2, g: green, b: blue } = hsv2rgb(HSV);
      return { r: red2, g: green, b: blue };
    }
    generateImageDataSide(h2, s2) {
      const width = this.BOX_SIDE_WIDTH;
      const height = this.BOX_SIDE_HEIGHT;
      const len = width * height * 4;
      const pixelArray = new Uint8ClampedArray(len);
      let i2 = 0;
      for (let y2 = 0; y2 < height; y2++) {
        const colourObj = this.getSideColour(h2, s2, y2);
        for (let x2 = 0; x2 < width; x2++) {
          pixelArray[i2++] = colourObj.r;
          pixelArray[i2++] = colourObj.g;
          pixelArray[i2++] = colourObj.b;
          pixelArray[i2++] = this.MAX_RGB_VALUE;
        }
      }
      return new ImageData(pixelArray, width);
    }
    generateImageDataMain(v2) {
      const width = this.BOX_SIZE;
      const height = this.BOX_SIZE;
      const len = width * height * 4;
      const pixelArray = new Uint8ClampedArray(len);
      let i2 = 0;
      for (let x2 = 0; x2 < width; x2++) {
        for (let y2 = 0; y2 < height; y2++) {
          const colourObj = this.getColourAt(y2, x2, v2);
          pixelArray[i2++] = colourObj.r;
          pixelArray[i2++] = colourObj.g;
          pixelArray[i2++] = colourObj.b;
          pixelArray[i2++] = this.MAX_RGB_VALUE;
        }
      }
      return new ImageData(pixelArray, width);
    }
    getImageDataMain(v2) {
      let imageData = this.preloaded.get(v2);
      if (!imageData) {
        imageData = this.generateImageDataMain(v2);
        this.preloaded.set(v2, imageData);
      }
      return imageData;
    }
    getImageDataSide(h2, s2) {
      const sideString = this.getSideString(h2, s2);
      let imageData = this.preloadedSide.get(sideString);
      if (!imageData) {
        imageData = this.generateImageDataSide(h2, s2);
        this.preloadedSide.set(sideString, imageData);
      }
      return imageData;
    }
    getSideString(h2, s2) {
      return `${h2}:${s2}`;
    }
  };

  // src/client/Components/Toaster/Toaster.tsx
  var import_react25 = __toESM(require_react());
  var Div12 = styled_components_browser_esm_default.div`
    pointer-events: none;
    touch-action: none;
    position: fixed;
    display: flex;
    flex-direction: column;
    right: 0;
    top: 0;
    margin: 0;
    padding: 0;
    align-items: flex-end;
`;
  var Toast = styled_components_browser_esm_default.div`
    padding: 5px;
    margin: 5px;
    border-radius: 5px;
    min-width: 200px;
    min-height: 100px;
    background-color: rgba(16, 16, 128, 0.5);
    backdrop-filter: blur(10px);
    transform-origin: right;
    overflow: hidden;
    position: relative;
    span {
        white-space: pre;
    }
`;
  var Toaster = class extends import_react25.default.Component {
    constructor(props) {
      super(props);
      this.SHOW_TIME = SECOND * 10;
      this.TRANSITION_TIME = 250;
      this.timeouts = [];
      this.onNotification = (socketError) => {
        if (socketError.type === "log") {
          console.log("Server", socketError.title, socketError.description);
          return;
        }
        const socketErrors = [...this.state.socketErrors];
        const displayError = { log: socketError, showing: true, transition: true };
        socketErrors.push(displayError);
        this.setState({ socketErrors });
        const getState = () => {
          const state = { ...this.state };
          const index2 = state.socketErrors.indexOf(displayError);
          if (index2 === -1) {
            return void 0;
          }
          const error = state.socketErrors[index2];
          return {
            state,
            index: index2,
            error,
            update: () => {
              this.setState(state);
            }
          };
        };
        this.setTimeout(() => {
          const obj = getState();
          if (obj) {
            obj.error.showing = false;
            obj.error.transition = true;
            obj.update();
            this.setTimeout(() => {
              const obj2 = getState();
              if (obj2) {
                obj2.error.transition = false;
                obj2.update();
              }
            }, this.TRANSITION_TIME);
          }
        }, 0);
        this.setTimeout(() => {
          const obj = getState();
          if (obj) {
            obj.error.transition = true;
            obj.error.showing = true;
            obj.update();
            this.setTimeout(() => {
              removeFromArray(obj.state.socketErrors, obj.error);
              obj.update();
            }, this.TRANSITION_TIME);
          }
        }, this.SHOW_TIME);
      };
      this.getToast = (socketError, index2) => {
        const style = {};
        switch (socketError.log.type) {
          case "fatal":
            style.border = "2px solid red";
            break;
          case "error":
            style.border = "2px solid #bf0000";
            break;
          case "warn":
            style.border = "2px solid #26c100";
            break;
          case "info":
            style.border = "2px solid #05c281";
            break;
        }
        if (socketError.transition) {
          style.transition = `transform ${this.TRANSITION_TIME / 1e3}s`;
        } else {
          style.transition = "";
        }
        if (socketError.showing) {
          style.transform = "scaleX(0)";
        } else {
          style.transform = "scaleX(1)";
        }
        return /* @__PURE__ */ import_react25.default.createElement(Toast, { key: index2, style }, /* @__PURE__ */ import_react25.default.createElement("h2", null, socketError.log.title), /* @__PURE__ */ import_react25.default.createElement("span", null, socketError.log.description || ""));
      };
      this.state = {
        socketErrors: []
      };
    }
    componentDidMount() {
      this.props.als.on("log", this.onNotification);
    }
    componentWillUnmount() {
      for (const number of this.timeouts) {
        clearTimeout(number);
      }
      this.props.als.off("log", this.onNotification);
    }
    setTimeout(fn, timeout) {
      const number = setTimeout(() => {
        fn();
        removeFromArray(this.timeouts, number);
      }, timeout);
      pushUniqToArray(this.timeouts, number);
    }
    render() {
      return /* @__PURE__ */ import_react25.default.createElement(Div12, null, this.state.socketErrors.map(this.getToast));
    }
  };

  // src/client/App.tsx
  var Button8 = styled_components_browser_esm_default.button`
    display: block;
    background-color: rgb(32, 32, 32);
    color: white;
    border-radius: 5px;
    border: none;
    margin: 5px;
    padding: 5px;
    outline: none;
`;
  var Authenticate = styled_components_browser_esm_default.div`
    display: inline-block;
    background-color: rgb(16, 16, 16);
    align-items: center;
    color: white;
    border-radius: 5px;
    border: none;
    margin: 5px;
    padding: 5px;
    outline: none;
`;
  var Input4 = styled_components_browser_esm_default.input`
    background-color: rgb(8, 8, 8);
    height: 20px;
    align-items: center;
    color: white;
    outline: none;
    border-radius: 5px;
    border: 1px solid rgb(64, 64, 64);
`;
  var App = class extends import_react26.default.Component {
    constructor(props) {
      super(props);
      this.activeTabKey = "active-tab";
      this.sending = false;
      this.audioLightSystem = new AudioLightSystem();
      this.preGenerateColourPickerPalette = new PreGenerateColourPickerPalette();
      this.destroyed = false;
      this.update = () => {
        this.forceUpdate();
      };
      this.resize = () => {
        this.setState({ visualizerWidth: window.innerWidth });
      };
      this.handleColorChange = async (colour) => {
        BrowserStorage.setString("lastColour", colour.hex);
        const { r: red2, g: green, b: blue } = colour.rgb;
        if (this.sending)
          return;
        this.sending = true;
        await this.audioLightSystem.lightSocket.setColor(red2, green, blue);
        this.sending = false;
      };
      this.onShowVisualizers = () => {
        const newState = !this.state.showVisualizers;
        this.setState({ showVisualizers: newState });
        BrowserStorage.setBoolean("showVisualizers", newState);
      };
      this.onTabChange = (tab) => {
        if (tab !== "MagicHome") {
          BrowserStorage.setString(this.activeTabKey, tab);
        }
        this.setState({ tab });
      };
      this.state = {
        showVisualizers: BrowserStorage.getBoolean("showVisualizers"),
        visualizerWidth: window.innerWidth,
        password: "",
        error: "",
        tab: BrowserStorage.getString(this.activeTabKey) || "Manual"
      };
    }
    componentDidMount() {
      window.addEventListener("resize", this.resize);
      this.audioLightSystem.lightSocket.on("connect", this.update);
      this.audioLightSystem.lightSocket.on("auth", this.update);
      this.audioLightSystem.lightSocket.on("disconnect", this.update);
      window.als = this.audioLightSystem;
      this.preGenerateColourPickerPalette.generate(
        false ? void 0 : (percent) => {
        }
      );
    }
    componentWillUnmount() {
      this.destroyed = true;
      window.removeEventListener("resize", this.resize);
      this.audioLightSystem.lightSocket.off("connect", this.update);
      this.audioLightSystem.lightSocket.off("auth", this.update);
      this.audioLightSystem.lightSocket.off("disconnect", this.update);
    }
    get renderContent() {
      return /* @__PURE__ */ import_react26.default.createElement(import_react26.default.Fragment, null, /* @__PURE__ */ import_react26.default.createElement(NavigationBar, { als: this.audioLightSystem, tab: this.state.tab, onChange: this.onTabChange }), /* @__PURE__ */ import_react26.default.createElement(Tab2, { tab: this.state.tab, als: this.audioLightSystem, palette: this.preGenerateColourPickerPalette }));
    }
    get socketWindow() {
      const auth = async () => {
        this.setState({ error: "" });
        try {
          await this.audioLightSystem.lightSocket.authenticate(this.state.password);
          this.setState({ password: "" });
        } catch (error) {
          this.setState({ error: error.message });
        }
      };
      return /* @__PURE__ */ import_react26.default.createElement(Authenticate, null, /* @__PURE__ */ import_react26.default.createElement("h2", null, "Password"), /* @__PURE__ */ import_react26.default.createElement(
        Input4,
        {
          type: "password",
          value: this.state.password,
          onChange: (e2) => this.setState({ password: e2.target.value }),
          onKeyUp: (e2) => {
            if (e2.key.toLowerCase() === "enter") {
              auth();
            }
          }
        }
      ), /* @__PURE__ */ import_react26.default.createElement(Button8, { onClick: auth }, "Connect"), /* @__PURE__ */ import_react26.default.createElement("span", null, this.state.error));
    }
    render() {
      const soc = this.audioLightSystem.lightSocket;
      return /* @__PURE__ */ import_react26.default.createElement(import_react26.default.Fragment, null, /* @__PURE__ */ import_react26.default.createElement(ColourTitle, { als: this.audioLightSystem }), soc.socket.connected ? this.renderContent : this.socketWindow, /* @__PURE__ */ import_react26.default.createElement(Toaster, { als: this.audioLightSystem }));
    }
  };

  // src/client/index.tsx
  import_react_dom.default.render(/* @__PURE__ */ import_react27.default.createElement(App, null), document.getElementById("app"));
})();
/*! Bundled license information:

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react/cjs/react.development.js:
  (** @license React v17.0.1
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (** @license React v0.20.1
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler-tracing.development.js:
  (** @license React v0.20.1
   * scheduler-tracing.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (** @license React v17.0.1
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

moment/moment.js:
  (*! moment.js *)
  (*! version : 2.29.1 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)

lodash/dist/lodash.js:
  (**
   * @license
   * Lo-Dash 2.4.2 (Custom Build) <https://lodash.com/>
   * Build: `lodash modern -o ./dist/lodash.js`
   * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
   * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
   * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   * Available under MIT license <https://lodash.com/license>
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-loading/dist/react-loading.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
  (** @license React v16.3.2
   * react.production.min.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (** @license React v16.3.2
   * react.development.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

chroma-js/chroma.js:
  (**
   * @license
   *
   * chroma.js - JavaScript library for color conversions
   * 
   * Copyright (c) 2011-2017, Gregor Aisch
   * All rights reserved.
   * 
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   * 
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the documentation
   *    and/or other materials provided with the distribution.
   * 
   * 3. The name Gregor Aisch may not be used to endorse or promote products
   *    derived from this software without specific prior written permission.
   * 
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
   * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
   * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *
   *)
  (**
  	ColorBrewer colors for chroma.js
  
  	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The 
  	Pennsylvania State University.
  
  	Licensed under the Apache License, Version 2.0 (the "License"); 
  	you may not use this file except in compliance with the License.
  	You may obtain a copy of the License at	
  	http://www.apache.org/licenses/LICENSE-2.0
  
  	Unless required by applicable law or agreed to in writing, software distributed
  	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
  	CONDITIONS OF ANY KIND, either express or implied. See the License for the
  	specific language governing permissions and limitations under the License.
  
      @preserve
   *)

@fortawesome/fontawesome-svg-core/index.es.js:
  (*!
   * Font Awesome Free 5.15.1 by @fontawesome - https://fontawesome.com
   * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
   *)

@fortawesome/free-solid-svg-icons/index.es.js:
  (*!
   * Font Awesome Free 5.15.1 by @fontawesome - https://fontawesome.com
   * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
   *)
*/
